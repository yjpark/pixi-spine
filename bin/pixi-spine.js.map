{"version":3,"file":"pixi-spine.js","sourceRoot":"","sources":["../src/core/Animation.ts","../src/core/AnimationState.ts","../src/core/AnimationStateData.ts","../src/core/AtlasAttachmentLoader.ts","../src/core/BlendMode.ts","../src/core/Bone.ts","../src/core/BoneData.ts","../src/core/Constraint.ts","../src/core/Event.ts","../src/core/EventData.ts","../src/core/IkConstraint.ts","../src/core/IkConstraintData.ts","../src/core/PathConstraint.ts","../src/core/PathConstraintData.ts","../src/core/Skeleton.ts","../src/core/SkeletonBinary.ts","../src/core/SkeletonBounds.ts","../src/core/SkeletonClipping.ts","../src/core/SkeletonData.ts","../src/core/SkeletonJson.ts","../src/core/Skin.ts","../src/core/Slot.ts","../src/core/SlotData.ts","../src/core/Texture.ts","../src/core/TextureAtlas.ts","../src/core/TransformConstraint.ts","../src/core/TransformConstraintData.ts","../src/core/Triangulator.ts","../src/core/Updatable.ts","../src/core/Utils.ts","../src/core/VertexEffect.ts","../src/core/attachments/Attachment.ts","../src/core/attachments/AttachmentLoader.ts","../src/core/attachments/AttachmentType.ts","../src/core/attachments/BoundingBoxAttachment.ts","../src/core/attachments/ClippingAttachment.ts","../src/core/attachments/MeshAttachment.ts","../src/core/attachments/PathAttachment.ts","../src/core/attachments/PointAttachment.ts","../src/core/attachments/RegionAttachment.ts","../src/core/vertexeffects/JitterEffect.ts","../src/core/vertexeffects/SwirlEffect.ts","../src/polyfills.ts","../src/Spine.ts","../src/exporter.ts","../src/loaders.ts"],"names":[],"mappings":";;;;;;;;;;;;;AA6BA,IAAU,UAAU,CAq/CnB;AAr/CD,WAAU,UAAU;IAAC,IAAA,IAAI,CAq/CxB;IAr/CoB,WAAA,IAAI;QAGrB;YASI,mBAAa,IAAY,EAAE,SAA0B,EAAE,QAAgB;gBACnE,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,SAAS,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;gBACpE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;gBACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE;oBACrC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,GAAG,IAAI,CAAC;gBAC1D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC7B,CAAC;YAED,+BAAW,GAAX,UAAa,EAAU;gBACnB,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC;YACxC,CAAC;YAOD,yBAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,IAAa,EAAE,MAAoB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACnJ,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAElE,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,EAAE;oBAC5B,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC;oBACtB,IAAI,QAAQ,GAAG,CAAC;wBAAE,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC;iBAC/C;gBAED,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBAC5C,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;YACtF,CAAC;YAIM,sBAAY,GAAnB,UAAqB,MAAyB,EAAE,MAAc,EAAE,IAAgB;gBAAhB,qBAAA,EAAA,QAAgB;gBAC5E,IAAI,GAAG,GAAG,CAAC,CAAC;gBACZ,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC;gBACpC,IAAI,IAAI,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC3B,IAAI,OAAO,GAAG,IAAI,KAAK,CAAC,CAAC;gBACzB,OAAO,IAAI,EAAE;oBACT,IAAI,MAAM,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,MAAM;wBACtC,GAAG,GAAG,OAAO,GAAG,CAAC,CAAC;;wBAElB,IAAI,GAAG,OAAO,CAAC;oBACnB,IAAI,GAAG,IAAI,IAAI;wBAAE,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;oBACzC,OAAO,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;iBAChC;YACL,CAAC;YAEM,sBAAY,GAAnB,UAAqB,MAAyB,EAAE,MAAc,EAAE,IAAY;gBACxE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI;oBAC7D,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM;wBAAE,OAAO,CAAC,CAAC;gBACrC,OAAO,CAAC,CAAC,CAAC;YACd,CAAC;YACL,gBAAC;QAAD,CAAC,AAhED,IAgEC;QAhEY,cAAS,YAgErB,CAAA;QA+BD,IAAY,QAsBX;QAtBD,WAAY,QAAQ;YAGhB,yCAAK,CAAA;YAML,yCAAK,CAAA;YAKL,6CAAO,CAAA;YAOP,qCAAG,CAAA;QACP,CAAC,EAtBW,QAAQ,GAAR,aAAQ,KAAR,aAAQ,QAsBnB;QAMD,IAAY,YAEX;QAFD,WAAY,YAAY;YACpB,iDAAK,CAAA;YAAE,mDAAM,CAAA;QACjB,CAAC,EAFW,YAAY,GAAZ,iBAAY,KAAZ,iBAAY,QAEvB;QAED,IAAY,YAOX;QAPD,WAAY,YAAY;YACpB,mDAAM,CAAA;YAAE,yDAAS,CAAA;YAAE,iDAAK,CAAA;YAAE,iDAAK,CAAA;YAC/B,2DAAU,CAAA;YAAE,iDAAK,CAAA;YAAE,mDAAM,CAAA;YACzB,iDAAK,CAAA;YAAE,yDAAS,CAAA;YAChB,+DAAY,CAAA;YAAE,8EAAmB,CAAA;YACjC,oFAAsB,CAAA;YAAE,kFAAqB,CAAA;YAAE,0EAAiB,CAAA;YAChE,wDAAQ,CAAA;QACZ,CAAC,EAPW,YAAY,GAAZ,iBAAY,KAAZ,iBAAY,QAOvB;QAGD;YAQI,uBAAa,UAAkB;gBAC3B,IAAI,UAAU,IAAI,CAAC;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,GAAG,UAAU,CAAC,CAAC;gBAC9E,IAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC;YACpF,CAAC;YAGD,qCAAa,GAAb;gBACI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,WAAW,GAAG,CAAC,CAAC;YAC9D,CAAC;YAGD,iCAAS,GAAT,UAAW,UAAkB;gBACzB,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC;YAC/E,CAAC;YAGD,kCAAU,GAAV,UAAY,UAAkB;gBAC1B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC,OAAO,CAAC;YAChF,CAAC;YAID,oCAAY,GAAZ,UAAc,UAAkB;gBAC5B,IAAI,KAAK,GAAG,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC;gBACnD,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM;oBAAE,OAAO,aAAa,CAAC,MAAM,CAAC;gBAC7D,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAI,IAAI,IAAI,aAAa,CAAC,MAAM;oBAAE,OAAO,aAAa,CAAC,MAAM,CAAC;gBAC9D,IAAI,IAAI,IAAI,aAAa,CAAC,OAAO;oBAAE,OAAO,aAAa,CAAC,OAAO,CAAC;gBAChE,OAAO,aAAa,CAAC,MAAM,CAAC;YAChC,CAAC;YAKD,gCAAQ,GAAR,UAAU,UAAkB,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW;gBAC5E,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;gBACnE,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;gBACjF,IAAI,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;gBACrD,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,CAAC;gBAE7F,IAAI,CAAC,GAAG,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC;gBAC/C,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC;gBAEnC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;gBACrB,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;oBAC3D,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBACd,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;oBAClB,GAAG,IAAI,IAAI,CAAC;oBACZ,GAAG,IAAI,IAAI,CAAC;oBACZ,IAAI,IAAI,KAAK,CAAC;oBACd,IAAI,IAAI,KAAK,CAAC;oBACd,CAAC,IAAI,GAAG,CAAC;oBACT,CAAC,IAAI,GAAG,CAAC;iBACZ;YACL,CAAC;YAGD,uCAAe,GAAf,UAAiB,UAAkB,EAAE,OAAe;gBAChD,OAAO,GAAG,KAAA,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,CAAC,GAAG,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC;gBAC/C,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACrB,IAAI,IAAI,IAAI,aAAa,CAAC,MAAM;oBAAE,OAAO,OAAO,CAAC;gBACjD,IAAI,IAAI,IAAI,aAAa,CAAC,OAAO;oBAAE,OAAO,CAAC,CAAC;gBAC5C,CAAC,EAAE,CAAC;gBACJ,IAAI,CAAC,GAAG,CAAC,CAAC;gBACV,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;oBACtE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACd,IAAI,CAAC,IAAI,OAAO,EAAE;wBACd,IAAI,KAAK,SAAQ,EAAE,KAAK,SAAQ,CAAC;wBACjC,IAAI,CAAC,IAAI,KAAK,EAAE;4BACZ,KAAK,GAAG,CAAC,CAAC;4BACV,KAAK,GAAG,CAAC,CAAC;yBACb;6BAAM;4BACH,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACtB,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;yBACzB;wBACD,OAAO,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;qBAC5E;iBACJ;gBACD,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtB,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACjD,CAAC;YA1FM,oBAAM,GAAG,CAAC,CAAC;YAAQ,qBAAO,GAAG,CAAC,CAAC;YAAQ,oBAAM,GAAG,CAAC,CAAC;YAClD,yBAAW,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;YA4FpC,oBAAC;SAAA,AA9FD,IA8FC;QA9FqB,kBAAa,gBA8FlC,CAAA;QAGD;YAAoC,kCAAa;YAW7C,wBAAa,UAAkB;gBAA/B,YACI,kBAAM,UAAU,CAAC,SAEpB;gBADG,KAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,IAAI,CAAC,CAAC,CAAC;;YACvD,CAAC;YAED,sCAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YACxD,CAAC;YAGD,iCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,OAAe;gBACvD,UAAU,KAAK,CAAC,CAAC;gBACjB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,cAAc,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;YAChE,CAAC;YAED,8BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACpI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAEzB,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,OAAO;gBACzB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;4BACnC,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,GAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;4BAC3C,IAAI,CAAC,QAAQ,IAAI,CAAC,GAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,GAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;qBAC3F;oBACD,OAAO;iBACV;gBAED,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,EAAE;oBACxD,IAAI,GAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC;oBAC7D,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAC,GAAG,KAAK,CAAC;4BAC/C,MAAM;wBACV,KAAK,QAAQ,CAAC,KAAK,CAAC;wBACpB,KAAK,QAAQ,CAAC,OAAO;4BACjB,GAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;4BACxC,GAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,GAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;wBAC9D,KAAK,QAAQ,CAAC,GAAG;4BACb,IAAI,CAAC,QAAQ,IAAI,GAAC,GAAG,KAAK,CAAC;qBAClC;oBACD,OAAO;iBACV;gBAGD,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;gBACzE,IAAI,YAAY,GAAG,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC;gBAChE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,EAC/C,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;gBAErF,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;gBAC/D,CAAC,GAAG,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,CAAC;gBACxF,QAAQ,KAAK,EAAE;oBACX,KAAK,QAAQ,CAAC,KAAK;wBACf,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;wBACxG,MAAM;oBACV,KAAK,QAAQ,CAAC,KAAK,CAAC;oBACpB,KAAK,QAAQ,CAAC,OAAO;wBACjB,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC5C,KAAK,QAAQ,CAAC,GAAG;wBACb,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;iBAC3F;YACL,CAAC;YA9EM,sBAAO,GAAG,CAAC,CAAC;YACZ,wBAAS,GAAG,CAAC,CAAC,CAAC;YAAQ,4BAAa,GAAG,CAAC,CAAC,CAAC;YAC1C,uBAAQ,GAAG,CAAC,CAAC;YA6ExB,qBAAC;SAAA,AAhFD,CAAoC,aAAa,GAgFhD;QAhFY,mBAAc,iBAgF1B,CAAA;QAGD;YAAuC,qCAAa;YAWhD,2BAAa,UAAkB;gBAA/B,YACI,kBAAM,UAAU,CAAC,SAEpB;gBADG,KAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;;YAC9E,CAAC;YAED,yCAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YAC3D,CAAC;YAGD,oCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,CAAS,EAAE,CAAS;gBAC5D,UAAU,IAAI,iBAAiB,CAAC,OAAO,CAAC;gBACxC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAClD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACtD,CAAC;YAED,iCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACpI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAEzB,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,OAAO;gBACzB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;4BACrB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;4BACrB,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;4BACzC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;qBAChD;oBACD,OAAO;iBACV;gBAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,iBAAiB,CAAC,OAAO,CAAC,EAAE;oBAC3D,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;oBACrD,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;iBACxD;qBAAM;oBAEH,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;oBAC5E,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;oBAC7C,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;oBAC7C,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,iBAAiB,CAAC,OAAO,GAAG,CAAC,EACpE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAExF,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACzD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;iBAC5D;gBACD,QAAQ,KAAK,EAAE;oBACX,KAAK,QAAQ,CAAC,KAAK;wBACf,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBACjC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBACjC,MAAM;oBACV,KAAK,QAAQ,CAAC,KAAK,CAAC;oBACpB,KAAK,QAAQ,CAAC,OAAO;wBACjB,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;wBAC7C,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;wBAC7C,MAAM;oBACV,KAAK,QAAQ,CAAC,GAAG;wBACb,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;wBACpB,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;iBAC3B;YACL,CAAC;YA3EM,yBAAO,GAAG,CAAC,CAAC;YACZ,2BAAS,GAAG,CAAC,CAAC,CAAC;YAAQ,wBAAM,GAAG,CAAC,CAAC,CAAC;YAAQ,wBAAM,GAAG,CAAC,CAAC,CAAC;YACvD,mBAAC,GAAG,CAAC,CAAC;YAAQ,mBAAC,GAAG,CAAC,CAAC;YA0E/B,wBAAC;SAAA,AA7ED,CAAuC,aAAa,GA6EnD;QA7EY,sBAAiB,oBA6E7B,CAAA;QAGD;YAAmC,iCAAiB;YAChD,uBAAa,UAAkB;uBAC3B,kBAAM,UAAU,CAAC;YACrB,CAAC;YAED,qCAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YACvD,CAAC;YAED,6BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACpI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAEzB,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,OAAO;gBACzB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;4BAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;4BAC/B,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;4BACxD,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;qBAC/D;oBACD,OAAO;iBACV;gBAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,EAAE;oBACvD,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;oBACpE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;iBACvE;qBAAM;oBAEH,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;oBACxE,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACzC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACzC,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,aAAa,CAAC,OAAO,GAAG,CAAC,EAChE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAEpF,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;oBAC7E,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;iBAChF;gBACD,IAAI,KAAK,IAAI,CAAC,EAAE;oBACZ,IAAI,KAAK,IAAI,QAAQ,CAAC,GAAG,EAAE;wBACvB,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;wBACpC,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;qBACvC;yBAAM;wBACH,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;wBAChB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;qBACnB;iBACJ;qBAAM;oBACH,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;oBACnB,IAAI,SAAS,IAAI,YAAY,CAAC,MAAM,EAAE;wBAClC,QAAQ,KAAK,EAAE;4BACX,KAAK,QAAQ,CAAC,KAAK;gCACf,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;gCACtB,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;gCACtB,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;gCACrE,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;gCACrE,MAAM;4BACV,KAAK,QAAQ,CAAC,KAAK,CAAC;4BACpB,KAAK,QAAQ,CAAC,OAAO;gCACjB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;gCACjB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;gCACjB,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;gCACrE,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;gCACrE,MAAM;4BACV,KAAK,QAAQ,CAAC,GAAG;gCACb,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;gCACjB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;gCACjB,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;gCACnF,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;yBAC1F;qBACJ;yBAAM;wBACH,QAAQ,KAAK,EAAE;4BACX,KAAK,QAAQ,CAAC,KAAK;gCACf,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gCACtD,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gCACtD,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;gCACpC,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;gCACpC,MAAM;4BACV,KAAK,QAAQ,CAAC,KAAK,CAAC;4BACpB,KAAK,QAAQ,CAAC,OAAO;gCACjB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gCACjD,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gCACjD,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;gCACpC,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;gCACpC,MAAM;4BACV,KAAK,QAAQ,CAAC,GAAG;gCACb,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gCACzB,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gCACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;gCACzF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;yBAChG;qBACJ;iBACJ;YACL,CAAC;YACL,oBAAC;QAAD,CAAC,AAlGD,CAAmC,iBAAiB,GAkGnD;QAlGY,kBAAa,gBAkGzB,CAAA;QAGD;YAAmC,iCAAiB;YAChD,uBAAa,UAAkB;uBAC3B,kBAAM,UAAU,CAAC;YACrB,CAAC;YAED,qCAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YACvD,CAAC;YAED,6BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACpI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAEzB,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,OAAO;gBACzB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;4BAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;4BAC/B,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;4BACxD,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;qBAC/D;oBACD,OAAO;iBACV;gBAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjB,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,EAAE;oBACvD,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACjD,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;iBACpD;qBAAM;oBAEH,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;oBACxE,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACzC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACzC,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,aAAa,CAAC,OAAO,GAAG,CAAC,EAChE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAEpF,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACxD,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;iBAC3D;gBACD,QAAQ,KAAK,EAAE;oBACX,KAAK,QAAQ,CAAC,KAAK;wBACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC;wBAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC;wBAC3C,MAAM;oBACV,KAAK,QAAQ,CAAC,KAAK,CAAC;oBACpB,KAAK,QAAQ,CAAC,OAAO;wBACjB,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;wBAC5D,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;wBAC5D,MAAM;oBACV,KAAK,QAAQ,CAAC,GAAG;wBACb,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC;wBACzB,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC;iBAChC;YACL,CAAC;YACL,oBAAC;QAAD,CAAC,AA1DD,CAAmC,iBAAiB,GA0DnD;QA1DY,kBAAa,gBA0DzB,CAAA;QAGD;YAAmC,iCAAa;YAW5C,uBAAa,UAAkB;gBAA/B,YACI,kBAAM,UAAU,CAAC,SAEpB;gBADG,KAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;;YAC1E,CAAC;YAED,qCAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YACvD,CAAC;YAGD,gCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;gBAClF,UAAU,IAAI,aAAa,CAAC,OAAO,CAAC;gBACpC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC9C,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC9C,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC9C,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAClD,CAAC;YAED,6BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACpI,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,OAAO;gBAC9B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BACzC,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;4BAChD,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAC3F,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;qBACxC;oBACD,OAAO;iBACV;gBAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBAC/B,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,EAAE;oBACvD,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;oBACtB,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACrC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACrC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACrC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;iBACxC;qBAAM;oBAEH,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;oBACxE,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACzC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACzC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACzC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;oBACzC,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,aAAa,CAAC,OAAO,GAAG,CAAC,EAChE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAEpF,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACrD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACrD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACrD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;iBACxD;gBACD,IAAI,KAAK,IAAI,CAAC;oBACV,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;qBAC1B;oBACD,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK;wBAAE,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACjE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;iBACzG;YACL,CAAC;YA5EM,qBAAO,GAAG,CAAC,CAAC;YACZ,uBAAS,GAAG,CAAC,CAAC,CAAC;YAAQ,oBAAM,GAAG,CAAC,CAAC,CAAC;YAAQ,oBAAM,GAAG,CAAC,CAAC,CAAC;YAAQ,oBAAM,GAAG,CAAC,CAAC,CAAC;YAAQ,oBAAM,GAAG,CAAC,CAAC,CAAC;YAC/F,eAAC,GAAG,CAAC,CAAC;YAAQ,eAAC,GAAG,CAAC,CAAC;YAAQ,eAAC,GAAG,CAAC,CAAC;YAAQ,eAAC,GAAG,CAAC,CAAC;YA2E3D,oBAAC;SAAA,AA9ED,CAAmC,aAAa,GA8E/C;QA9EY,kBAAa,gBA8EzB,CAAA;QAGD;YAAsC,oCAAa;YAa/C,0BAAa,UAAkB;gBAA/B,YACI,kBAAM,UAAU,CAAC,SAEpB;gBADG,KAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;;YAC7E,CAAC;YAED,wCAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,QAAQ,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1D,CAAC;YAGD,mCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;gBACtH,UAAU,IAAI,gBAAgB,CAAC,OAAO,CAAC;gBACvC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;gBACnD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;gBACnD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;YACvD,CAAC;YAED,gCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACpI,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,OAAO;gBAC9B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BACzC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;4BACjD,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;4BAC7G,KAAK,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAC1G,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;4BACtC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;qBACnH;oBACD,OAAO;iBACV;gBAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;gBACvD,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,gBAAgB,CAAC,OAAO,CAAC,EAAE;oBAC1D,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;oBACtB,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBACxC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBACxC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBACxC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBACxC,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;oBAC1C,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;oBAC1C,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;iBAC7C;qBAAM;oBAEH,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,gBAAgB,CAAC,OAAO,CAAC,CAAC;oBAC3E,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBAC5C,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBAC5C,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBAC5C,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBAC5C,EAAE,GAAG,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;oBAC9C,EAAE,GAAG,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;oBAC9C,EAAE,GAAG,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;oBAC9C,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,gBAAgB,CAAC,OAAO,GAAG,CAAC,EACnE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAEvF,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACxD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACxD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACxD,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;oBACxD,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;oBAC3D,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;oBAC3D,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAgB,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;iBAC9D;gBACD,IAAI,KAAK,IAAI,CAAC,EAAE;oBACZ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC3B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;iBACrC;qBAAM;oBACH,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC9C,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE;wBACzB,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBACpC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAC1C;oBACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;oBACtG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;iBACpF;YACL,CAAC;YAjGM,wBAAO,GAAG,CAAC,CAAC;YACZ,0BAAS,GAAG,CAAC,CAAC,CAAC;YAAQ,uBAAM,GAAG,CAAC,CAAC,CAAC;YAAQ,uBAAM,GAAG,CAAC,CAAC,CAAC;YAAQ,uBAAM,GAAG,CAAC,CAAC,CAAC;YAAQ,uBAAM,GAAG,CAAC,CAAC,CAAC;YAC/F,wBAAO,GAAG,CAAC,CAAC,CAAC;YAAQ,wBAAO,GAAG,CAAC,CAAC,CAAC;YAAQ,wBAAO,GAAG,CAAC,CAAC,CAAC;YACvD,kBAAC,GAAG,CAAC,CAAC;YAAQ,kBAAC,GAAG,CAAC,CAAC;YAAQ,kBAAC,GAAG,CAAC,CAAC;YAAQ,kBAAC,GAAG,CAAC,CAAC;YAAQ,mBAAE,GAAG,CAAC,CAAC;YAAQ,mBAAE,GAAG,CAAC,CAAC;YAAQ,mBAAE,GAAG,CAAC,CAAC;YA+FxG,uBAAC;SAAA,AAnGD,CAAsC,aAAa,GAmGlD;QAnGY,qBAAgB,mBAmG5B,CAAA;QAGD;YAUI,4BAAa,UAAkB;gBAC3B,IAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC9C,IAAI,CAAC,eAAe,GAAG,IAAI,KAAK,CAAS,UAAU,CAAC,CAAC;YACzD,CAAC;YAED,0CAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,UAAU,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YAC5D,CAAC;YAGD,0CAAa,GAAb;gBACI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAC9B,CAAC;YAGD,qCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,cAAsB;gBAC9D,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC;YACtD,CAAC;YAED,kCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,MAAoB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACpI,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,OAAO;gBAC9B,IAAI,SAAS,IAAI,YAAY,CAAC,MAAM,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE;oBAC7D,IAAI,gBAAc,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;oBAC9C,IAAI,CAAC,aAAa,CAAC,gBAAc,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAc,CAAC,CAAC,CAAC;oBAC3G,OAAO;iBACV;gBAED,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE;wBACpD,IAAI,gBAAc,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;wBAC9C,IAAI,CAAC,aAAa,CAAC,gBAAc,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAc,CAAC,CAAC,CAAC;qBAC9G;oBACD,OAAO;iBACV;gBAED,IAAI,UAAU,GAAG,CAAC,CAAC;gBACnB,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;oBACjC,UAAU,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;;oBAE/B,UAAU,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;gBAE7D,IAAI,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;gBACtD,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;qBACzB,aAAa,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;YAC/G,CAAC;YACL,yBAAC;QAAD,CAAC,AA1DD,IA0DC;QA1DY,uBAAkB,qBA0D9B,CAAA;QAED,IAAI,KAAK,GAAuB,IAAI,CAAC;QAGrC;YAAoC,kCAAa;YAa7C,wBAAa,UAAkB;gBAA/B,YACI,kBAAM,UAAU,CAAC,SAIpB;gBAHG,KAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC9C,KAAI,CAAC,aAAa,GAAG,IAAI,KAAK,CAAoB,UAAU,CAAC,CAAC;gBAC9D,IAAI,KAAK,IAAI,IAAI;oBAAE,KAAK,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;;YACvD,CAAC;YAED,sCAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,GAAG,CAAE,IAAI,CAAC,UAAU,CAAC,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;YAC/E,CAAC;YAID,iCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,QAA2B;gBACnE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;YAC9C,CAAC;YAED,8BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACzI,IAAI,IAAI,GAAS,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAChD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,OAAO;gBAC9B,IAAI,cAAc,GAAe,IAAI,CAAC,aAAa,EAAE,CAAC;gBACtD,IAAI,CAAC,CAAC,cAAc,YAAY,KAAA,gBAAgB,CAAC,IAAI,CAAC,CAAoB,cAAe,CAAC,gBAAgB,IAAI,IAAI,CAAC,UAAU,CAAC;oBAAE,OAAO;gBAEvI,IAAI,WAAW,GAAkB,IAAI,CAAC,MAAM,CAAC;gBAC7C,IAAI,WAAW,CAAC,MAAM,IAAI,CAAC;oBAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;gBAEpD,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBACvC,IAAI,WAAW,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;gBAE1C,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,IAAI,gBAAgB,GAAqB,cAAc,CAAC;oBACxD,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;4BACvB,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,IAAI,KAAK,IAAI,CAAC,EAAE;gCACZ,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;gCACvB,MAAM;6BACT;4BACD,IAAI,QAAM,GAAkB,KAAA,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;4BACzE,IAAI,gBAAgB,CAAC,KAAK,IAAI,IAAI,EAAE;gCAEhC,IAAI,aAAa,GAAG,gBAAgB,CAAC,QAAQ,CAAC;gCAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;oCAChC,QAAM,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,QAAM,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;6BAC3D;iCAAM;gCAEH,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC;gCAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;oCAChC,QAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;6BAC1B;qBACR;oBACD,OAAO;iBACV;gBAED,IAAI,MAAM,GAAkB,KAAA,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;gBACzE,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;oBACnC,IAAI,YAAY,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACpD,IAAI,KAAK,IAAI,CAAC,EAAE;wBACZ,IAAI,KAAK,IAAI,QAAQ,CAAC,GAAG,EAAE;4BACvB,IAAI,gBAAgB,GAAG,cAAkC,CAAC;4BAC1D,IAAI,gBAAgB,CAAC,KAAK,IAAI,IAAI,EAAE;gCAEhC,IAAI,aAAa,GAAG,gBAAgB,CAAC,QAAQ,CAAC;gCAC9C,KAAK,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,WAAW,EAAE,GAAC,EAAE,EAAE;oCAClC,MAAM,CAAC,GAAC,CAAC,IAAI,YAAY,CAAC,GAAC,CAAC,GAAG,aAAa,CAAC,GAAC,CAAC,CAAC;iCACnD;6BACJ;iCAAM;gCAEH,KAAK,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,WAAW,EAAE,GAAC,EAAE;oCAChC,MAAM,CAAC,GAAC,CAAC,IAAI,YAAY,CAAC,GAAC,CAAC,CAAC;6BACpC;yBACJ;6BAAM;4BACH,KAAA,KAAK,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;yBAC5D;qBACJ;yBAAM;wBACH,QAAQ,KAAK,EAAE;4BACX,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC;gCACjB,IAAI,kBAAgB,GAAG,cAAkC,CAAC;gCAC1D,IAAI,kBAAgB,CAAC,KAAK,IAAI,IAAI,EAAE;oCAEhC,IAAI,aAAa,GAAG,kBAAgB,CAAC,QAAQ,CAAC;oCAC9C,KAAK,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,WAAW,EAAE,GAAC,EAAE,EAAE;wCAClC,IAAI,KAAK,GAAG,aAAa,CAAC,GAAC,CAAC,CAAC;wCAC7B,MAAM,CAAC,GAAC,CAAC,GAAG,KAAK,GAAG,CAAC,YAAY,CAAC,GAAC,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC;qCACzD;iCACJ;qCAAM;oCAEH,KAAK,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,WAAW,EAAE,GAAC,EAAE;wCAChC,MAAM,CAAC,GAAC,CAAC,GAAG,YAAY,CAAC,GAAC,CAAC,GAAG,KAAK,CAAC;iCAC3C;gCACD,MAAM;6BACT;4BACD,KAAK,QAAQ,CAAC,KAAK,CAAC;4BACpB,KAAK,QAAQ,CAAC,OAAO;gCACjB,KAAK,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,WAAW,EAAE,GAAC,EAAE;oCAChC,MAAM,CAAC,GAAC,CAAC,IAAI,CAAC,YAAY,CAAC,GAAC,CAAC,GAAG,MAAM,CAAC,GAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gCACvD,MAAM;4BACV,KAAK,QAAQ,CAAC,GAAG;gCACb,IAAI,gBAAgB,GAAG,cAAkC,CAAC;gCAC1D,IAAI,gBAAgB,CAAC,KAAK,IAAI,IAAI,EAAE;oCAEhC,IAAI,aAAa,GAAG,gBAAgB,CAAC,QAAQ,CAAC;oCAC9C,KAAK,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,WAAW,EAAE,GAAC,EAAE,EAAE;wCAClC,MAAM,CAAC,GAAC,CAAC,IAAI,CAAC,YAAY,CAAC,GAAC,CAAC,GAAG,aAAa,CAAC,GAAC,CAAC,CAAC,GAAG,KAAK,CAAC;qCAC7D;iCACJ;qCAAM;oCAEH,KAAK,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,WAAW,EAAE,GAAC,EAAE;wCAChC,MAAM,CAAC,GAAC,CAAC,IAAI,YAAY,CAAC,GAAC,CAAC,GAAG,KAAK,CAAC;iCAC5C;yBACR;qBACJ;oBACD,OAAO;iBACV;gBAGD,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACjD,IAAI,YAAY,GAAG,aAAa,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC5C,IAAI,YAAY,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;gBACxC,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;gBAExG,IAAI,KAAK,IAAI,CAAC,EAAE;oBACZ,IAAI,KAAK,IAAI,QAAQ,CAAC,GAAG,EAAE;wBACvB,IAAI,gBAAgB,GAAG,cAAkC,CAAC;wBAC1D,IAAI,gBAAgB,CAAC,KAAK,IAAI,IAAI,EAAE;4BAEhC,IAAI,aAAa,GAAG,gBAAgB,CAAC,QAAQ,CAAC;4BAC9C,KAAK,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,WAAW,EAAE,GAAC,EAAE,EAAE;gCAClC,IAAI,IAAI,GAAG,YAAY,CAAC,GAAC,CAAC,CAAC;gCAC3B,MAAM,CAAC,GAAC,CAAC,IAAI,IAAI,GAAG,CAAC,YAAY,CAAC,GAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,GAAG,aAAa,CAAC,GAAC,CAAC,CAAC;6BAC7E;yBACJ;6BAAM;4BAEH,KAAK,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,WAAW,EAAE,GAAC,EAAE,EAAE;gCAClC,IAAI,IAAI,GAAG,YAAY,CAAC,GAAC,CAAC,CAAC;gCAC3B,MAAM,CAAC,GAAC,CAAC,IAAI,IAAI,GAAG,CAAC,YAAY,CAAC,GAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC;6BAC1D;yBACJ;qBACJ;yBAAM;wBACH,KAAK,IAAI,IAAC,GAAG,CAAC,EAAE,IAAC,GAAG,WAAW,EAAE,IAAC,EAAE,EAAE;4BAClC,IAAI,IAAI,GAAG,YAAY,CAAC,IAAC,CAAC,CAAC;4BAC3B,MAAM,CAAC,IAAC,CAAC,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,IAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC;yBACzD;qBACJ;iBACJ;qBAAM;oBACH,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC;4BACjB,IAAI,kBAAgB,GAAG,cAAkC,CAAC;4BAC1D,IAAI,kBAAgB,CAAC,KAAK,IAAI,IAAI,EAAE;gCAEhC,IAAI,aAAa,GAAG,kBAAgB,CAAC,QAAQ,CAAC;gCAC9C,KAAK,IAAI,IAAC,GAAG,CAAC,EAAE,IAAC,GAAG,WAAW,EAAE,IAAC,EAAE,EAAE;oCAClC,IAAI,IAAI,GAAG,YAAY,CAAC,IAAC,CAAC,EAAE,KAAK,GAAG,aAAa,CAAC,IAAC,CAAC,CAAC;oCACrD,MAAM,CAAC,IAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,IAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC;iCACnF;6BACJ;iCAAM;gCAEH,KAAK,IAAI,IAAC,GAAG,CAAC,EAAE,IAAC,GAAG,WAAW,EAAE,IAAC,EAAE,EAAE;oCAClC,IAAI,IAAI,GAAG,YAAY,CAAC,IAAC,CAAC,CAAC;oCAC3B,MAAM,CAAC,IAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,IAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,KAAK,CAAC;iCACnE;6BACJ;4BACD,MAAM;yBACT;wBACD,KAAK,QAAQ,CAAC,KAAK,CAAC;wBACpB,KAAK,QAAQ,CAAC,OAAO;4BACjB,KAAK,IAAI,IAAC,GAAG,CAAC,EAAE,IAAC,GAAG,WAAW,EAAE,IAAC,EAAE,EAAE;gCAClC,IAAI,IAAI,GAAG,YAAY,CAAC,IAAC,CAAC,CAAC;gCAC3B,MAAM,CAAC,IAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,IAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,GAAG,MAAM,CAAC,IAAC,CAAC,CAAC,GAAG,KAAK,CAAC;6BAChF;4BACD,MAAM;wBACV,KAAK,QAAQ,CAAC,GAAG;4BACb,IAAI,gBAAgB,GAAG,cAAkC,CAAC;4BAC1D,IAAI,gBAAgB,CAAC,KAAK,IAAI,IAAI,EAAE;gCAEhC,IAAI,aAAa,GAAG,gBAAgB,CAAC,QAAQ,CAAC;gCAC9C,KAAK,IAAI,IAAC,GAAG,CAAC,EAAE,IAAC,GAAG,WAAW,EAAE,IAAC,EAAE,EAAE;oCAClC,IAAI,IAAI,GAAG,YAAY,CAAC,IAAC,CAAC,CAAC;oCAC3B,MAAM,CAAC,IAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,IAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,GAAG,aAAa,CAAC,IAAC,CAAC,CAAC,GAAG,KAAK,CAAC;iCACvF;6BACJ;iCAAM;gCAEH,KAAK,IAAI,IAAC,GAAG,CAAC,EAAE,IAAC,GAAG,WAAW,EAAE,IAAC,EAAE,EAAE;oCAClC,IAAI,IAAI,GAAG,YAAY,CAAC,IAAC,CAAC,CAAC;oCAC3B,MAAM,CAAC,IAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,IAAC,CAAC,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,KAAK,CAAC;iCACpE;6BACJ;qBACR;iBACJ;YACL,CAAC;YACL,qBAAC;QAAD,CAAC,AAhND,CAAoC,aAAa,GAgNhD;QAhNY,mBAAc,iBAgN1B,CAAA;QAGD;YAOI,uBAAa,UAAkB;gBAC3B,IAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC9C,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAQ,UAAU,CAAC,CAAC;YAC/C,CAAC;YAED,qCAAa,GAAb;gBACI,OAAO,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC;YACpC,CAAC;YAGD,qCAAa,GAAb;gBACI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAC9B,CAAC;YAGD,gCAAQ,GAAR,UAAU,UAAkB,EAAE,KAAY;gBACtC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;gBACrC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;YACpC,CAAC;YAGD,6BAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACzI,IAAI,WAAW,IAAI,IAAI;oBAAE,OAAO;gBAChC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;gBAEpC,IAAI,QAAQ,GAAG,IAAI,EAAE;oBACjB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;oBACvF,QAAQ,GAAG,CAAC,CAAC,CAAC;iBACjB;qBAAM,IAAI,QAAQ,IAAI,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC;oBACzC,OAAO;gBACX,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;oBAAE,OAAO;gBAE7B,IAAI,KAAK,GAAG,CAAC,CAAC;gBACd,IAAI,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC;oBACpB,KAAK,GAAG,CAAC,CAAC;qBACT;oBACD,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;oBACjD,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,OAAO,KAAK,GAAG,CAAC,EAAE;wBACd,IAAI,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,SAAS;4BAAE,MAAM;wBAC1C,KAAK,EAAE,CAAC;qBACX;iBACJ;gBACD,OAAO,KAAK,GAAG,UAAU,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE;oBACvD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7C,CAAC;YACL,oBAAC;QAAD,CAAC,AAtDD,IAsDC;QAtDY,kBAAa,gBAsDzB,CAAA;QAGD;YAOI,2BAAa,UAAkB;gBAC3B,IAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC9C,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAgB,UAAU,CAAC,CAAC;YAC3D,CAAC;YAED,yCAAa,GAAb;gBACI,OAAO,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC;YACxC,CAAC;YAGD,yCAAa,GAAb;gBACI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAC9B,CAAC;YAKD,oCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,SAAwB;gBAChE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC;YAC5C,CAAC;YAED,iCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACzI,IAAI,SAAS,GAAgB,QAAQ,CAAC,SAAS,CAAC;gBAChD,IAAI,KAAK,GAAgB,QAAQ,CAAC,KAAK,CAAC;gBACxC,IAAI,SAAS,IAAI,YAAY,CAAC,MAAM,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE;oBAC7D,KAAA,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACjF,OAAO;iBACV;gBAED,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK;wBAAE,KAAA,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACzI,OAAO;iBACV;gBAED,IAAI,KAAK,GAAG,CAAC,CAAC;gBACd,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;oBACjC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;;oBAE1B,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBAErD,IAAI,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBACnD,IAAI,qBAAqB,IAAI,IAAI;oBAC7B,KAAA,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;qBACrD;oBACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,qBAAqB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACxD,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtD;YACL,CAAC;YACL,wBAAC;QAAD,CAAC,AAzDD,IAyDC;QAzDY,sBAAiB,oBAyD7B,CAAA;QAID;YAA0C,wCAAa;YAWnD,8BAAa,UAAkB;gBAA/B,YACI,kBAAM,UAAU,CAAC,SAEpB;gBADG,KAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,GAAG,oBAAoB,CAAC,OAAO,CAAC,CAAC;;YACjF,CAAC;YAED,4CAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,YAAY,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC;YACtE,CAAC;YAGD,uCAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,GAAW,EAAE,QAAgB,EAAE,aAAqB,EAAE,QAAiB,EAAE,OAAgB;gBACjI,UAAU,IAAI,oBAAoB,CAAC,OAAO,CAAC;gBAC3C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACzD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,oBAAoB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;gBACnE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,oBAAoB,CAAC,cAAc,CAAC,GAAG,aAAa,CAAC;gBAC9E,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,oBAAoB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3E,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,oBAAoB,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7E,CAAC;YAED,oCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACzI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,UAAU,GAAiB,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAC9E,IAAI,CAAC,UAAU,CAAC,MAAM;oBAAE,OAAO;gBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;4BACrC,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;4BAC/C,UAAU,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC;4BACzD,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;4BAC/C,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;4BAC7C,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,UAAU,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;4BACjE,UAAU,CAAC,QAAQ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;4BAChF,UAAU,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC;4BACzD,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;4BAC/C,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;qBACpD;oBACD,OAAO;iBACV;gBAED,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,OAAO,CAAC,EAAE;oBAC9D,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE;wBACzB,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBAC7H,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ;8BACxC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,aAAa,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;wBACtG,IAAI,SAAS,IAAI,YAAY,CAAC,MAAM,EAAE;4BAClC,UAAU,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC;4BACzD,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;4BAC/C,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;yBAChD;6BAAM;4BACH,UAAU,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAA;4BAC3F,UAAU,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;4BACtF,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;yBACvF;qBACJ;yBAAM;wBACH,UAAU,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBACnG,UAAU,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,aAAa,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;wBAClH,IAAI,SAAS,IAAI,YAAY,CAAC,KAAK,EAAE;4BACjC,UAAU,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;4BAC5F,UAAU,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;4BACtF,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,oBAAoB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;yBACvF;qBACJ;oBACD,OAAO;iBACV;gBAGD,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,oBAAoB,CAAC,OAAO,CAAC,CAAC;gBAC/E,IAAI,GAAG,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;gBACxD,IAAI,QAAQ,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,aAAa,CAAC,CAAC;gBAClE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,oBAAoB,CAAC,OAAO,GAAG,CAAC,EACvE,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;gBAE3F,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE;oBACzB,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;oBACxI,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ;0BACxC,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBAC3H,IAAI,SAAS,IAAI,YAAY,CAAC,MAAM,EAAE;wBAClC,UAAU,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC;wBACzD,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;wBAC/C,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;qBAChD;yBAAM;wBACH,UAAU,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;wBACpF,UAAU,CAAC,QAAQ,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;wBAC9E,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;qBAC/E;iBACJ;qBAAM;oBACH,UAAU,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;oBAC9G,UAAU,CAAC,QAAQ,IAAI,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBACvI,IAAI,SAAS,IAAI,YAAY,CAAC,KAAK,EAAE;wBACjC,UAAU,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;wBACpF,UAAU,CAAC,QAAQ,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;wBAC9E,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC,KAAK,GAAG,oBAAoB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;qBAC/E;iBACJ;YACL,CAAC;YA7GM,4BAAO,GAAG,CAAC,CAAC;YACZ,8BAAS,GAAG,CAAC,CAAC,CAAC;YAAQ,6BAAQ,GAAG,CAAC,CAAC,CAAC;YAAQ,kCAAa,GAAG,CAAC,CAAC,CAAC;YAAQ,wCAAmB,GAAG,CAAC,CAAC,CAAC;YAAQ,kCAAa,GAAG,CAAC,CAAC,CAAC;YAAQ,iCAAY,GAAG,CAAC,CAAC,CAAC;YACtJ,wBAAG,GAAG,CAAC,CAAC;YAAQ,6BAAQ,GAAG,CAAC,CAAC;YAAQ,mCAAc,GAAG,CAAC,CAAC;YAAQ,6BAAQ,GAAG,CAAC,CAAC;YAAQ,4BAAO,GAAG,CAAC,CAAC;YA4G5G,2BAAC;SAAA,AA/GD,CAA0C,aAAa,GA+GtD;QA/GY,yBAAoB,uBA+GhC,CAAA;QAID;YAAiD,+CAAa;YAW1D,qCAAa,UAAkB;gBAA/B,YACI,kBAAM,UAAU,CAAC,SAEpB;gBADG,KAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,GAAG,2BAA2B,CAAC,OAAO,CAAC,CAAC;;YACxF,CAAC;YAED,mDAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,mBAAmB,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,wBAAwB,CAAC;YACpF,CAAC;YAGD,8CAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,SAAiB,EAAE,YAAoB,EAAE,QAAgB,EAAE,QAAgB;gBACnH,UAAU,IAAI,2BAA2B,CAAC,OAAO,CAAC;gBAClD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,2BAA2B,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;gBACzE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,2BAA2B,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC;gBAC/E,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,2BAA2B,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;gBACvE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,2BAA2B,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;YAC3E,CAAC;YAED,2CAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACzI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAEzB,IAAI,UAAU,GAAwB,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;gBACnG,IAAI,CAAC,UAAU,CAAC,MAAM;oBAAE,OAAO;gBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;oBAC3B,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;4BACtC,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;4BAC5C,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;4BACpC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;4BACpC,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,UAAU,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;4BACxE,UAAU,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;4BACjF,UAAU,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;4BACrE,UAAU,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;qBAC5E;oBACD,OAAO;iBACV;gBAED,IAAI,MAAM,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC;gBACpD,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,2BAA2B,CAAC,OAAO,CAAC,EAAE;oBACrE,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;oBACtB,MAAM,GAAG,MAAM,CAAC,CAAC,GAAG,2BAA2B,CAAC,WAAW,CAAC,CAAC;oBAC7D,SAAS,GAAG,MAAM,CAAC,CAAC,GAAG,2BAA2B,CAAC,cAAc,CAAC,CAAC;oBACnE,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,2BAA2B,CAAC,UAAU,CAAC,CAAC;oBAC3D,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,2BAA2B,CAAC,UAAU,CAAC,CAAC;iBAC9D;qBAAM;oBAEH,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,2BAA2B,CAAC,OAAO,CAAC,CAAC;oBACtF,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,WAAW,CAAC,CAAC;oBACjE,SAAS,GAAG,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,cAAc,CAAC,CAAC;oBACvE,KAAK,GAAG,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,UAAU,CAAC,CAAC;oBAC/D,KAAK,GAAG,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,UAAU,CAAC,CAAC;oBAC/D,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,2BAA2B,CAAC,OAAO,GAAG,CAAC,EAC9E,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAElG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC;oBAClF,SAAS,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,OAAO,CAAC;oBAC3F,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC;oBAC/E,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,2BAA2B,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC;iBAClF;gBACD,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE;oBACzB,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;oBAC3B,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;oBAC1E,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;oBACtF,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBACtE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;iBACzE;qBAAM;oBACH,UAAU,CAAC,SAAS,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;oBAChE,UAAU,CAAC,YAAY,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;oBACzE,UAAU,CAAC,QAAQ,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBAC7D,UAAU,CAAC,QAAQ,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;iBAChE;YACL,CAAC;YAvFM,mCAAO,GAAG,CAAC,CAAC;YACZ,qCAAS,GAAG,CAAC,CAAC,CAAC;YAAQ,uCAAW,GAAG,CAAC,CAAC,CAAC;YAAQ,0CAAc,GAAG,CAAC,CAAC,CAAC;YAAQ,sCAAU,GAAG,CAAC,CAAC,CAAC;YAAQ,sCAAU,GAAG,CAAC,CAAC,CAAC;YACpH,kCAAM,GAAG,CAAC,CAAC;YAAQ,qCAAS,GAAG,CAAC,CAAC;YAAQ,iCAAK,GAAG,CAAC,CAAC;YAAQ,iCAAK,GAAG,CAAC,CAAC;YAsFhF,kCAAC;SAAA,AAzFD,CAAiD,aAAa,GAyF7D;QAzFY,gCAA2B,8BAyFvC,CAAA;QAGD;YAAoD,kDAAa;YAW7D,wCAAa,UAAkB;gBAA/B,YACI,kBAAM,UAAU,CAAC,SAEpB;gBADG,KAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,GAAG,8BAA8B,CAAC,OAAO,CAAC,CAAC;;YAC3F,CAAC;YAED,sDAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,sBAAsB,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAClF,CAAC;YAGD,iDAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,KAAa;gBACrD,UAAU,IAAI,8BAA8B,CAAC,OAAO,CAAC;gBACrD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,8BAA8B,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;YAC3E,CAAC;YAED,8CAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACzI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,UAAU,GAAmB,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACpF,IAAI,CAAC,UAAU,CAAC,MAAM;oBAAE,OAAO;gBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;4BAC/C,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,UAAU,CAAC,QAAQ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;qBACvF;oBACD,OAAO;iBACV;gBAED,IAAI,QAAQ,GAAG,CAAC,CAAC;gBACjB,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,8BAA8B,CAAC,OAAO,CAAC;oBACtE,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,8BAA8B,CAAC,UAAU,CAAC,CAAC;qBAC5E;oBAED,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,8BAA8B,CAAC,OAAO,CAAC,CAAC;oBACzF,QAAQ,GAAG,MAAM,CAAC,KAAK,GAAG,8BAA8B,CAAC,UAAU,CAAC,CAAC;oBACrE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,8BAA8B,CAAC,OAAO,GAAG,CAAC,EACjF,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,8BAA8B,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAErG,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,8BAA8B,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,GAAG,OAAO,CAAC;iBAC3F;gBACD,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK;oBACvB,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;;oBAE/F,UAAU,CAAC,QAAQ,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;YACxE,CAAC;YA1DM,sCAAO,GAAG,CAAC,CAAC;YACZ,wCAAS,GAAG,CAAC,CAAC,CAAC;YAAQ,yCAAU,GAAG,CAAC,CAAC,CAAC;YACvC,oCAAK,GAAG,CAAC,CAAC;YAyDrB,qCAAC;SAAA,AA5DD,CAAoD,aAAa,GA4DhE;QA5DY,mCAA8B,iCA4D1C,CAAA;QAGD;YAAmD,iDAA8B;YAC7E,uCAAa,UAAkB;uBAC3B,kBAAM,UAAU,CAAC;YACrB,CAAC;YAED,qDAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,qBAAqB,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACjF,CAAC;YAED,6CAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACzI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,UAAU,GAAmB,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACpF,IAAI,CAAC,UAAU,CAAC,MAAM;oBAAE,OAAO;gBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;4BAC7C,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,UAAU,CAAC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;qBACpF;oBACD,OAAO;iBACV;gBAED,IAAI,OAAO,GAAG,CAAC,CAAC;gBAChB,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,6BAA6B,CAAC,OAAO,CAAC;oBACrE,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,6BAA6B,CAAC,UAAU,CAAC,CAAC;qBAC1E;oBAED,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,6BAA6B,CAAC,OAAO,CAAC,CAAC;oBACxF,OAAO,GAAG,MAAM,CAAC,KAAK,GAAG,6BAA6B,CAAC,UAAU,CAAC,CAAC;oBACnE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,6BAA6B,CAAC,OAAO,GAAG,CAAC,EAChF,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,6BAA6B,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAEpG,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,6BAA6B,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC;iBACxF;gBAED,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK;oBACvB,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;;oBAE3F,UAAU,CAAC,OAAO,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;YACrE,CAAC;YACL,oCAAC;QAAD,CAAC,AA3CD,CAAmD,8BAA8B,GA2ChF;QA3CY,kCAA6B,gCA2CzC,CAAA;QAID;YAA+C,6CAAa;YAWxD,mCAAa,UAAkB;gBAA/B,YACI,kBAAM,UAAU,CAAC,SAEpB;gBADG,KAAI,CAAC,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,GAAG,yBAAyB,CAAC,OAAO,CAAC,CAAC;;YACtF,CAAC;YAED,iDAAa,GAAb;gBACI,OAAO,CAAC,YAAY,CAAC,iBAAiB,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC7E,CAAC;YAGD,4CAAQ,GAAR,UAAU,UAAkB,EAAE,IAAY,EAAE,SAAiB,EAAE,YAAoB;gBAC/E,UAAU,IAAI,yBAAyB,CAAC,OAAO,CAAC;gBAChD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,yBAAyB,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;gBACvE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,yBAAyB,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC;YACjF,CAAC;YAED,yCAAK,GAAL,UAAO,QAAkB,EAAE,QAAgB,EAAE,IAAY,EAAE,WAAyB,EAAE,KAAa,EAAE,KAAe,EAAE,SAAuB;gBACzI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,UAAU,GAAmB,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACpF,IAAI,CAAC,UAAU,CAAC,MAAM;oBAAE,OAAO;gBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;4BACjD,UAAU,CAAC,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC;4BACvD,OAAO;wBACX,KAAK,QAAQ,CAAC,KAAK;4BACf,UAAU,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;4BACnF,UAAU,CAAC,YAAY,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;qBACnG;oBACD,OAAO;iBACV;gBAED,IAAI,MAAM,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,CAAC;gBAC9B,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,yBAAyB,CAAC,OAAO,CAAC,EAAE;oBACnE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,yBAAyB,CAAC,WAAW,CAAC,CAAC;oBACvE,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,yBAAyB,CAAC,cAAc,CAAC,CAAC;iBAChF;qBAAM;oBAEH,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,yBAAyB,CAAC,OAAO,CAAC,CAAC;oBACpF,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,WAAW,CAAC,CAAC;oBAC/D,SAAS,GAAG,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,cAAc,CAAC,CAAC;oBACrE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,yBAAyB,CAAC,OAAO,GAAG,CAAC,EAC5E,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;oBAEhG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC;oBAChF,SAAS,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,OAAO,CAAC;iBAC5F;gBAED,IAAI,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE;oBACzB,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;oBAChG,UAAU,CAAC,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;iBAC/G;qBAAM;oBACH,UAAU,CAAC,SAAS,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;oBAChE,UAAU,CAAC,YAAY,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;iBAC5E;YACL,CAAC;YApEM,iCAAO,GAAG,CAAC,CAAC;YACZ,mCAAS,GAAG,CAAC,CAAC,CAAC;YAAQ,qCAAW,GAAG,CAAC,CAAC,CAAC;YAAQ,wCAAc,GAAG,CAAC,CAAC,CAAC;YACpE,gCAAM,GAAG,CAAC,CAAC;YAAQ,mCAAS,GAAG,CAAC,CAAC;YAmE5C,gCAAC;SAAA,AAtED,CAA+C,aAAa,GAsE3D;QAtEY,8BAAyB,4BAsErC,CAAA;IACL,CAAC,EAr/CoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAq/CxB;AAAD,CAAC,EAr/CS,UAAU,KAAV,UAAU,QAq/CnB;ACp/CD,IAAU,UAAU,CA2sCnB;AA3sCD,WAAU,UAAU;IAAC,IAAA,IAAI,CA2sCxB;IA3sCoB,WAAA,IAAI;QAKrB;YA4DI,wBAAa,IAAwB;gBAhBrC,WAAM,GAAG,IAAI,KAAK,EAAc,CAAC;gBAMjC,cAAS,GAAG,CAAC,CAAC;gBAEd,WAAM,GAAG,IAAI,KAAK,EAAS,CAAC;gBAC5B,cAAS,GAAG,IAAI,KAAK,EAA0B,CAAC;gBAChD,UAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC7B,gBAAW,GAAG,IAAI,KAAA,MAAM,EAAE,CAAC;gBAC3B,sBAAiB,GAAG,KAAK,CAAC;gBAE1B,mBAAc,GAAG,IAAI,KAAA,IAAI,CAAa,cAAM,OAAA,IAAI,UAAU,EAAE,EAAhB,CAAgB,CAAC,CAAC;gBAG1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC;YAGD,+BAAM,GAAN,UAAQ,KAAa;gBACjB,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC;gBACxB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC3C,IAAI,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAI,OAAO,IAAI,IAAI;wBAAE,SAAS;oBAE9B,OAAO,CAAC,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC;oBAClD,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;oBAE1C,IAAI,YAAY,GAAG,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC;oBAE7C,IAAI,OAAO,CAAC,KAAK,GAAG,CAAC,EAAE;wBACnB,OAAO,CAAC,KAAK,IAAI,YAAY,CAAC;wBAC9B,IAAI,OAAO,CAAC,KAAK,GAAG,CAAC;4BAAE,SAAS;wBAChC,YAAY,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC;wBAC9B,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;qBACrB;oBAED,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;oBACxB,IAAI,IAAI,IAAI,IAAI,EAAE;wBAEd,IAAI,QAAQ,GAAG,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;wBAC9C,IAAI,QAAQ,IAAI,CAAC,EAAE;4BACf,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;4BACf,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;4BACvG,OAAO,CAAC,SAAS,IAAI,YAAY,CAAC;4BAClC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;4BAC/B,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;gCAC5B,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;gCACtB,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;6BAC1B;4BACD,SAAS;yBACZ;qBACJ;yBAAM,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI,EAAE;wBAC5E,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;wBACjB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;wBACxB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;wBAC1B,SAAS;qBACZ;oBACD,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;wBAErE,IAAI,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC;wBAC9B,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;wBAC1B,IAAI,IAAI,IAAI,IAAI;4BAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;wBACvC,OAAO,IAAI,IAAI,IAAI,EAAE;4BACjB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;4BACrB,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;yBAC1B;qBACJ;oBAED,OAAO,CAAC,SAAS,IAAI,YAAY,CAAC;iBACrC;gBAED,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACvB,CAAC;YAGD,yCAAgB,GAAhB,UAAkB,EAAc,EAAE,KAAa;gBAC3C,IAAI,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC;gBACzB,IAAI,IAAI,IAAI,IAAI;oBAAE,OAAO,IAAI,CAAC;gBAE9B,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAElD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC;gBAC5C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;gBAGpC,IAAI,EAAE,CAAC,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC,WAAW,EAAE;oBAEhD,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,IAAI,CAAC,EAAE;wBAC7C,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;wBAChC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI;4BAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,EAAE,CAAC;wBAC3D,EAAE,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;wBACxC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;qBACxB;oBACD,OAAO,QAAQ,CAAC;iBACnB;gBAED,IAAI,CAAC,SAAS,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;gBACzC,EAAE,CAAC,OAAO,IAAI,KAAK,CAAC;gBACpB,OAAO,KAAK,CAAC;YACjB,CAAC;YAKD,8BAAK,GAAL,UAAO,QAAkB;gBACrB,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,IAAI,CAAC,iBAAiB;oBAAE,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAEtD,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,OAAO,GAAG,KAAK,CAAC;gBAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC3C,IAAI,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,GAAG,CAAC;wBAAE,SAAS;oBACnD,OAAO,GAAG,IAAI,CAAC;oBACf,IAAI,KAAK,GAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAA,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAGjE,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC;oBACxB,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI;wBAC1B,GAAG,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;yBACrD,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI;wBAClE,GAAG,GAAG,CAAC,CAAC;oBAGZ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,EAAE,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;oBACtF,IAAI,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC;oBACvD,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC;oBAC5C,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,KAAA,QAAQ,CAAC,GAAG,EAAE;wBAC/C,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,aAAa,EAAE,EAAE,EAAE,EAAE;4BAIvC,KAAA,KAAK,CAAC,qBAAqB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;4BACxC,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAA,YAAY,CAAC,KAAK,CAAC,CAAC;yBACvG;qBACJ;yBAAM;wBACH,IAAI,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;wBAExC,IAAI,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,CAAC;wBACvD,IAAI,UAAU;4BAAE,KAAA,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,aAAa,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;wBACxF,IAAI,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAC;wBAElD,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,aAAa,EAAE,EAAE,EAAE,EAAE;4BACvC,IAAI,QAAQ,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;4BAC7B,IAAI,aAAa,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAA,QAAQ,CAAC,KAAK,CAAC;4BAC7H,IAAI,QAAQ,YAAY,KAAA,cAAc,EAAE;gCACpC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,EAAE,aAAa,EAAE,iBAAiB,EAAE,EAAE,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;6BAC3H;iCAAM;gCAEH,KAAA,KAAK,CAAC,qBAAqB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;gCACxC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,EAAE,GAAG,EAAE,aAAa,EAAE,KAAA,YAAY,CAAC,KAAK,CAAC,CAAC;6BAC1G;yBACJ;qBACJ;oBACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;oBACzC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;oBAClB,OAAO,CAAC,iBAAiB,GAAG,aAAa,CAAC;oBAC1C,OAAO,CAAC,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC;iBAC7C;gBAED,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACnB,OAAO,OAAO,CAAC;YACnB,CAAC;YAED,wCAAe,GAAf,UAAiB,EAAc,EAAE,QAAkB,EAAE,KAAe;gBAChE,IAAI,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC;gBACzB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI;oBAAE,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;gBAEzE,IAAI,GAAG,GAAG,CAAC,CAAC;gBACZ,IAAI,EAAE,CAAC,WAAW,IAAI,CAAC,EAAE;oBACrB,GAAG,GAAG,CAAC,CAAC;oBACR,IAAI,KAAK,IAAI,KAAA,QAAQ,CAAC,KAAK;wBAAE,KAAK,GAAG,KAAA,QAAQ,CAAC,KAAK,CAAC;iBACvD;qBAAM;oBACH,GAAG,GAAG,EAAE,CAAC,OAAO,GAAG,EAAE,CAAC,WAAW,CAAC;oBAClC,IAAI,GAAG,GAAG,CAAC;wBAAE,GAAG,GAAG,CAAC,CAAC;oBACrB,IAAI,KAAK,IAAI,KAAA,QAAQ,CAAC,KAAK;wBAAE,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;iBACtD;gBAED,IAAI,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC5D,IAAI,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,mBAAmB,EAAE,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC;gBAC5F,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,EAAE,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAChF,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC;gBACpD,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;gBACzC,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,cAAc,EAAE,QAAQ,GAAG,SAAS,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;gBACjF,IAAI,KAAK,IAAI,KAAA,QAAQ,CAAC,GAAG,EAAE;oBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE;wBAClC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAA,YAAY,CAAC,MAAM,CAAC,CAAC;iBAChH;qBAAM;oBACH,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBACrC,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;oBAE3C,IAAI,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,CAAC;oBACpD,IAAI,UAAU;wBAAE,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,aAAa,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;oBACrF,IAAI,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;oBAE/C,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;oBACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;wBACpC,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;wBAC5B,IAAI,SAAS,GAAG,KAAA,YAAY,CAAC,MAAM,CAAC;wBACpC,IAAI,aAAa,SAAU,CAAC;wBAC5B,IAAI,KAAK,GAAG,CAAC,CAAC;wBACd,QAAQ,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE;4BACrD,KAAK,cAAc,CAAC,UAAU;gCAC1B,aAAa,GAAG,KAAK,CAAC;gCACtB,IAAI,CAAC,WAAW,IAAI,QAAQ,YAAY,KAAA,kBAAkB,EAAE;oCACxD,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAI,cAAc,CAAC,QAAQ;wCAAE,SAAS;oCACrF,aAAa,GAAG,KAAA,QAAQ,CAAC,KAAK,CAAC;iCAClC;gCACD,IAAI,CAAC,SAAS,IAAI,QAAQ,YAAY,KAAA,iBAAiB;oCAAE,SAAS;gCAClE,KAAK,GAAG,QAAQ,CAAC;gCACjB,MAAM;4BACV,KAAK,cAAc,CAAC,KAAK;gCACrB,aAAa,GAAG,KAAA,QAAQ,CAAC,KAAK,CAAC;gCAC/B,KAAK,GAAG,QAAQ,CAAC;gCACjB,MAAM;4BACV,KAAK,cAAc,CAAC,IAAI;gCACpB,aAAa,GAAG,KAAA,QAAQ,CAAC,KAAK,CAAC;gCAC/B,KAAK,GAAG,SAAS,CAAC;gCAClB,MAAM;4BACV;gCACI,aAAa,GAAG,KAAA,QAAQ,CAAC,KAAK,CAAC;gCAC/B,IAAI,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;gCACjC,KAAK,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;gCAC3E,MAAM;yBACb;wBACD,IAAI,CAAC,UAAU,IAAI,KAAK,CAAC;wBACzB,IAAI,QAAQ,YAAY,KAAA,cAAc;4BAClC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,KAAK,EAAE,aAAa,EAAE,iBAAiB,EAAE,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;6BACxH;4BAED,KAAA,KAAK,CAAC,qBAAqB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;4BAC1C,IAAI,aAAa,IAAI,KAAA,QAAQ,CAAC,KAAK,EAAE;gCACjC,IAAI,QAAQ,YAAY,KAAA,kBAAkB,EAAE;oCACxC,IAAI,WAAW,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAI,cAAc,CAAC,QAAQ;wCAAE,SAAS,GAAG,KAAA,YAAY,CAAC,KAAK,CAAC;iCAC7H;qCAAM,IAAI,QAAQ,YAAY,KAAA,iBAAiB,EAAE;oCAC9C,IAAI,SAAS;wCAAE,SAAS,GAAG,KAAA,YAAY,CAAC,KAAK,CAAC;iCACjD;6BACJ;4BACD,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;yBACnG;qBACJ;iBACJ;gBAED,IAAI,EAAE,CAAC,WAAW,GAAG,CAAC;oBAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;gBAC9D,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC;gBACvC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;gBAEpC,OAAO,GAAG,CAAC;YACf,CAAC;YAED,4CAAmB,GAAnB,UAAqB,QAAkB,EAAE,QAAkB,EAAE,IAAY,EAAE,KAAa,EAAE,KAAe,EACpF,iBAAgC,EAAE,CAAS,EAAE,UAAmB;gBAEjF,IAAI,UAAU;oBAAE,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAEzC,IAAI,KAAK,IAAI,CAAC,EAAE;oBACZ,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,KAAA,YAAY,CAAC,KAAK,CAAC,CAAC;oBACtE,OAAO;iBACV;gBAED,IAAI,cAAc,GAAG,QAA0B,CAAC;gBAChD,IAAI,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;gBACnC,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBACpD,IAAI,CAAC,IAAI,CAAC,MAAM;oBAAE,OAAO;gBACzB,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;gBACnB,IAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE;oBAClB,QAAQ,KAAK,EAAE;wBACX,KAAK,KAAA,QAAQ,CAAC,KAAK;4BACf,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;wBACvC;4BACI,OAAO;wBACX,KAAK,KAAA,QAAQ,CAAC,KAAK;4BACf,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;4BACnB,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;qBAC/B;iBACJ;qBAAM;oBACH,EAAE,GAAG,KAAK,IAAI,KAAA,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;oBAClE,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,KAAA,cAAc,CAAC,OAAO,CAAC;wBACtD,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,KAAA,cAAc,CAAC,aAAa,CAAC,CAAC;yBAC9E;wBAED,IAAI,KAAK,GAAG,KAAA,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,KAAA,cAAc,CAAC,OAAO,CAAC,CAAC;wBACzE,IAAI,YAAY,GAAG,MAAM,CAAC,KAAK,GAAG,KAAA,cAAc,CAAC,aAAa,CAAC,CAAC;wBAChE,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC9B,IAAI,OAAO,GAAG,cAAc,CAAC,eAAe,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,EACzD,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,KAAA,cAAc,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;wBAErF,EAAE,GAAG,MAAM,CAAC,KAAK,GAAG,KAAA,cAAc,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;wBAC5D,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;wBAC5D,EAAE,GAAG,YAAY,GAAG,EAAE,GAAG,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;wBACtD,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;qBAC/D;iBACJ;gBAGD,IAAI,KAAK,GAAG,CAAC,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;gBAC9B,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;gBAChE,IAAI,IAAI,IAAI,CAAC,EAAE;oBACX,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;iBAChC;qBAAM;oBACH,IAAI,SAAS,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC;oBAChC,IAAI,UAAU,EAAE;wBACZ,SAAS,GAAG,CAAC,CAAC;wBACd,QAAQ,GAAG,IAAI,CAAC;qBACnB;yBAAM;wBACH,SAAS,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;wBACjC,QAAQ,GAAG,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;qBACvC;oBACD,IAAI,OAAO,GAAG,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,IAAI,CAAC,CAAC;oBAE7C,IAAI,KAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;wBAElF,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG;4BAAE,SAAS,IAAI,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;wBAC9E,GAAG,GAAG,OAAO,CAAC;qBACjB;oBACD,KAAK,GAAG,IAAI,GAAG,SAAS,GAAG,SAAS,GAAG,GAAG,CAAC;oBAC3C,IAAI,GAAG,IAAI,OAAO;wBAAE,KAAK,IAAI,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC/D,iBAAiB,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;iBAChC;gBACD,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;gBAChC,EAAE,IAAI,KAAK,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,QAAQ,GAAG,EAAE,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;YAC/E,CAAC;YAED,oCAAW,GAAX,UAAa,KAAiB,EAAE,aAAqB;gBACjD,IAAI,cAAc,GAAG,KAAK,CAAC,cAAc,EAAE,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;gBAC7E,IAAI,QAAQ,GAAG,YAAY,GAAG,cAAc,CAAC;gBAC7C,IAAI,gBAAgB,GAAG,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;gBAGlD,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;gBAC7B,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACf,IAAI,OAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtB,IAAI,OAAK,CAAC,IAAI,GAAG,gBAAgB;wBAAE,MAAM;oBACzC,IAAI,OAAK,CAAC,IAAI,GAAG,YAAY;wBAAE,SAAS;oBACxC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,OAAK,CAAC,CAAC;iBAClC;gBAGD,IAAI,QAAQ,GAAG,KAAK,CAAC;gBACrB,IAAI,KAAK,CAAC,IAAI;oBACV,QAAQ,GAAG,QAAQ,IAAI,CAAC,IAAI,gBAAgB,GAAG,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;;oBAE1E,QAAQ,GAAG,aAAa,IAAI,YAAY,IAAI,KAAK,CAAC,aAAa,GAAG,YAAY,CAAC;gBACnF,IAAI,QAAQ;oBAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAGzC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACf,IAAI,OAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtB,IAAI,OAAK,CAAC,IAAI,GAAG,cAAc;wBAAE,SAAS;oBAC1C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtC;YACL,CAAC;YAMD,oCAAW,GAAX;gBACI,IAAI,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;gBAChD,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC;gBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBAC9C,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,gBAAgB,CAAC;gBAC5C,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACvB,CAAC;YAMD,mCAAU,GAAV,UAAY,UAAkB;gBAC1B,IAAI,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM;oBAAE,OAAO;gBAC7C,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBACtC,IAAI,OAAO,IAAI,IAAI;oBAAE,OAAO;gBAE5B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBAExB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBAE1B,IAAI,KAAK,GAAG,OAAO,CAAC;gBACpB,OAAO,IAAI,EAAE;oBACT,IAAI,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC;oBAC5B,IAAI,IAAI,IAAI,IAAI;wBAAE,MAAM;oBACxB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACrB,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;oBACxB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACtB,KAAK,GAAG,IAAI,CAAC;iBAChB;gBAED,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAEvC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACvB,CAAC;YAED,mCAAU,GAAV,UAAY,KAAa,EAAE,OAAmB,EAAE,SAAkB;gBAC9D,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBACrC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;gBAE7B,IAAI,IAAI,IAAI,IAAI,EAAE;oBACd,IAAI,SAAS;wBAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAC1C,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;oBAC1B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;oBACxB,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC;oBAGpB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC;wBAC/C,OAAO,CAAC,cAAc,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;oBAE3E,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;iBACrC;gBAED,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9B,CAAC;YAKD,qCAAY,GAAZ,UAAc,UAAkB,EAAE,aAAqB,EAAE,IAAa;gBAClE,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;gBACpE,IAAI,SAAS,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,aAAa,CAAC,CAAC;gBAChF,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;YAC9D,CAAC;YAQD,yCAAgB,GAAhB,UAAkB,UAAkB,EAAE,SAAoB,EAAE,IAAa;gBACrE,IAAI,SAAS,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;gBACpE,IAAI,SAAS,GAAG,IAAI,CAAC;gBACrB,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC7C,IAAI,OAAO,IAAI,IAAI,EAAE;oBACjB,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,EAAE;wBAE7B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC;wBAC7C,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;wBAC9B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;wBACxB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;wBAC1B,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC;wBAC7B,SAAS,GAAG,KAAK,CAAC;qBACrB;;wBACG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;iBACjC;gBACD,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;gBAClE,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;gBAC9C,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACnB,OAAO,KAAK,CAAC;YACjB,CAAC;YAKD,qCAAY,GAAZ,UAAc,UAAkB,EAAE,aAAqB,EAAE,IAAa,EAAE,KAAa;gBACjF,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;gBACpE,IAAI,SAAS,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,aAAa,CAAC,CAAC;gBAChF,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YACrE,CAAC;YAUD,yCAAgB,GAAhB,UAAkB,UAAkB,EAAE,SAAoB,EAAE,IAAa,EAAE,KAAa;gBACpF,IAAI,SAAS,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;gBAEpE,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC1C,IAAI,IAAI,IAAI,IAAI,EAAE;oBACd,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI;wBACpB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;iBACxB;gBAED,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBAE/D,IAAI,IAAI,IAAI,IAAI,EAAE;oBACd,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;oBACzC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;iBACtB;qBAAM;oBACH,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;oBAClB,IAAI,KAAK,IAAI,CAAC,EAAE;wBACZ,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC;wBACvD,IAAI,QAAQ,IAAI,CAAC,EAAE;4BACf,IAAI,IAAI,CAAC,IAAI;gCACT,KAAK,IAAI,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;gCAE5D,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;4BAChD,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;yBACxD;;4BACG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;qBAC9B;iBACJ;gBAED,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;gBACpB,OAAO,KAAK,CAAC;YACjB,CAAC;YAgBD,0CAAiB,GAAjB,UAAmB,UAAkB,EAAE,WAAmB;gBACtD,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,cAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;gBACpF,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;gBAChC,KAAK,CAAC,QAAQ,GAAG,WAAW,CAAC;gBAC7B,OAAO,KAAK,CAAC;YACjB,CAAC;YAaD,0CAAiB,GAAjB,UAAmB,UAAkB,EAAE,WAAmB,EAAE,KAAa;gBACrE,IAAI,KAAK,IAAI,CAAC;oBAAE,KAAK,IAAI,WAAW,CAAC;gBACrC,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;gBAC3F,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;gBAChC,KAAK,CAAC,QAAQ,GAAG,WAAW,CAAC;gBAC7B,OAAO,KAAK,CAAC;YACjB,CAAC;YAID,2CAAkB,GAAlB,UAAoB,WAAmB;gBACnC,IAAI,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;gBAChD,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC;gBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAChD,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,OAAO,IAAI,IAAI;wBAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;iBAChF;gBACD,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,gBAAgB,CAAC;gBAC5C,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACvB,CAAC;YAED,sCAAa,GAAb,UAAe,KAAa;gBACxB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM;oBAAE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC1D,KAAA,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;gBACxD,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;gBAC/B,OAAO,IAAI,CAAC;YAChB,CAAC;YAGD,mCAAU,GAAV,UAAY,UAAkB,EAAE,SAAoB,EAAE,IAAa,EAAE,IAAgB;gBACjF,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;gBACzC,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC;gBAC9B,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC5B,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;gBAClB,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC;gBAE3B,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC;gBACzB,KAAK,CAAC,mBAAmB,GAAG,CAAC,CAAC;gBAC9B,KAAK,CAAC,kBAAkB,GAAG,CAAC,CAAC;gBAE7B,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC;gBACzB,KAAK,CAAC,YAAY,GAAG,SAAS,CAAC,QAAQ,CAAC;gBACxC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;gBACzB,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC;gBAE7B,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;gBAChB,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;gBACpB,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;gBACrB,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;gBACzB,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;gBAClC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;gBAEpB,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;gBAChB,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC;gBACzB,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC;gBAClB,KAAK,CAAC,WAAW,GAAG,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;gBACnF,KAAK,CAAC,QAAQ,GAAG,KAAA,QAAQ,CAAC,OAAO,CAAC;gBAClC,OAAO,KAAK,CAAC;YACjB,CAAC;YAED,oCAAW,GAAX,UAAa,KAAiB;gBAC1B,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;gBACtB,OAAO,IAAI,IAAI,IAAI,EAAE;oBACjB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACzB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;iBACpB;gBACD,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;YACtB,CAAC;YAED,2CAAkB,GAAlB;gBACI,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAE/B,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;gBAEzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAChD,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC3B,IAAI,KAAK,IAAI,IAAI;wBAAE,SAAS;oBAC5B,OAAO,KAAK,CAAC,UAAU,IAAI,IAAI;wBAC3B,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC;oBAE7B,GAAG;wBACC,IAAI,KAAK,CAAC,UAAU,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAA,QAAQ,CAAC,GAAG;4BAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;wBACxF,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC;qBAC1B,QAAQ,KAAK,IAAI,IAAI,EAAC;iBAC1B;gBAED,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;gBACzB,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC9C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAC3B,OAAO,KAAK,IAAI,IAAI,EAAE;wBAClB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;wBAC3B,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC;qBAC5B;iBACJ;YACL,CAAC;YAED,oCAAW,GAAX,UAAa,KAAiB;gBAC1B,IAAI,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC;gBACxB,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC;gBAC1C,IAAI,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC;gBACtD,IAAI,YAAY,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;gBAC1E,KAAK,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;gBACjC,IAAI,cAAc,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;gBAC/E,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;gBAEnC,IAAI,EAAE,IAAI,IAAI,IAAI,EAAE,CAAC,YAAY,EAAE;oBAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;wBACrC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;wBAC9C,YAAY,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC;qBACzC;oBACD,OAAO;iBACV;gBAED,KAAK,EACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;oBACrC,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;oBAC5B,IAAI,EAAE,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;oBAClC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC;wBACpB,YAAY,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,UAAU,CAAC;yBAC3C,IAAI,EAAE,IAAI,IAAI,IAAI,QAAQ,YAAY,KAAA,kBAAkB,IAAI,QAAQ,YAAY,KAAA,iBAAiB;2BAC/F,QAAQ,YAAY,KAAA,aAAa,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE;wBACvE,YAAY,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,KAAK,CAAC;qBAC1C;yBAAM;wBACH,KAAK,IAAI,IAAI,GAAG,EAAE,CAAC,QAAQ,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE;4BAC7D,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC;gCAAE,SAAS;4BAC7C,IAAI,KAAK,CAAC,WAAW,GAAG,CAAC,EAAE;gCACvB,YAAY,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC;gCAC1C,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;gCACzB,SAAS,KAAK,CAAC;6BAClB;4BACD,MAAM;yBACT;wBACD,YAAY,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC;qBACzC;iBACJ;YACT,CAAC;YAED,uCAAc,GAAd,UAAgB,KAAiB;gBAC7B,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC;gBAC1C,IAAI,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC;gBACtD,IAAI,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;gBACtC,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;gBAEnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;oBACrC,IAAI,SAAS,CAAC,CAAC,CAAC,YAAY,KAAA,kBAAkB,EAAE;wBAC5C,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAuB,CAAC;wBAClD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC;4BAAE,YAAY,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,QAAQ,CAAC;qBACxF;iBACJ;YACL,CAAC;YAGD,mCAAU,GAAV,UAAY,UAAkB;gBAC1B,IAAI,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM;oBAAE,OAAO,IAAI,CAAC;gBAClD,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACnC,CAAC;YAGD,oCAAW,GAAX,UAAa,QAAgC;gBACzC,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC;YAGD,uCAAc,GAAd,UAAgB,QAAgC;gBAC5C,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC7C,IAAI,KAAK,IAAI,CAAC;oBAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACpD,CAAC;YAGD,uCAAc,GAAd;gBACI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;YAC9B,CAAC;YAKD,mDAA0B,GAA1B;gBACI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACvB,CAAC;YAUD,2CAAkB,GAAlB,UAAmB,UAAkB,EAAE,aAAqB,EAAE,IAAa;gBACvE,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE;oBACpC,cAAc,CAAC,kBAAkB,GAAG,IAAI,CAAC;oBACzC,OAAO,CAAC,IAAI,CAAC,kHAAkH,CAAC,CAAC;iBACpI;gBACD,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;YACvD,CAAC;YAID,2CAAkB,GAAlB,UAAmB,UAAkB,EAAE,aAAqB,EAAE,IAAa,EAAE,KAAa;gBACtF,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE;oBACpC,cAAc,CAAC,kBAAkB,GAAG,IAAI,CAAC;oBACzC,OAAO,CAAC,IAAI,CAAC,kHAAkH,CAAC,CAAC;iBACpI;gBACD,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC9D,CAAC;YAID,qCAAY,GAAZ,UAAa,aAAqB;gBAC9B,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;gBACpE,OAAO,SAAS,KAAK,IAAI,CAAC;YAC9B,CAAC;YAED,2CAAkB,GAAlB,UAAmB,aAAqB;gBACpC,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE;oBACpC,cAAc,CAAC,kBAAkB,GAAG,IAAI,CAAC;oBACzC,OAAO,CAAC,IAAI,CAAC,kHAAkH,CAAC,CAAC;iBACpI;gBACD,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAC5C,CAAC;YAtyBM,6BAAc,GAAG,IAAI,KAAA,SAAS,CAAC,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAKjD,yBAAU,GAAG,CAAC,CAAC;YAKf,oBAAK,GAAG,CAAC,CAAC;YAOV,mBAAI,GAAG,CAAC,CAAC;YAaT,uBAAQ,GAAG,CAAC,CAAC;YAOb,uBAAQ,GAAG,CAAC,CAAC;YAguBL,iCAAkB,GAAY,KAAK,CAAC;YAUpC,iCAAkB,GAAY,KAAK,CAAC;YAUpC,iCAAkB,GAAY,KAAK,CAAC;YAcvD,qBAAC;SAAA,AAxyBD,IAwyBC;QAxyBY,mBAAc,iBAwyB1B,CAAA;QAKD;YAAA;gBAkJI,aAAQ,GAAG,KAAA,QAAQ,CAAC,OAAO,CAAC;gBAC5B,iBAAY,GAAG,IAAI,KAAK,EAAU,CAAC;gBACnC,oBAAe,GAAG,IAAI,KAAK,EAAc,CAAC;gBAC1C,sBAAiB,GAAG,IAAI,KAAK,EAAU,CAAC;YA4F5C,CAAC;YA1FG,0BAAK,GAAL;gBACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC7B,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;gBAChC,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;YACtC,CAAC;YAKD,qCAAgB,GAAhB;gBACI,IAAI,IAAI,CAAC,IAAI,EAAE;oBACX,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC;oBACvD,IAAI,QAAQ,IAAI,CAAC;wBAAE,OAAO,IAAI,CAAC,cAAc,CAAC;oBAC9C,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;iBAC5D;gBACD,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7E,CAAC;YAED,qCAAgB,GAAhB,UAAiB,aAAqB;gBAClC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;gBACnC,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC;YAC3C,CAAC;YAKD,+BAAU,GAAV;gBACI,OAAO,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC;YACrE,CAAC;YASD,4CAAuB,GAAvB;gBACI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;YACtC,CAAC;YAWD,sBAAI,4BAAI;qBAAR;oBACI,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE;wBAChC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACrC,OAAO,CAAC,IAAI,CAAC,6FAA6F,CAAC,CAAC;qBAC/G;oBACD,OAAO,IAAI,CAAC,SAAS,CAAC;gBAC1B,CAAC;qBAED,UAAS,KAAa;oBAClB,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE;wBAChC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACrC,OAAO,CAAC,IAAI,CAAC,6FAA6F,CAAC,CAAC;qBAC/G;oBACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBAC3B,CAAC;;;eARA;YAUD,sBAAI,+BAAO;qBAAX;oBACI,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE;wBAChC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACrC,OAAO,CAAC,IAAI,CAAC,+FAA+F,CAAC,CAAC;qBACjH;oBACD,OAAO,IAAI,CAAC,SAAS,CAAC;gBAC1B,CAAC;qBAED,UAAY,KAAa;oBACrB,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE;wBAChC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACrC,OAAO,CAAC,IAAI,CAAC,+FAA+F,CAAC,CAAC;qBACjH;oBACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBAC3B,CAAC;;;eARA;YAUD,+BAAU,GAAV;gBACI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC;YArCc,6BAAkB,GAAY,KAAK,CAAC;YACpC,6BAAkB,GAAY,KAAK,CAAC;YAqCvD,iBAAC;SAAA,AAjPD,IAiPC;QAjPY,eAAU,aAiPtB,CAAA;QAED;YAKI,oBAAY,SAAyB;gBAJrC,YAAO,GAAe,EAAE,CAAC;gBACzB,kBAAa,GAAG,KAAK,CAAC;gBAIlB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC/B,CAAC;YAED,0BAAK,GAAL,UAAO,KAAiB;gBACpB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzB,IAAI,CAAC,SAAS,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAC5C,CAAC;YAED,8BAAS,GAAT,UAAW,KAAiB;gBACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;gBACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;YAED,wBAAG,GAAH,UAAK,KAAiB;gBAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzB,IAAI,CAAC,SAAS,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAC5C,CAAC;YAED,4BAAO,GAAP,UAAS,KAAiB;gBACtB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBACrC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;YAED,6BAAQ,GAAR,UAAU,KAAiB;gBACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBACtC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;YAED,0BAAK,GAAL,UAAO,KAAiB,EAAE,KAAY;gBAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;YAID,mCAAc,GAAd;gBACI,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE;oBAChC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC;oBACrC,OAAO,CAAC,IAAI,CAAC,gLAAgL,CAAC,CAAC;iBAClM;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,0BAAK,GAAL;gBACI,IAAI,IAAI,CAAC,aAAa;oBAAE,OAAO;gBAC/B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAE1B,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAC3B,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;gBAEzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;oBACxC,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAc,CAAC;oBACnC,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAe,CAAC;oBACzC,QAAQ,IAAI,EAAE;wBACV,KAAK,SAAS,CAAC,KAAK;4BAChB,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK;gCAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;4BAChF,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;gCACxC,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK;oCAAE,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;4BAExD,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;4BAC1E,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;4BACnH,MAAM;wBACV,KAAK,SAAS,CAAC,SAAS;4BACpB,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS;gCAAE,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;4BACxF,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;gCACxC,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,SAAS;oCAAE,SAAS,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;4BAChE,MAAM;wBACV,KAAK,SAAS,CAAC,GAAG;4BACd,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG;gCAAE,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;4BAC5E,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;gCACxC,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,GAAG;oCAAE,SAAS,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;4BAEpD,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;4BACtE,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;wBAE5F,KAAK,SAAS,CAAC,OAAO;4BAClB,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO;gCAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;4BACpF,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;gCACxC,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,OAAO;oCAAE,SAAS,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;4BAC5D,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAC1C,MAAM;wBACV,KAAK,SAAS,CAAC,QAAQ;4BACnB,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ;gCAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BACtF,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;gCACxC,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,QAAQ;oCAAE,SAAS,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;4BAG9D,IAAI,KAAK,GAAG,KAAA,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAE;4BACjD,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;4BACvF,IAAI,CAAC,SAAS,CAAC,UAAU,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;4BACzG,MAAM;wBACV,KAAK,SAAS,CAAC,KAAK;4BAChB,IAAI,OAAK,GAAG,OAAO,CAAC,CAAC,EAAE,GAAG,CAAC,CAAU,CAAC;4BACtC,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK;gCAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,OAAK,CAAC,CAAC;4BACvF,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;gCACxC,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK;oCAAE,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,OAAK,CAAC,CAAC;4BAE/D,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,OAAK,CAAC,CAAC;4BACjF,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,OAAK,CAAC,CAAC;4BACnG,MAAM;qBACb;iBACJ;gBACD,IAAI,CAAC,KAAK,EAAE,CAAC;gBAEb,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC/B,CAAC;YAED,0BAAK,GAAL;gBACI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;YAC5B,CAAC;YA5Ec,6BAAkB,GAAY,KAAK,CAAC;YA6EvD,iBAAC;SAAA,AAvHD,IAuHC;QAvHY,eAAU,aAuHtB,CAAA;QAED,IAAY,SAEX;QAFD,WAAY,SAAS;YACjB,2CAAK,CAAA;YAAE,mDAAS,CAAA;YAAE,uCAAG,CAAA;YAAE,+CAAO,CAAA;YAAE,iDAAQ,CAAA;YAAE,2CAAK,CAAA;QACnD,CAAC,EAFW,SAAS,GAAT,cAAS,KAAT,cAAS,QAEpB;QAwBD;YAAA;YAkBA,CAAC;YAjBG,qCAAK,GAAL,UAAO,KAAiB;YACxB,CAAC;YAED,yCAAS,GAAT,UAAW,KAAiB;YAC5B,CAAC;YAED,mCAAG,GAAH,UAAK,KAAiB;YACtB,CAAC;YAED,uCAAO,GAAP,UAAS,KAAiB;YAC1B,CAAC;YAED,wCAAQ,GAAR,UAAU,KAAiB;YAC3B,CAAC;YAED,qCAAK,GAAL,UAAO,KAAiB,EAAE,KAAY;YACtC,CAAC;YACL,4BAAC;QAAD,CAAC,AAlBD,IAkBC;QAlBqB,0BAAqB,wBAkB1C,CAAA;IACL,CAAC,EA3sCoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA2sCxB;AAAD,CAAC,EA3sCS,UAAU,KAAV,UAAU,QA2sCnB;AC1sCD,IAAU,UAAU,CA0CnB;AA1CD,WAAU,UAAU;IAAC,IAAA,IAAI,CA0CxB;IA1CoB,WAAA,IAAI;QACrB;YAKI,4BAAY,YAA0B;gBAHtC,uBAAkB,GAAgB,EAAE,CAAC;gBACrC,eAAU,GAAG,CAAC,CAAC;gBAGX,IAAI,YAAY,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;gBAC1E,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YACrC,CAAC;YAED,mCAAM,GAAN,UAAO,QAAgB,EAAE,MAAc,EAAE,QAAgB;gBACrD,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBACrD,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,QAAQ,CAAC,CAAC;gBACtE,IAAI,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBACjD,IAAI,EAAE,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,MAAM,CAAC,CAAC;gBAClE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;YACxC,CAAC;YAID,yCAAY,GAAZ,UAAa,QAAgB,EAAE,MAAc,EAAE,QAAgB;gBAC3D,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,EAAE;oBACxC,kBAAkB,CAAC,kBAAkB,GAAG,IAAI,CAAC;oBAC7C,OAAO,CAAC,IAAI,CAAC,oGAAoG,CAAC,CAAC;iBACtH;gBACD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC5C,CAAC;YAED,uCAAU,GAAV,UAAW,IAAe,EAAE,EAAa,EAAE,QAAgB;gBACvD,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,EAAE,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;gBACtD,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;gBACpC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;YAC5C,CAAC;YAED,mCAAM,GAAN,UAAO,IAAe,EAAE,EAAa;gBACjC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;gBACpC,IAAI,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBACzC,OAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC;YACzD,CAAC;YArBc,qCAAkB,GAAY,KAAK,CAAC;YAsBvD,yBAAC;SAAA,AAxCD,IAwCC;QAxCY,uBAAkB,qBAwC9B,CAAA;IACL,CAAC,EA1CoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA0CxB;AAAD,CAAC,EA1CS,UAAU,KAAV,UAAU,QA0CnB;AC1CD,IAAU,UAAU,CA4CnB;AA5CD,WAAU,UAAU;IAAC,IAAA,IAAI,CA4CxB;IA5CoB,WAAA,IAAI;QACrB;YAGI,+BAAY,KAAmB;gBAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,CAAC;YAGD,mDAAmB,GAAnB,UAAoB,IAAU,EAAE,IAAY,EAAE,IAAY;gBACtD,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,MAAM,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,IAAI,GAAG,uBAAuB,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;gBACjH,IAAI,UAAU,GAAG,IAAI,KAAA,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBAC5C,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;gBAC3B,OAAO,UAAU,CAAC;YACtB,CAAC;YAGD,iDAAiB,GAAjB,UAAkB,IAAU,EAAE,IAAY,EAAE,IAAY;gBACpD,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,MAAM,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,IAAI,GAAG,qBAAqB,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;gBAC/G,IAAI,UAAU,GAAG,IAAI,KAAA,cAAc,CAAC,IAAI,CAAC,CAAC;gBAC1C,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;gBAC3B,OAAO,UAAU,CAAC;YACtB,CAAC;YAGD,wDAAwB,GAAxB,UAAyB,IAAU,EAAE,IAAY;gBAC7C,OAAO,IAAI,KAAA,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAC3C,CAAC;YAGD,iDAAiB,GAAjB,UAAkB,IAAU,EAAE,IAAY;gBACtC,OAAO,IAAI,KAAA,cAAc,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC;YAED,kDAAkB,GAAlB,UAAmB,IAAU,EAAE,IAAY;gBACvC,OAAO,IAAI,KAAA,eAAe,CAAC,IAAI,CAAC,CAAC;YACrC,CAAC;YAED,qDAAqB,GAArB,UAAsB,IAAU,EAAE,IAAY;gBAC1C,OAAO,IAAI,KAAA,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC;YACL,4BAAC;QAAD,CAAC,AA1CD,IA0CC;QA1CY,0BAAqB,wBA0CjC,CAAA;IACL,CAAC,EA5CoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA4CxB;AAAD,CAAC,EA5CS,UAAU,KAAV,UAAU,QA4CnB;AC5CD,IAAU,UAAU,CAOnB;AAPD,WAAU,UAAU;IAAC,IAAA,IAAI,CAOxB;IAPoB,WAAA,IAAI;QACrB,IAAY,SAKX;QALD,WAAY,SAAS;YACjB,6CAAU,CAAA;YACV,iDAAY,CAAA;YACZ,iDAAY,CAAA;YACZ,6CAAU,CAAA;QACd,CAAC,EALW,SAAS,GAAT,cAAS,KAAT,cAAS,QAKpB;IACL,CAAC,EAPoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAOxB;AAAD,CAAC,EAPS,UAAU,KAAV,UAAU,QAOnB;ACPD,IAAU,UAAU,CAoSnB;AApSD,WAAU,UAAU;IAAC,IAAA,IAAI,CAoSxB;IApSoB,WAAA,IAAI;QACrB;YAqCI,cAAY,IAAc,EAAE,QAAkB,EAAE,MAAY;gBAlC5D,WAAM,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAa3B,aAAQ,GAAG,IAAI,KAAK,EAAQ,CAAC;gBAC7B,MAAC,GAAG,CAAC,CAAC;gBACN,MAAC,GAAG,CAAC,CAAC;gBACN,aAAQ,GAAG,CAAC,CAAC;gBACb,WAAM,GAAG,CAAC,CAAC;gBACX,WAAM,GAAG,CAAC,CAAC;gBACX,WAAM,GAAG,CAAC,CAAC;gBACX,WAAM,GAAG,CAAC,CAAC;gBACX,OAAE,GAAG,CAAC,CAAC;gBACP,OAAE,GAAG,CAAC,CAAC;gBACP,cAAS,GAAG,CAAC,CAAC;gBACd,YAAO,GAAG,CAAC,CAAC;gBACZ,YAAO,GAAG,CAAC,CAAC;gBACZ,YAAO,GAAG,CAAC,CAAC;gBACZ,YAAO,GAAG,CAAC,CAAC;gBACZ,iBAAY,GAAG,KAAK,CAAC;gBAErB,WAAM,GAAG,KAAK,CAAC;gBACf,WAAM,GAAG,KAAK,CAAC;gBAIX,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,cAAc,EAAE,CAAC;YAC1B,CAAC;YAvCD,sBAAI,wBAAM;qBAAV;oBACI,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC1B,CAAC;;;eAAA;YAED,sBAAI,wBAAM;qBAAV;oBACI,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC1B,CAAC;;;eAAA;YAmCD,uBAAQ,GAAR;gBACI,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,CAAC;YAGD,qBAAM,GAAN;gBACI,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACrH,CAAC;YAGD,mCAAoB,GAApB;gBACI,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACrH,CAAC;YAGD,uCAAwB,GAAxB,UAAyB,CAAS,EAAE,CAAS,EAAE,QAAgB,EAAE,MAAc,EAAE,MAAc,EAAE,MAAc,EAAE,MAAc;gBAC3H,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;gBACZ,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;gBACZ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;gBAC1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;gBACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;gBACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;gBACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;gBACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBAEzB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBAEpB,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC9B,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAElE,IAAI,MAAM,IAAI,IAAI,EAAE;oBAChB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC7B,IAAI,SAAS,GAAG,QAAQ,GAAG,EAAE,GAAG,MAAM,CAAC;oBACvC,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC;oBACxD,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC;oBAChD,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC;oBACxD,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC;oBAChD,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC;oBAC3B,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC;oBAC3B,OAAO;iBACV;gBAED,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3F,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC1C,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC1C,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBAC7B,KAAK,KAAA,aAAa,CAAC,MAAM,CAAC,CAAC;wBACvB,IAAI,SAAS,GAAG,QAAQ,GAAG,EAAE,GAAG,MAAM,CAAC;wBACvC,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;wBACtD,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;wBAC9C,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;wBACtD,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;wBAC9C,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,OAAO;qBACV;oBACD,KAAK,KAAA,aAAa,CAAC,eAAe,CAAC,CAAC;wBAChC,IAAI,SAAS,GAAG,QAAQ,GAAG,EAAE,GAAG,MAAM,CAAC;wBACvC,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;wBACnD,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;wBAC3C,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;wBACnD,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;wBAC3C,MAAM;qBACT;oBACD,KAAK,KAAA,aAAa,CAAC,sBAAsB,CAAC,CAAC;wBACvC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBAC1B,IAAI,GAAG,GAAG,CAAC,CAAC;wBACZ,IAAI,CAAC,GAAG,MAAM,EAAE;4BACZ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;4BACpC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;4BACZ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;4BACZ,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;yBAC/C;6BAAM;4BACH,EAAE,GAAG,CAAC,CAAC;4BACP,EAAE,GAAG,CAAC,CAAC;4BACP,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;yBACpD;wBACD,IAAI,EAAE,GAAG,QAAQ,GAAG,MAAM,GAAG,GAAG,CAAC;wBACjC,IAAI,EAAE,GAAG,QAAQ,GAAG,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC;wBACtC,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;wBACvC,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;wBACvC,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;wBACvC,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;wBACvC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,MAAM;qBACT;oBACD,KAAK,KAAA,aAAa,CAAC,OAAO,CAAC;oBAC3B,KAAK,KAAA,aAAa,CAAC,mBAAmB,CAAC,CAAC;wBACpC,IAAI,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBACrC,IAAI,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBACrC,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;wBACpC,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;wBACpC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;wBACrC,IAAI,CAAC,GAAG,OAAO;4BAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBAC3B,EAAE,IAAI,CAAC,CAAC;wBACR,EAAE,IAAI,CAAC,CAAC;wBACR,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;wBACjC,IACI,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,KAAA,aAAa,CAAC,OAAO;+BAC7C,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAA,CAAC;gCAC1C,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gCACpD,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;4BAC7D,CAAC,GAAG,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;wBACzC,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACzB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACzB,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;wBAC3C,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;wBAChD,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;wBAC3C,IAAI,EAAE,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC;wBAChD,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBACxB,MAAM;qBACT;iBACJ;gBACD,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBACV,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBACV,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBACV,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACd,CAAC;YAED,6BAAc,GAAd;gBACI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACrB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC9B,CAAC;YAED,gCAAiB,GAAjB;gBACI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;YACvE,CAAC;YAED,gCAAiB,GAAjB;gBACI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;YACvE,CAAC;YAED,6BAAc,GAAd;gBACI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBACpB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,CAAC;YAED,6BAAc,GAAd;gBACI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBACpB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,CAAC;YAMD,qCAAsB,GAAtB;gBACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBACpB,IAAI,MAAM,IAAI,IAAI,EAAE;oBAChB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;oBACf,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;oBACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;oBACzD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAChD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAChD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;oBACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;oBAC3F,OAAO;iBACV;gBACD,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;gBACvB,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC1C,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;gBACzC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;gBAC9C,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;gBAC9C,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;gBACpB,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;gBACpB,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;gBACpB,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;gBACpB,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;gBACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC5C,IAAI,IAAI,CAAC,OAAO,GAAG,MAAM,EAAE;oBACvB,IAAI,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;oBAC5B,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;oBAClC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;oBACrE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;iBAC1D;qBAAM;oBACH,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;oBACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;oBAC5C,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;oBACjB,IAAI,CAAC,SAAS,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;iBAC/D;YACL,CAAC;YAED,2BAAY,GAAZ,UAAa,KAAc;gBACvB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBACpB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvC,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;gBAC3C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;gBAC5C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;gBAC5C,OAAO,KAAK,CAAC;YACjB,CAAC;YAED,2BAAY,GAAZ,UAAa,KAAc;gBACvB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBACpB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gBAC7B,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;gBACnC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;gBACnC,OAAO,KAAK,CAAC;YACjB,CAAC;YAED,mCAAoB,GAApB,UAAsB,aAAqB;gBACvC,IAAI,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;gBACjF,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;gBACtB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;YAC/F,CAAC;YAED,mCAAoB,GAApB,UAAsB,aAAqB;gBACvC,IAAI,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;gBACjF,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;gBACtB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;YAC/F,CAAC;YAED,0BAAW,GAAX,UAAa,OAAe;gBACxB,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;gBACtB,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;gBAC/C,IAAI,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACrE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;gBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;gBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;gBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;gBAC1B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC9B,CAAC;YAhSM,UAAK,GAAY,KAAK,CAAC;YAiSlC,WAAC;SAAA,AAlSD,IAkSC;QAlSY,SAAI,OAkShB,CAAA;IACL,CAAC,EApSoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAoSxB;AAAD,CAAC,EApSS,UAAU,KAAV,UAAU,QAoSnB;ACpSD,IAAU,UAAU,CA8BnB;AA9BD,WAAU,UAAU;IAAC,IAAA,IAAI,CA8BxB;IA9BoB,WAAA,IAAI;QACrB;YAiBI,kBAAY,KAAa,EAAE,IAAY,EAAE,MAAgB;gBAZzD,MAAC,GAAG,CAAC,CAAC;gBACN,MAAC,GAAG,CAAC,CAAC;gBACN,aAAQ,GAAG,CAAC,CAAC;gBACb,WAAM,GAAG,CAAC,CAAC;gBACX,WAAM,GAAG,CAAC,CAAC;gBACX,WAAM,GAAG,CAAC,CAAC;gBACX,WAAM,GAAG,CAAC,CAAC;gBACX,kBAAa,GAAG,aAAa,CAAC,MAAM,CAAC;gBACrC,iBAAY,GAAG,KAAK,CAAC;gBAErB,UAAK,GAAG,IAAI,KAAA,KAAK,EAAE,CAAC;gBAGhB,IAAI,KAAK,GAAG,CAAC;oBAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;gBACtD,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACzB,CAAC;YACL,eAAC;QAAD,CAAC,AAxBD,IAwBC;QAxBY,aAAQ,WAwBpB,CAAA;QAED,IAAY,aAEX;QAFD,WAAY,aAAa;YACrB,qDAAM,CAAA;YAAE,uEAAe,CAAA;YAAE,qFAAsB,CAAA;YAAE,uDAAO,CAAA;YAAE,+EAAmB,CAAA;QACjF,CAAC,EAFW,aAAa,GAAb,kBAAa,KAAb,kBAAa,QAExB;IACL,CAAC,EA9BoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA8BxB;AAAD,CAAC,EA9BS,UAAU,KAAV,UAAU,QA8BnB;AC/BD,IAAU,UAAU,CAInB;AAJD,WAAU,UAAU;IAAC,IAAA,IAAI,CAIxB;IAJoB,WAAA,IAAI;QACrB;YACI,wBAAmB,IAAY,EAAS,KAAa,EAAS,YAAqB;gBAAhE,SAAI,GAAJ,IAAI,CAAQ;gBAAS,UAAK,GAAL,KAAK,CAAQ;gBAAS,iBAAY,GAAZ,YAAY,CAAS;YAAI,CAAC;YAC5F,qBAAC;QAAD,CAAC,AAFD,IAEC;QAFqB,mBAAc,iBAEnC,CAAA;IACL,CAAC,EAJoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAIxB;AAAD,CAAC,EAJS,UAAU,KAAV,UAAU,QAInB;ACHD,IAAU,UAAU,CAiBnB;AAjBD,WAAU,UAAU;IAAC,IAAA,IAAI,CAiBxB;IAjBoB,WAAA,IAAI;QACrB;YAUI,eAAY,IAAY,EAAE,IAAe;gBACrC,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC;YACL,YAAC;QAAD,CAAC,AAfD,IAeC;QAfY,UAAK,QAejB,CAAA;IACL,CAAC,EAjBoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAiBxB;AAAD,CAAC,EAjBS,UAAU,KAAV,UAAU,QAiBnB;ACjBD,IAAU,UAAU,CAcnB;AAdD,WAAU,UAAU;IAAC,IAAA,IAAI,CAcxB;IAdoB,WAAA,IAAI;QACrB;YASI,mBAAa,IAAY;gBACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC;YACL,gBAAC;QAAD,CAAC,AAZD,IAYC;QAZY,cAAS,YAYrB,CAAA;IACL,CAAC,EAdoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAcxB;AAAD,CAAC,EAdS,UAAU,KAAV,UAAU,QAcnB;ACdD,IAAU,UAAU,CAwPnB;AAxPD,WAAU,UAAU;IAAC,IAAA,IAAI,CAwPxB;IAxPoB,WAAA,IAAI;QACrB;YAWI,sBAAa,IAAsB,EAAE,QAAkB;gBAPvD,kBAAa,GAAG,CAAC,CAAC;gBAClB,aAAQ,GAAG,KAAK,CAAC;gBACjB,YAAO,GAAG,KAAK,CAAC;gBAChB,QAAG,GAAG,CAAC,CAAC;gBACR,aAAQ,GAAG,CAAC,CAAC;gBACb,WAAM,GAAG,KAAK,CAAC;gBAGX,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;gBACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBACxC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAE5B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;gBAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;oBACtC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtD,CAAC;YAED,+BAAQ,GAAR;gBACI,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,CAAC;YAED,4BAAK,GAAL;gBACI,IAAI,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC;YAED,6BAAM,GAAN;gBACI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,QAAQ,KAAK,CAAC,MAAM,EAAE;oBAClB,KAAK,CAAC;wBACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;wBAC9G,MAAM;oBACV,KAAK,CAAC;wBACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;wBACzH,MAAM;iBACb;YACL,CAAC;YAID,6BAAM,GAAN,UAAQ,IAAU,EAAE,OAAe,EAAE,OAAe,EAAE,QAAiB,EAAE,OAAgB,EAAE,OAAgB,EAAE,KAAa;gBACtH,IAAI,CAAC,IAAI,CAAC,YAAY;oBAAE,IAAI,CAAC,sBAAsB,EAAE,CAAC;gBACtD,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;gBAG3B,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3C,IAAI,UAAU,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;gBAEhE,QAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBAC5B,KAAK,KAAA,aAAa,CAAC,eAAe;wBAC9B,EAAE,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;wBAC3B,EAAE,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;wBAC3B,MAAM;oBACV,KAAK,KAAA,aAAa,CAAC,sBAAsB;wBACrC,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;wBACpD,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;wBAC3D,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC;wBACd,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;oBAEjB;wBACI,IAAI,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC;wBAC3C,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;wBAC1B,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;wBACrC,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;iBAC5C;gBACD,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;gBAEpD,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC;oBAAE,UAAU,IAAI,GAAG,CAAC;gBACxC,IAAI,UAAU,GAAG,GAAG;oBAChB,UAAU,IAAI,GAAG,CAAC;qBACjB,IAAI,UAAU,GAAG,CAAC,GAAG;oBAAE,UAAU,IAAI,GAAG,CAAC;gBAC9C,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;gBACzC,IAAI,QAAQ,IAAI,OAAO,EAAE;oBACrB,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;wBAC7B,KAAK,KAAA,aAAa,CAAC,OAAO,CAAC;wBAC3B,KAAK,KAAA,aAAa,CAAC,mBAAmB;4BAClC,EAAE,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;4BAC3B,EAAE,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;qBAClC;oBACD,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;oBACjE,IAAI,CAAC,QAAQ,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE;wBAC3D,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;wBACjC,EAAE,IAAI,CAAC,CAAC;wBACR,IAAI,OAAO;4BAAE,EAAE,IAAI,CAAC,CAAC;qBACxB;iBACJ;gBACD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,GAAG,UAAU,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,OAAO,EACrG,IAAI,CAAC,OAAO,CAAC,CAAC;YACtB,CAAC;YAKD,6BAAM,GAAN,UAAQ,MAAY,EAAE,KAAW,EAAE,OAAe,EAAE,OAAe,EAAE,OAAe,EAAE,OAAgB,EAAE,QAAgB,EAAE,KAAa;gBACnI,IAAI,KAAK,IAAI,CAAC,EAAE;oBACZ,KAAK,CAAC,oBAAoB,EAAE,CAAC;oBAC7B,OAAO;iBACV;gBACD,IAAI,CAAC,MAAM,CAAC,YAAY;oBAAE,MAAM,CAAC,sBAAsB,EAAE,CAAC;gBAC1D,IAAI,CAAC,KAAK,CAAC,YAAY;oBAAE,KAAK,CAAC,sBAAsB,EAAE,CAAC;gBACxD,IAAI,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,GAAG,GAAG,MAAM,CAAC,OAAO,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC;gBAC9G,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;gBACzB,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;gBAC7B,IAAI,GAAG,GAAG,CAAC,EAAE;oBACT,GAAG,GAAG,CAAC,GAAG,CAAC;oBACX,GAAG,GAAG,GAAG,CAAC;oBACV,EAAE,GAAG,CAAC,CAAC,CAAC;iBACX;qBAAM;oBACH,GAAG,GAAG,CAAC,CAAC;oBACR,EAAE,GAAG,CAAC,CAAC;iBACV;gBACD,IAAI,GAAG,GAAG,CAAC,EAAE;oBACT,GAAG,GAAG,CAAC,GAAG,CAAC;oBACX,EAAE,GAAG,CAAC,EAAE,CAAC;iBACZ;gBACD,IAAI,GAAG,GAAG,CAAC,EAAE;oBACT,GAAG,GAAG,CAAC,GAAG,CAAC;oBACX,GAAG,GAAG,GAAG,CAAC;iBACb;;oBACG,GAAG,GAAG,CAAC,CAAC;gBACZ,IAAI,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gBAC5F,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,MAAM,CAAC;gBACtC,IAAI,CAAC,CAAC,EAAE;oBACJ,EAAE,GAAG,CAAC,CAAC;oBACP,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;oBACvB,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;iBAC1B;qBAAM;oBACH,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC;oBACd,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;oBAChC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;iBACnC;gBACD,IAAI,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;gBAC9B,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACT,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACT,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC;gBAC/D,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;gBACnE,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC;gBAC5E,IAAI,EAAE,GAAG,MAAM,EAAE;oBACb,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;oBACpE,KAAK,CAAC,wBAAwB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;oBACtG,OAAO;iBACV;gBACD,CAAC,GAAG,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC;gBACpB,CAAC,GAAG,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC;gBACpB,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;gBACnE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;gBAC3B,IAAI,QAAQ,IAAI,CAAC,EAAE;oBACf,QAAQ,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;oBAChC,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,QAAQ,CAAC;oBAC3D,IAAI,EAAE,GAAG,CAAC,EAAE;wBACR,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBAC7C,CAAC,GAAG,CAAC,EAAE,GAAG,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;wBACvC,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;wBACb,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;wBACb,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;qBAC1B;iBACJ;gBACD,KAAK,EACD,IAAI,CAAC,EAAE;oBACH,EAAE,IAAI,GAAG,CAAC;oBACV,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;oBACnD,IAAI,GAAG,GAAG,CAAC,CAAC;wBACR,GAAG,GAAG,CAAC,CAAC,CAAC;yBACR,IAAI,GAAG,GAAG,CAAC,EAAE;wBACd,GAAG,GAAG,CAAC,CAAC;wBACR,IAAI,OAAO;4BAAE,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;qBAClE;oBACD,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;oBAC9B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;oBAClB,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBACtB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;iBACrD;qBAAM;oBACH,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;oBACb,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;oBACb,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;oBACpD,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;oBACrC,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;oBACpC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;oBACzB,IAAI,CAAC,IAAI,CAAC,EAAE;wBACR,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACrB,IAAI,EAAE,GAAG,CAAC;4BAAE,CAAC,GAAG,CAAC,CAAC,CAAC;wBACnB,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;wBAClB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;wBAC5B,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;wBAC9C,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE;4BACb,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;4BACpC,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC3B,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;4BACzC,MAAM,KAAK,CAAC;yBACf;qBACJ;oBACD,IAAI,QAAQ,GAAG,KAAA,SAAS,CAAC,EAAE,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC,EAAE,OAAO,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC;oBAC5E,IAAI,QAAQ,GAAG,CAAC,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC,EAAE,OAAO,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC;oBACjE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;oBACxB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;wBACnB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACjB,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;wBACzB,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACpB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBAClB,IAAI,CAAC,GAAG,OAAO,EAAE;4BACb,QAAQ,GAAG,CAAC,CAAC;4BACb,OAAO,GAAG,CAAC,CAAC;4BACZ,IAAI,GAAG,CAAC,CAAC;4BACT,IAAI,GAAG,CAAC,CAAC;yBACZ;wBACD,IAAI,CAAC,GAAG,OAAO,EAAE;4BACb,QAAQ,GAAG,CAAC,CAAC;4BACb,OAAO,GAAG,CAAC,CAAC;4BACZ,IAAI,GAAG,CAAC,CAAC;4BACT,IAAI,GAAG,CAAC,CAAC;yBACZ;qBACJ;oBACD,IAAI,EAAE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,EAAE;wBAC/B,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,EAAE,IAAI,CAAC,CAAC;wBAC3C,EAAE,GAAG,QAAQ,GAAG,OAAO,CAAC;qBAC3B;yBAAM;wBACH,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,EAAE,IAAI,CAAC,CAAC;wBAC3C,EAAE,GAAG,QAAQ,GAAG,OAAO,CAAC;qBAC3B;iBACJ;gBACL,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;gBACjC,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;gBAChC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC;gBACnD,IAAI,EAAE,GAAG,GAAG;oBACR,EAAE,IAAI,GAAG,CAAC;qBACT,IAAI,EAAE,GAAG,CAAC,GAAG;oBAAE,EAAE,IAAI,GAAG,CAAC;gBAC9B,MAAM,CAAC,wBAAwB,CAAC,EAAE,EAAE,EAAE,EAAE,QAAQ,GAAG,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzF,QAAQ,GAAG,KAAK,CAAC,SAAS,CAAC;gBAC3B,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,QAAQ,CAAC;gBAC1E,IAAI,EAAE,GAAG,GAAG;oBACR,EAAE,IAAI,GAAG,CAAC;qBACT,IAAI,EAAE,GAAG,CAAC,GAAG;oBAAE,EAAE,IAAI,GAAG,CAAC;gBAC9B,KAAK,CAAC,wBAAwB,CAAC,EAAE,EAAE,EAAE,EAAE,QAAQ,GAAG,EAAE,GAAG,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9H,CAAC;YACL,mBAAC;QAAD,CAAC,AAtPD,IAsPC;QAtPY,iBAAY,eAsPxB,CAAA;IACL,CAAC,EAxPoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAwPxB;AAAD,CAAC,EAxPS,UAAU,KAAV,UAAU,QAwPnB;ACxPD,IAAU,UAAU,CAenB;AAfD,WAAU,UAAU;IAAC,IAAA,IAAI,CAexB;IAfoB,WAAA,IAAI;QACrB;YAAsC,oCAAc;YAUhD,0BAAa,IAAY;gBAAzB,YACI,kBAAM,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,SACxB;gBAXD,WAAK,GAAG,IAAI,KAAK,EAAY,CAAC;gBAE9B,mBAAa,GAAG,CAAC,CAAC;gBAClB,cAAQ,GAAG,KAAK,CAAC;gBACjB,aAAO,GAAG,KAAK,CAAC;gBAChB,aAAO,GAAG,KAAK,CAAC;gBAChB,SAAG,GAAG,CAAC,CAAC;gBACR,cAAQ,GAAG,CAAC,CAAC;;YAIb,CAAC;YACL,uBAAC;QAAD,CAAC,AAbD,CAAsC,KAAA,cAAc,GAanD;QAbY,qBAAgB,mBAa5B,CAAA;IACL,CAAC,EAfoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAexB;AAAD,CAAC,EAfS,UAAU,KAAV,UAAU,QAenB;ACfD,IAAU,UAAU,CA0XnB;AA1XD,WAAU,UAAU;IAAC,IAAA,IAAI,CA0XxB;IA1XoB,WAAA,IAAI;QACrB;YAeI,wBAAa,IAAwB,EAAE,QAAkB;gBARzD,aAAQ,GAAG,CAAC,CAAC;gBAAC,YAAO,GAAG,CAAC,CAAC;gBAAC,cAAS,GAAG,CAAC,CAAC;gBAAC,iBAAY,GAAG,CAAC,CAAC;gBAE3D,WAAM,GAAG,IAAI,KAAK,EAAU,CAAC;gBAAC,cAAS,GAAG,IAAI,KAAK,EAAU,CAAC;gBAC9D,UAAK,GAAG,IAAI,KAAK,EAAU,CAAC;gBAAC,WAAM,GAAG,IAAI,KAAK,EAAU,CAAC;gBAAC,YAAO,GAAG,IAAI,KAAK,EAAU,CAAC;gBACzF,aAAQ,GAAG,IAAI,KAAK,EAAU,CAAC;gBAE/B,WAAM,GAAG,KAAK,CAAC;gBAGX,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;gBAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBAC7C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAC5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;gBAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;YAC1C,CAAC;YAED,iCAAQ,GAAR;gBACI,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,CAAC;YAED,8BAAK,GAAL;gBACI,IAAI,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC;YAED,+BAAM,GAAN;gBACI,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;gBAC7C,IAAI,CAAC,CAAC,UAAU,YAAY,KAAA,cAAc,CAAC;oBAAE,OAAO;gBAEpD,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;gBACjE,IAAI,SAAS,GAAG,YAAY,GAAG,CAAC,EAAE,MAAM,GAAG,SAAS,GAAG,CAAC,CAAC;gBACzD,IAAI,CAAC,SAAS,IAAI,CAAC,MAAM;oBAAE,OAAO;gBAElC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACrB,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;gBACnC,IAAI,aAAa,GAAG,WAAW,IAAI,KAAA,WAAW,CAAC,MAAM,CAAC;gBACtD,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;gBACjC,IAAI,QAAQ,GAAG,UAAU,IAAI,KAAA,UAAU,CAAC,OAAO,EAAE,KAAK,GAAG,UAAU,IAAI,KAAA,UAAU,CAAC,UAAU,CAAC;gBAC7F,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC;gBACtF,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAI,MAAM,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE,OAAO,GAAkB,IAAI,CAAC;gBACzF,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAC3B,IAAI,KAAK,IAAI,aAAa,EAAE;oBACxB,IAAI,KAAK;wBAAE,OAAO,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;oBACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;wBACzC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACpB,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;wBACnC,IAAI,WAAW,GAAG,cAAc,CAAC,OAAO,EAAE;4BACtC,IAAI,KAAK;gCAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;4BAC1B,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;yBACnB;6BAAM;4BACH,IAAI,CAAC,GAAG,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;4BACrE,IAAI,QAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;4BACtC,IAAI,KAAK;gCAAE,OAAO,CAAC,CAAC,CAAC,GAAG,QAAM,CAAC;4BAC/B,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,QAAM,GAAG,WAAW,CAAC;yBAC1F;qBACJ;iBACJ;qBAAM;oBACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;wBAChC,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;iBAC3B;gBAED,IAAI,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAiB,UAAU,EAAE,WAAW,EAAE,QAAQ,EACxF,IAAI,CAAC,YAAY,IAAI,KAAA,YAAY,CAAC,OAAO,EAAE,WAAW,IAAI,KAAA,WAAW,CAAC,OAAO,CAAC,CAAC;gBACnF,IAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;gBACrF,IAAI,GAAG,GAAG,KAAK,CAAC;gBAChB,IAAI,cAAc,IAAI,CAAC;oBACnB,GAAG,GAAG,UAAU,IAAI,KAAA,UAAU,CAAC,KAAK,CAAC;qBACpC;oBACD,GAAG,GAAG,KAAK,CAAC;oBACZ,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;oBAChC,cAAc,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAA,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAA,SAAS,CAAC,MAAM,CAAC;iBACtF;gBACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;oBAC/C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;oBACtB,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;oBAC1C,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;oBAC1C,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,KAAK,EAAE,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;oBAC3E,IAAI,KAAK,EAAE;wBACP,IAAI,QAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;wBACxB,IAAI,QAAM,IAAI,CAAC,EAAE;4BACb,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,QAAM,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;4BACpE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;4BACX,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;yBACd;qBACJ;oBACD,KAAK,GAAG,CAAC,CAAC;oBACV,KAAK,GAAG,CAAC,CAAC;oBACV,IAAI,MAAM,EAAE;wBACR,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;wBACxE,IAAI,QAAQ;4BACR,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;6BACpB,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;4BACvB,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;;4BAErB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;wBAC3B,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACtB,IAAI,GAAG,EAAE;4BACL,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAClB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAClB,IAAI,QAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;4BAC9B,KAAK,IAAI,CAAC,QAAM,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC;4BACzD,KAAK,IAAI,CAAC,QAAM,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC;yBAC5D;6BAAM;4BACH,CAAC,IAAI,cAAc,CAAC;yBACvB;wBACD,IAAI,CAAC,GAAG,KAAA,SAAS,CAAC,EAAE;4BAChB,CAAC,IAAI,KAAA,SAAS,CAAC,GAAG,CAAC;6BAClB,IAAI,CAAC,GAAG,CAAC,KAAA,SAAS,CAAC,EAAE;4BACtB,CAAC,IAAI,KAAA,SAAS,CAAC,GAAG,CAAC;wBACvB,CAAC,IAAI,SAAS,CAAC;wBACf,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAClB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAClB,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;qBAC7B;oBACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC7B;YACL,CAAC;YAED,8CAAqB,GAArB,UAAuB,IAAoB,EAAE,WAAmB,EAAE,QAAiB,EAAE,eAAwB,EACtF,cAAuB;gBAC1C,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAkB,IAAI,CAAC;gBACrH,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,cAAc,GAAG,IAAI,CAAC,mBAAmB,EAAE,UAAU,GAAG,cAAc,GAAG,CAAC,EAAE,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC;gBAEhH,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBACrB,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC3B,UAAU,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,YAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;oBACrC,IAAI,eAAe;wBAAE,QAAQ,IAAI,YAAU,CAAC;oBAC5C,IAAI,cAAc,EAAE;wBAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;4BAChC,MAAM,CAAC,CAAC,CAAC,IAAI,YAAU,CAAC;qBAC/B;oBACD,KAAK,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;wBAC5D,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACtB,QAAQ,IAAI,KAAK,CAAC;wBAClB,IAAI,CAAC,GAAG,QAAQ,CAAC;wBAEjB,IAAI,MAAM,EAAE;4BACR,CAAC,IAAI,YAAU,CAAC;4BAChB,IAAI,CAAC,GAAG,CAAC;gCAAE,CAAC,IAAI,YAAU,CAAC;4BAC3B,KAAK,GAAG,CAAC,CAAC;yBACb;6BAAM,IAAI,CAAC,GAAG,CAAC,EAAE;4BACd,IAAI,SAAS,IAAI,cAAc,CAAC,MAAM,EAAE;gCACpC,SAAS,GAAG,cAAc,CAAC,MAAM,CAAC;gCAClC,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;6BACxD;4BACD,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;4BAC5C,SAAS;yBACZ;6BAAM,IAAI,CAAC,GAAG,YAAU,EAAE;4BACvB,IAAI,SAAS,IAAI,cAAc,CAAC,KAAK,EAAE;gCACnC,SAAS,GAAG,cAAc,CAAC,KAAK,CAAC;gCACjC,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,cAAc,GAAG,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;6BACzE;4BACD,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,YAAU,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;4BACxD,SAAS;yBACZ;wBAGD,QAAQ,KAAK,EAAE,EAAE;4BACb,IAAI,QAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;4BAC5B,IAAI,CAAC,GAAG,QAAM;gCAAE,SAAS;4BACzB,IAAI,KAAK,IAAI,CAAC;gCACV,CAAC,IAAI,QAAM,CAAC;iCACX;gCACD,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gCAC9B,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAM,GAAG,IAAI,CAAC,CAAC;6BACpC;4BACD,MAAM;yBACT;wBACD,IAAI,KAAK,IAAI,SAAS,EAAE;4BACpB,SAAS,GAAG,KAAK,CAAC;4BAClB,IAAI,MAAM,IAAI,KAAK,IAAI,UAAU,EAAE;gCAC/B,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,cAAc,GAAG,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gCACtE,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;6BACxD;;gCACG,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;yBACxE;wBACD,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAC3G,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;qBAC1C;oBACD,OAAO,GAAG,CAAC;iBACd;gBAGD,IAAI,MAAM,EAAE;oBACR,cAAc,IAAI,CAAC,CAAC;oBACpB,KAAK,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;oBACvD,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,cAAc,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACtE,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,cAAc,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;oBACtE,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACrC,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;iBACxC;qBAAM;oBACH,UAAU,EAAE,CAAC;oBACb,cAAc,IAAI,CAAC,CAAC;oBACpB,KAAK,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;oBACvD,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;iBACrE;gBAGD,IAAI,MAAM,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;gBACzD,IAAI,UAAU,GAAG,CAAC,CAAC;gBACnB,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;gBACrF,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;gBACnF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;oBAChD,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACf,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACnB,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACnB,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACnB,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBAClB,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBAClB,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC;oBACrC,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC;oBACrC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;oBAC9C,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;oBAC9C,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;oBACxB,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;oBACxB,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,CAAC;oBACpD,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,CAAC;oBACpD,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;oBAC/C,GAAG,IAAI,IAAI,CAAC;oBACZ,GAAG,IAAI,IAAI,CAAC;oBACZ,IAAI,IAAI,KAAK,CAAC;oBACd,IAAI,IAAI,KAAK,CAAC;oBACd,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;oBAC/C,GAAG,IAAI,IAAI,CAAC;oBACZ,GAAG,IAAI,IAAI,CAAC;oBACZ,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;oBAC/C,GAAG,IAAI,IAAI,GAAG,KAAK,CAAC;oBACpB,GAAG,IAAI,IAAI,GAAG,KAAK,CAAC;oBACpB,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;oBAC/C,MAAM,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;oBACvB,EAAE,GAAG,EAAE,CAAC;oBACR,EAAE,GAAG,EAAE,CAAC;iBACX;gBACD,IAAI,eAAe;oBAAE,QAAQ,IAAI,UAAU,CAAC;gBAC5C,IAAI,cAAc,EAAE;oBAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;wBAChC,MAAM,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC;iBAC/B;gBAED,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,IAAI,WAAW,GAAG,CAAC,CAAC;gBACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;oBACzE,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtB,QAAQ,IAAI,KAAK,CAAC;oBAClB,IAAI,CAAC,GAAG,QAAQ,CAAC;oBAEjB,IAAI,MAAM,EAAE;wBACR,CAAC,IAAI,UAAU,CAAC;wBAChB,IAAI,CAAC,GAAG,CAAC;4BAAE,CAAC,IAAI,UAAU,CAAC;wBAC3B,KAAK,GAAG,CAAC,CAAC;qBACb;yBAAM,IAAI,CAAC,GAAG,CAAC,EAAE;wBACd,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;wBAC5C,SAAS;qBACZ;yBAAM,IAAI,CAAC,GAAG,UAAU,EAAE;wBACvB,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,UAAU,EAAE,KAAK,EAAE,cAAc,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;wBACzE,SAAS;qBACZ;oBAGD,QAAQ,KAAK,EAAE,EAAE;wBACb,IAAI,QAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC3B,IAAI,CAAC,GAAG,QAAM;4BAAE,SAAS;wBACzB,IAAI,KAAK,IAAI,CAAC;4BACV,CAAC,IAAI,QAAM,CAAC;6BACX;4BACD,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC7B,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAM,GAAG,IAAI,CAAC,CAAC;yBACpC;wBACD,MAAM;qBACT;oBAGD,IAAI,KAAK,IAAI,SAAS,EAAE;wBACpB,SAAS,GAAG,KAAK,CAAC;wBAClB,IAAI,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;wBACnB,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;wBACf,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBACnB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBACpB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBACpB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBACpB,GAAG,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBACpB,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBACnB,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBACnB,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;wBACnC,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;wBACnC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;wBAC5C,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;wBAC5C,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;wBACxB,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;wBACxB,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,CAAC;wBACnD,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,UAAU,CAAC;wBACnD,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC/C,QAAQ,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;wBAC1B,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE;4BACvB,GAAG,IAAI,IAAI,CAAC;4BACZ,GAAG,IAAI,IAAI,CAAC;4BACZ,IAAI,IAAI,KAAK,CAAC;4BACd,IAAI,IAAI,KAAK,CAAC;4BACd,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;4BAChD,QAAQ,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;yBAC9B;wBACD,GAAG,IAAI,IAAI,CAAC;wBACZ,GAAG,IAAI,IAAI,CAAC;wBACZ,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;wBAChD,QAAQ,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;wBAC1B,GAAG,IAAI,IAAI,GAAG,KAAK,CAAC;wBACpB,GAAG,IAAI,IAAI,GAAG,KAAK,CAAC;wBACpB,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;wBAChD,QAAQ,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;wBAC1B,OAAO,GAAG,CAAC,CAAC;qBACf;oBAGD,CAAC,IAAI,WAAW,CAAC;oBACjB,QAAQ,OAAO,EAAE,EAAE;wBACf,IAAI,QAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;wBAC/B,IAAI,CAAC,GAAG,QAAM;4BAAE,SAAS;wBACzB,IAAI,OAAO,IAAI,CAAC;4BACZ,CAAC,IAAI,QAAM,CAAC;6BACX;4BACD,IAAI,IAAI,GAAG,QAAQ,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;4BACjC,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAM,GAAG,IAAI,CAAC,CAAC;yBAC9C;wBACD,MAAM;qBACT;oBACD,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;iBACjH;gBACD,OAAO,GAAG,CAAC;YACf,CAAC;YAED,0CAAiB,GAAjB,UAAmB,CAAS,EAAE,IAAmB,EAAE,CAAS,EAAE,GAAkB,EAAE,CAAS;gBACvF,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;gBACzG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC9B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC;YAED,yCAAgB,GAAhB,UAAkB,CAAS,EAAE,IAAmB,EAAE,CAAS,EAAE,GAAkB,EAAE,CAAS;gBACtF,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;gBACzG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC9B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC;YAED,yCAAgB,GAAhB,UAAkB,CAAS,EAAE,EAAU,EAAE,EAAU,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,EAAU,EAAE,EAAU,EAC7G,GAAkB,EAAE,CAAS,EAAE,QAAiB;gBAC9D,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;oBAAE,CAAC,GAAG,MAAM,CAAC;gBACnC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;gBAClE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,GAAG,GAAG,EAAE,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;gBAC7D,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,GAAG,GAAG,CAAC;gBACzG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gBACf,IAAI,QAAQ;oBAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;YAC5H,CAAC;YAtXM,mBAAI,GAAG,CAAC,CAAC,CAAC;YAAQ,qBAAM,GAAG,CAAC,CAAC,CAAC;YAAQ,oBAAK,GAAG,CAAC,CAAC,CAAC;YACjD,sBAAO,GAAG,OAAO,CAAC;YAsX7B,qBAAC;SAAA,AAxXD,IAwXC;QAxXY,mBAAc,iBAwX1B,CAAA;IACL,CAAC,EA1XoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA0XxB;AAAD,CAAC,EA1XS,UAAU,KAAV,UAAU,QA0XnB;AC1XD,IAAU,UAAU,CA0BnB;AA1BD,WAAU,UAAU;IAAC,IAAA,IAAI,CA0BxB;IA1BoB,WAAA,IAAI;QACrB;YAAwC,sCAAc;YASlD,4BAAa,IAAY;gBAAzB,YACI,kBAAM,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,SACxB;gBAVD,WAAK,GAAG,IAAI,KAAK,EAAY,CAAC;;YAU9B,CAAC;YACL,yBAAC;QAAD,CAAC,AAZD,CAAwC,KAAA,cAAc,GAYrD;QAZY,uBAAkB,qBAY9B,CAAA;QAED,IAAY,YAEX;QAFD,WAAY,YAAY;YACpB,iDAAK,CAAA;YAAE,qDAAO,CAAA;QAClB,CAAC,EAFW,YAAY,GAAZ,iBAAY,KAAZ,iBAAY,QAEvB;QAED,IAAY,WAEX;QAFD,WAAY,WAAW;YACnB,iDAAM,CAAA;YAAE,+CAAK,CAAA;YAAE,mDAAO,CAAA;QAC1B,CAAC,EAFW,WAAW,GAAX,gBAAW,KAAX,gBAAW,QAEtB;QAED,IAAY,UAEX;QAFD,WAAY,UAAU;YAClB,iDAAO,CAAA;YAAE,6CAAK,CAAA;YAAE,uDAAU,CAAA;QAC9B,CAAC,EAFW,UAAU,GAAV,eAAU,KAAV,eAAU,QAErB;IACL,CAAC,EA1BoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA0BxB;AAAD,CAAC,EA1BS,UAAU,KAAV,UAAU,QA0BnB;AC1BD,IAAU,UAAU,CAuhBnB;AAvhBD,WAAU,UAAU;IAAC,IAAA,IAAI,CAuhBxB;IAvhBoB,WAAA,IAAI;QACrB;YAgBI,kBAAa,IAAkB;gBAR/B,iBAAY,GAAG,IAAI,KAAK,EAAa,CAAC;gBACtC,qBAAgB,GAAG,IAAI,KAAK,EAAa,CAAC;gBAG1C,SAAI,GAAG,CAAC,CAAC;gBACT,WAAM,GAAG,CAAC,CAAC;gBAAC,WAAM,GAAG,CAAC,CAAC;gBACvB,MAAC,GAAG,CAAC,CAAC;gBAAC,MAAC,GAAG,CAAC,CAAC;gBAGT,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBAEjB,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;gBAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACxC,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,IAAI,SAAM,CAAC;oBACf,IAAI,QAAQ,CAAC,MAAM,IAAI,IAAI;wBACvB,IAAI,GAAG,IAAI,KAAA,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;yBACrC;wBACD,IAAI,QAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBAC/C,IAAI,GAAG,IAAI,KAAA,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAM,CAAC,CAAC;wBACxC,QAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAC9B;oBACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACzB;gBAED,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;gBAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,EAAQ,CAAC;gBACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACxC,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAC/C,IAAI,IAAI,GAAG,IAAI,KAAA,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;oBACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC7B;gBAED,IAAI,CAAC,aAAa,GAAG,IAAI,KAAK,EAAgB,CAAC;gBAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAChD,IAAI,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBAC7C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,KAAA,YAAY,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC;iBACrE;gBAED,IAAI,CAAC,oBAAoB,GAAG,IAAI,KAAK,EAAuB,CAAC;gBAC7D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvD,IAAI,uBAAuB,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;oBAC3D,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,KAAA,mBAAmB,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC,CAAC;iBAC1F;gBAED,IAAI,CAAC,eAAe,GAAG,IAAI,KAAK,EAAkB,CAAC;gBACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAClD,IAAI,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;oBACjD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,KAAA,cAAc,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC;iBAC3E;gBAED,IAAI,CAAC,KAAK,GAAG,IAAI,KAAA,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC;YAED,8BAAW,GAAX;gBACI,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;gBACpC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;gBAEjC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;oBACrC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;iBAC9B;gBAED,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;oBACnB,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;oBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;wBACpD,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;wBAC1C,GAAG;4BACC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;4BACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;4BACnB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;yBACtB,QAAQ,IAAI,IAAI,IAAI,EAAE;qBAC1B;iBACJ;gBAGD,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBACvC,IAAI,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;gBACrD,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;gBAC3C,IAAI,OAAO,GAAG,aAAa,CAAC,MAAM,EAAE,cAAc,GAAG,oBAAoB,CAAC,MAAM,EAAE,SAAS,GAAG,eAAe,CAAC,MAAM,CAAC;gBACrH,IAAI,eAAe,GAAG,OAAO,GAAG,cAAc,GAAG,SAAS,CAAC;gBAE3D,KAAK,EACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;oBACtC,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,OAAO,EAAE,EAAE,EAAE,EAAE;wBACjC,IAAI,UAAU,GAAG,aAAa,CAAC,EAAE,CAAC,CAAC;wBACnC,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE;4BAC5B,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;4BAClC,SAAS,KAAK,CAAC;yBAClB;qBACJ;oBACD,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,cAAc,EAAE,EAAE,EAAE,EAAE;wBACxC,IAAI,UAAU,GAAG,oBAAoB,CAAC,EAAE,CAAC,CAAC;wBAC1C,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE;4BAC5B,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;4BACzC,SAAS,KAAK,CAAC;yBAClB;qBACJ;oBACD,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE,EAAE;wBACnC,IAAI,UAAU,GAAG,eAAe,CAAC,EAAE,CAAC,CAAC;wBACrC,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE;4BAC5B,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;4BACpC,SAAS,KAAK,CAAC;yBAClB;qBACJ;iBACJ;gBAEL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBACxC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC;YAED,mCAAgB,GAAhB,UAAkB,UAAwB;gBACtC,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,KAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC3K,IAAI,CAAC,UAAU,CAAC,MAAM;oBAAE,OAAO;gBAE/B,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;gBAC/B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAEtB,IAAI,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC;gBACnC,IAAI,MAAM,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAEtB,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oBACxB,IAAI,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBAChD,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;wBAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACnF;gBAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAEnC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAChC,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;YACtD,CAAC;YAED,qCAAkB,GAAlB,UAAoB,UAA0B;gBAC1C,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,KAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChL,IAAI,CAAC,UAAU,CAAC,MAAM;oBAAE,OAAO;gBAE/B,IAAI,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC;gBAC7B,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;gBAChC,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;gBACzB,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI;oBAAE,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;gBACzF,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI;oBACnE,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;gBAClF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBAClD,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;gBAE/E,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;gBACtC,IAAI,UAAU,YAAY,KAAA,cAAc;oBAAE,IAAI,CAAC,gCAAgC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBAEtG,IAAI,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC;gBACnC,IAAI,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC;gBACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE;oBAC9B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBAElC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAEnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE;oBAC9B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE;oBAC9B,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;YACrC,CAAC;YAED,0CAAuB,GAAvB,UAAyB,UAA+B;gBACpD,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,KAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC3K,IAAI,CAAC,UAAU,CAAC,MAAM;oBAAE,OAAO;gBAE/B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBAEjC,IAAI,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC;gBACnC,IAAI,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC;gBACnC,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE;oBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;wBAChC,IAAI,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;wBAC3B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBAC5B,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;4BAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACnF;iBACJ;qBAAM;oBACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;wBAChC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;qBACjC;iBACJ;gBAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAEnC,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE;oBACjC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAC7C,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE;oBACjC,WAAW,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;YACtC,CAAC;YAED,+CAA4B,GAA5B,UAA8B,IAAU,EAAE,SAAiB,EAAE,QAAc;gBACvE,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC9C,IAAI,CAAC,WAAW;oBAAE,OAAO;gBACzB,KAAK,IAAI,GAAG,IAAI,WAAW,EAAE;oBACzB,IAAI,CAAC,gCAAgC,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;iBACrE;YACL,CAAC;YAED,mDAAgC,GAAhC,UAAkC,UAAsB,EAAE,QAAc;gBACpE,IAAI,CAAC,CAAC,UAAU,YAAY,KAAA,cAAc,CAAC;oBAAE,OAAO;gBACpD,IAAI,SAAS,GAAoB,UAAW,CAAC,KAAK,CAAC;gBACnD,IAAI,SAAS,IAAI,IAAI;oBACjB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;qBACvB;oBACD,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,IAAI,CAAC,GAAG,CAAC,CAAC;oBACV,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE;wBACzB,IAAI,SAAS,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;wBAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;4BACpC,IAAI,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;4BAC7B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;yBACnC;qBACJ;iBACJ;YACL,CAAC;YAED,2BAAQ,GAAR,UAAU,IAAU;gBAChB,IAAI,IAAI,CAAC,MAAM;oBAAE,OAAO;gBACxB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,MAAM,IAAI,IAAI;oBAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC;YAED,4BAAS,GAAT,UAAW,KAAkB;gBACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,IAAI,CAAC,MAAM;wBAAE,SAAS;oBAC3B,IAAI,IAAI,CAAC,MAAM;wBAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAC/C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;iBACvB;YACL,CAAC;YAGD,uCAAoB,GAApB;gBACI,IAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACrD,IAAI,IAAI,GAAG,gBAAgB,CAAC,CAAC,CAAS,CAAC;oBACvC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;oBACjB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;oBACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC5B;gBACD,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;gBACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBAC9C,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;YAChC,CAAC;YAGD,iCAAc,GAAd;gBACI,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC3B,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC/B,CAAC;YAGD,sCAAmB,GAAnB;gBACI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBACxC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;gBAE9B,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAClD,IAAI,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;oBAClC,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;oBACrC,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;oBAC/C,UAAU,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC;oBACzD,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;oBAC/C,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;iBAChD;gBAED,IAAI,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;gBACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACzD,IAAI,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;oBACzC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;oBAC3B,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBACtC,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;oBAC5C,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACpC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;iBACvC;gBAED,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;gBAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpD,IAAI,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;oBACpC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;oBAC3B,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACpC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBAClC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBACtC,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;iBAC/C;YACL,CAAC;YAED,sCAAmB,GAAnB;gBACI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAA,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC3D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBACxC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;YAClC,CAAC;YAGD,8BAAW,GAAX;gBACI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBACxC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;YAGD,2BAAQ,GAAR,UAAU,QAAgB;gBACtB,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ;wBAAE,OAAO,IAAI,CAAC;iBAC/C;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAGD,gCAAa,GAAb,UAAe,QAAgB;gBAC3B,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBACxC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ;wBAAE,OAAO,CAAC,CAAC;gBACjD,OAAO,CAAC,CAAC,CAAC;YACd,CAAC;YAGD,2BAAQ,GAAR,UAAU,QAAgB;gBACtB,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ;wBAAE,OAAO,IAAI,CAAC;iBAC/C;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAGD,gCAAa,GAAb,UAAe,QAAgB;gBAC3B,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBACxC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ;wBAAE,OAAO,CAAC,CAAC;gBACjD,OAAO,CAAC,CAAC,CAAC;YACd,CAAC;YAID,gCAAa,GAAb,UAAe,QAAgB;gBAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACxC,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;gBACjE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACvB,CAAC;YAMD,0BAAO,GAAP,UAAS,OAAa;gBAClB,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI;oBAAE,OAAO;gBACjC,IAAI,OAAO,IAAI,IAAI,EAAE;oBACjB,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI;wBACjB,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;yBAClC;wBACD,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;4BAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;4BACpB,IAAI,MAAI,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;4BACpC,IAAI,MAAI,IAAI,IAAI,EAAE;gCACd,IAAI,UAAU,GAAe,OAAO,CAAC,aAAa,CAAC,CAAC,EAAE,MAAI,CAAC,CAAC;gCAC5D,IAAI,UAAU,IAAI,IAAI;oCAAE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;6BAC1D;yBACJ;qBACJ;iBACJ;gBACD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;gBACpB,IAAI,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC;YAGD,sCAAmB,GAAnB,UAAqB,QAAgB,EAAE,cAAsB;gBACzD,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,CAAC;YACjF,CAAC;YAGD,gCAAa,GAAb,UAAe,SAAiB,EAAE,cAAsB;gBACpD,IAAI,cAAc,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBAC9E,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;oBACnB,IAAI,UAAU,GAAe,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;oBAChF,IAAI,UAAU,IAAI,IAAI;wBAAE,OAAO,UAAU,CAAC;iBAC7C;gBACD,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI;oBAAE,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;gBACzG,OAAO,IAAI,CAAC;YAChB,CAAC;YAGD,gCAAa,GAAb,UAAe,QAAgB,EAAE,cAAuB;gBACpD,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,EAAE;wBAC5B,IAAI,UAAU,GAAe,IAAI,CAAC;wBAClC,IAAI,cAAc,IAAI,IAAI,EAAE;4BACxB,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;4BACnD,IAAI,UAAU,IAAI,IAAI;gCAClB,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,cAAc,GAAG,cAAc,GAAG,QAAQ,CAAC,CAAC;yBAC9F;wBACD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;wBAC/B,OAAO;qBACV;iBACJ;gBACD,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;YACnD,CAAC;YAGD,mCAAgB,GAAhB,UAAkB,cAAsB;gBACpC,IAAI,cAAc,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBAC9E,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAClD,IAAI,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;oBACpC,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,IAAI,cAAc;wBAAE,OAAO,YAAY,CAAC;iBACrE;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAGD,0CAAuB,GAAvB,UAAyB,cAAsB;gBAC3C,IAAI,cAAc,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBAC9E,IAAI,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;gBACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACzD,IAAI,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;oBACzC,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,cAAc;wBAAE,OAAO,UAAU,CAAC;iBACjE;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAGD,qCAAkB,GAAlB,UAAoB,cAAsB;gBACtC,IAAI,cAAc,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBAC9E,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;gBAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpD,IAAI,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;oBACpC,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,cAAc;wBAAE,OAAO,UAAU,CAAC;iBACjE;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAMD,4BAAS,GAAT,UAAW,MAAe,EAAE,IAAa,EAAE,IAA0C;gBAA1C,qBAAA,EAAA,WAA0B,KAAK,CAAS,CAAC,CAAC;gBACjF,IAAI,MAAM,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;gBAC9D,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;gBACvI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC9C,IAAI,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;wBAAE,SAAS;oBAChC,IAAI,cAAc,GAAG,CAAC,CAAC;oBACvB,IAAI,QAAQ,GAAsB,IAAI,CAAC;oBACvC,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;oBACtC,IAAI,UAAU,YAAY,KAAA,gBAAgB,EAAE;wBACxC,cAAc,GAAG,CAAC,CAAC;wBACnB,QAAQ,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;wBACpC,UAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;qBAClF;yBAAM,IAAI,UAAU,YAAY,KAAA,cAAc,EAAE;wBAC7C,IAAI,IAAI,GAAoB,UAAW,CAAC;wBACxC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;wBAC1C,QAAQ,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;wBACvD,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,EAAE,cAAc,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;qBACtE;oBACD,IAAI,QAAQ,IAAI,IAAI,EAAE;wBAClB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE;4BACrD,IAAI,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BAC3C,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;4BACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;4BACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;4BACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;yBAC5B;qBACJ;iBACJ;gBACD,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,CAAC;YACvC,CAAC;YAED,yBAAM,GAAN,UAAQ,KAAa;gBACjB,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC;YACvB,CAAC;YAED,sBAAI,2BAAK;qBAAT;oBACI,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;gBAC7B,CAAC;qBAED,UAAU,KAAc;oBACpB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE;wBAC9B,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACnC,OAAO,CAAC,IAAI,CAAC,4FAA4F,CAAC,CAAC;qBAC9G;oBACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBACrC,CAAC;;;eARA;YAUD,sBAAI,2BAAK;qBAAT;oBACI,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;gBAC7B,CAAC;qBAED,UAAU,KAAc;oBACpB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE;wBAC9B,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACnC,OAAO,CAAC,IAAI,CAAC,4FAA4F,CAAC,CAAC;qBAC9G;oBACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBACrC,CAAC;;;eARA;YAUc,2BAAkB,GAAY,KAAK,CAAC;YACvD,eAAC;SAAA,AArhBD,IAqhBC;QArhBY,aAAQ,WAqhBpB,CAAA;IACL,CAAC,EAvhBoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAuhBxB;AAAD,CAAC,EAvhBS,UAAU,KAAV,UAAU,QAuhBnB;ACzhBD,IAAU,UAAU,CAi2BnB;AAj2BD,WAAU,UAAU;IAAC,IAAA,IAAI,CAi2BxB;IAj2BoB,WAAA,IAAI;QACxB;YA6BC,wBAAa,gBAAkC;gBAH/C,UAAK,GAAG,CAAC,CAAC;gBACF,iBAAY,GAAG,IAAI,KAAK,EAAc,CAAC;gBAG9C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YAC1C,CAAC;YAED,yCAAgB,GAAhB,UAAkB,MAAkB;gBACnC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBAEvB,IAAI,YAAY,GAAG,IAAI,KAAA,YAAY,EAAE,CAAC;gBACtC,YAAY,CAAC,IAAI,GAAG,EAAE,CAAC;gBAEvB,IAAI,KAAK,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC;gBAEpC,YAAY,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;gBACvC,YAAY,CAAC,OAAO,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;gBACjC,IAAI,YAAY,CAAC,OAAO,KAAK,QAAQ,EACrC;oBACI,IAAI,KAAK,GAAG,+FAA+F,CAAC;oBAC5G,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBACxB;gBACV,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;gBACnC,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;gBACnC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;gBACvC,YAAY,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;gBAExC,IAAI,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;gBACvC,IAAI,YAAY,EAAE;oBACjB,YAAY,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAErC,YAAY,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;oBAC7C,YAAY,CAAC,SAAS,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;iBAC5C;gBAED,IAAI,CAAC,GAAG,CAAC,CAAC;gBAEV,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBACzB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;gBAGxC,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC3B,IAAI,MAAI,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;oBAC9B,IAAI,QAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACrE,IAAI,IAAI,GAAG,IAAI,KAAA,QAAQ,CAAC,CAAC,EAAE,MAAI,EAAE,QAAM,CAAC,CAAC;oBACzC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAClC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;oBACnC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;oBACnC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAChC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAChC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAChC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAChC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;oBACxC,IAAI,CAAC,aAAa,GAAG,cAAc,CAAC,mBAAmB,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC7E,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACxC,IAAI,YAAY;wBAAE,KAAA,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oBACvE,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC9B;gBAGD,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC3B,IAAI,QAAQ,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;oBAClC,IAAI,QAAQ,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACvD,IAAI,IAAI,GAAG,IAAI,KAAA,QAAQ,CAAC,CAAC,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBAC/C,KAAA,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oBAErD,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAClC,IAAI,SAAS,IAAI,CAAC,CAAC;wBAAE,KAAA,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,KAAA,KAAK,EAAE,EAAE,SAAS,CAAC,CAAC;oBAElF,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;oBAC5C,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACrE,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC9B;gBAGD,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,SAAA,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,IAAI,KAAA,gBAAgB,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;oBACpD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACxC,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACzB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE;wBAC7B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC1D,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtD,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAC7B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;oBAC1C,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;oBACtC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACpC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACnC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACnC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACtC;gBAGD,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,SAAA,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,IAAI,KAAA,uBAAuB,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;oBAC3D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACxC,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACzB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE;wBAC7B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC1D,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACjC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACpC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACxC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;oBACzC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;oBACzC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACtC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACtC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACtC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACnC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACtC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAClC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAClC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC7C;gBAGD,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,SAAA,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC/B,IAAI,IAAI,GAAG,IAAI,KAAA,kBAAkB,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;oBACtD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACxC,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACzB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE;wBAC7B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC1D,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtD,IAAI,CAAC,YAAY,GAAG,cAAc,CAAC,kBAAkB,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC3E,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACzE,IAAI,CAAC,UAAU,GAAG,cAAc,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACvE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACxC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBAClC,IAAI,IAAI,CAAC,YAAY,IAAI,KAAA,YAAY,CAAC,KAAK;wBAAE,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC;oBACpE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACjC,IAAI,IAAI,CAAC,WAAW,IAAI,KAAA,WAAW,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,IAAI,KAAA,WAAW,CAAC,KAAK;wBAAE,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;oBAC3G,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACnC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACtC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACxC;gBAGD,IAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;gBACzE,IAAI,WAAW,IAAI,IAAI,EAAE;oBACxB,YAAY,CAAC,WAAW,GAAG,WAAW,CAAC;oBACvC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBACrC;gBAGD;oBACC,IAAI,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC;oBAClC,KAAA,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACpE,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAChB,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;iBACjF;gBAGD,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;gBAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC3B,IAAI,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACtC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBACvG,IAAI,IAAI,IAAI,IAAI;wBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;oBACxE,IAAI,QAAM,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;oBACzE,IAAI,QAAM,IAAI,IAAI;wBAAE,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;oBACnF,UAAU,CAAC,IAAI,CAAC,gBAAgB,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,QAA0B,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC;oBAC3G,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,QAAwB,CAAC,CAAC;iBAExD;gBACD,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;gBAG7B,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC3B,IAAI,IAAI,GAAG,IAAI,KAAA,SAAS,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;oBAChD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBACrC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oBACpC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;oBACtC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;oBACpC,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;wBAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAChC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;qBACjC;oBACD,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC/B;gBAGD,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBACzB,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,UAAU,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC;gBAC3F,OAAO,YAAY,CAAC;YACrB,CAAC;YAEO,iCAAQ,GAAhB,UAAkB,KAAkB,EAAE,YAA0B,EAAE,WAAoB,EAAE,YAAqB;gBACnG,IAAI,IAAI,GAAG,IAAI,CAAC;gBAChB,IAAI,SAAS,GAAG,CAAC,CAAC;gBAElB,IAAI,WAAW,EAAE;oBACb,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;oBAC/B,IAAI,SAAS,IAAI,CAAC;wBAAE,OAAO,IAAI,CAAC;oBAChC,IAAI,GAAG,IAAI,KAAA,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC9B;qBAAM;oBACH,IAAI,GAAG,IAAI,KAAA,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;oBACvC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAC7C,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBAE5D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAC/C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAC/C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAClF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAC/C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAE7E,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACnC;gBAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;oBAChC,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACpC,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;wBACtD,IAAI,MAAI,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;wBACjC,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,MAAI,EAAE,YAAY,CAAC,CAAC;wBAC/F,IAAI,UAAU,IAAI,IAAI;4BAAE,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,MAAI,EAAE,UAAU,CAAC,CAAC;qBAC3E;iBACJ;gBACD,OAAO,IAAI,CAAC;YACtB,CAAC;YAEO,uCAAc,GAAtB,UAAuB,KAAkB,EAAE,YAA0B,EAAE,IAAU,EAAE,SAAiB,EAAE,cAAsB,EAAE,YAAqB;gBAClJ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBAEvB,IAAI,IAAI,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;gBACjC,IAAI,IAAI,IAAI,IAAI;oBAAE,IAAI,GAAG,cAAc,CAAC;gBAExC,IAAI,SAAS,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACjC,IAAI,IAAI,GAAG,cAAc,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;gBAC1D,QAAQ,IAAI,EAAE;oBACd,KAAK,KAAA,cAAc,CAAC,MAAM,CAAC,CAAC;wBAC3B,IAAI,IAAI,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;wBACjC,IAAI,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBACjC,IAAI,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC1B,IAAI,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC1B,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC/B,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC/B,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC9B,IAAI,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC/B,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAE9B,IAAI,IAAI,IAAI,IAAI;4BAAE,IAAI,GAAG,IAAI,CAAC;wBAC9B,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;wBACzE,IAAI,MAAM,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAChC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;wBACnB,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBACrB,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBACrB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;wBACvB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;wBACvB,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;wBAC3B,MAAM,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;wBAC7B,MAAM,CAAC,MAAM,GAAG,MAAM,GAAG,KAAK,CAAC;wBAC/B,KAAA,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;wBAE3C,OAAO,MAAM,CAAC;qBACd;oBACD,KAAK,KAAA,cAAc,CAAC,WAAW,CAAC,CAAC;wBAChC,IAAI,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACtC,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;wBACrD,IAAI,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;wBAEjD,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBACrE,IAAI,GAAG,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAC7B,GAAG,CAAC,mBAAmB,GAAG,WAAW,IAAI,CAAC,CAAC;wBAC3C,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;wBACjC,GAAG,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBAC3B,IAAI,YAAY;4BAAE,KAAA,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;wBAC1D,OAAO,GAAG,CAAC;qBACX;oBACD,KAAK,KAAA,cAAc,CAAC,IAAI,CAAC,CAAC;wBACzB,IAAI,IAAI,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;wBACjC,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC9B,IAAI,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACtC,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC1D,IAAI,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;wBAC3C,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;wBACrD,IAAI,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACrC,IAAI,KAAK,GAAG,IAAI,CAAC;wBACjB,IAAI,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC;wBAC1B,IAAI,YAAY,EAAE;4BACjB,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;4BACnC,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;4BAC1B,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;yBAC3B;wBAED,IAAI,IAAI,IAAI,IAAI;4BAAE,IAAI,GAAG,IAAI,CAAC;wBAC9B,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;wBACrE,IAAI,IAAI,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;wBACjB,KAAA,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;wBACzC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;wBAClC,IAAI,CAAC,mBAAmB,GAAG,WAAW,IAAI,CAAC,CAAC;wBAC5C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;wBAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,CAAC,GAAG,CAAC,CAAC;wBAEvC,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,CAAC,CAAC;wBAClC,IAAI,YAAY,EAAE;4BACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;4BACnB,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;4BAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,GAAG,KAAK,CAAC;yBAC7B;wBACD,OAAO,IAAI,CAAC;qBACZ;oBACD,KAAK,KAAA,cAAc,CAAC,UAAU,CAAC,CAAC;wBAC/B,IAAI,IAAI,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;wBACjC,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC9B,IAAI,QAAQ,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;wBACrC,IAAI,QAAM,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;wBACnC,IAAI,aAAa,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;wBACxC,IAAI,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC;wBAC1B,IAAI,YAAY,EAAE;4BACjB,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;4BAC1B,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;yBAC3B;wBAED,IAAI,IAAI,IAAI,IAAI;4BAAE,IAAI,GAAG,IAAI,CAAC;wBAC9B,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;wBACrE,IAAI,IAAI,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;wBACjB,KAAA,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;wBACzC,IAAI,YAAY,EAAE;4BACjB,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;4BAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,GAAG,KAAK,CAAC;yBAC7B;wBACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAM,EAAE,aAAa,CAAC,CAAC,CAAC;wBACzF,OAAO,IAAI,CAAC;qBACZ;oBACD,KAAK,KAAA,cAAc,CAAC,IAAI,CAAC,CAAC;wBACzB,IAAI,QAAM,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;wBACjC,IAAI,aAAa,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;wBACxC,IAAI,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACtC,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;wBACrD,IAAI,OAAO,GAAG,KAAA,KAAK,CAAC,QAAQ,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;wBACjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;4BAC7C,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;wBACxC,IAAI,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;wBAEjD,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAC/D,IAAI,IAAI,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAC9B,IAAI,CAAC,MAAM,GAAG,QAAM,CAAC;wBACrB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;wBACnC,IAAI,CAAC,mBAAmB,GAAG,WAAW,IAAI,CAAC,CAAC;wBAC5C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;wBAClC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBAC5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;wBACvB,IAAI,YAAY;4BAAE,KAAA,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;wBAC3D,OAAO,IAAI,CAAC;qBACZ;oBACD,KAAK,KAAA,cAAc,CAAC,KAAK,CAAC,CAAC;wBAC1B,IAAI,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBACjC,IAAI,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC1B,IAAI,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC1B,IAAI,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;wBAEjD,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBACjE,IAAI,KAAK,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAC/B,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBACpB,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;wBACpB,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;wBAC1B,IAAI,YAAY;4BAAE,KAAA,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;wBAC5D,OAAO,KAAK,CAAC;qBACb;oBACD,KAAK,KAAA,cAAc,CAAC,QAAQ,CAAC,CAAC;wBAC7B,IAAI,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACvC,IAAI,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACtC,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;wBACrD,IAAI,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;wBAEjD,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBACnE,IAAI,IAAI,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAC9B,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;wBAChD,IAAI,CAAC,mBAAmB,GAAG,WAAW,IAAI,CAAC,CAAC;wBAC5C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;wBAClC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;wBAC5B,IAAI,YAAY;4BAAE,KAAA,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;wBAC3D,OAAO,IAAI,CAAC;qBACZ;iBACA;gBACD,OAAO,IAAI,CAAC;YACb,CAAC;YAEO,qCAAY,GAApB,UAAsB,KAAkB,EAAE,WAAmB;gBAC5D,IAAI,cAAc,GAAG,WAAW,IAAI,CAAC,CAAC;gBACtC,IAAI,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;gBAC9B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE;oBACzB,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;oBACtE,OAAO,QAAQ,CAAC;iBAChB;gBACD,IAAI,OAAO,GAAG,IAAI,KAAK,EAAU,CAAC;gBAClC,IAAI,UAAU,GAAG,IAAI,KAAK,EAAU,CAAC;gBACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;oBACrC,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACpC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC3B,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE,EAAE;wBACtC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;wBACrC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,CAAC;wBACxC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,CAAC;wBACxC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;qBAChC;iBACD;gBACD,QAAQ,CAAC,QAAQ,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBAChD,QAAQ,CAAC,KAAK,GAAG,UAAU,CAAC;gBAC5B,OAAO,QAAQ,CAAC;YACjB,CAAC;YAEO,uCAAc,GAAtB,UAAwB,KAAkB,EAAE,CAAS,EAAE,KAAa;gBACnE,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,CAAC,CAAC,CAAC;gBACjC,IAAI,KAAK,IAAI,CAAC,EAAE;oBACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACzB,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;iBAC9B;qBAAM;oBACN,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBACzB,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;iBACtC;gBACD,OAAO,KAAK,CAAC;YACd,CAAC;YAEO,uCAAc,GAAtB,UAAwB,KAAkB;gBACzC,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC5B,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,CAAC,CAAC,CAAC;gBACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBACzB,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;gBAC9B,OAAO,KAAK,CAAC;YACd,CAAC;YAEO,sCAAa,GAArB,UAAuB,KAAkB,EAAE,IAAY,EAAE,YAA0B;gBAClF,IAAI,SAAS,GAAG,IAAI,KAAK,EAAY,CAAC;gBACtC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAI,QAAQ,GAAG,CAAC,CAAC;gBACjB,IAAI,UAAU,GAAG,IAAI,KAAA,KAAK,EAAE,CAAC;gBAC7B,IAAI,UAAU,GAAG,IAAI,KAAA,KAAK,EAAE,CAAC;gBAG7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpD,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACpC,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;wBACzD,IAAI,YAAY,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;wBACpC,IAAI,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACrC,QAAQ,YAAY,EAAE;4BACtB,KAAK,cAAc,CAAC,eAAe,CAAC,CAAC;gCACpC,IAAI,QAAQ,GAAG,IAAI,KAAA,kBAAkB,CAAC,UAAU,CAAC,CAAC;gCAClD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAC/B,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,EAAE,UAAU,EAAE;oCAC7D,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;gCACzE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;gCAC/D,MAAM;6BACN;4BACD,KAAK,cAAc,CAAC,UAAU,CAAC,CAAC;gCAC/B,IAAI,QAAQ,GAAG,IAAI,KAAA,aAAa,CAAC,UAAU,CAAC,CAAC;gCAC7C,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAC/B,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,EAAE,UAAU,EAAE,EAAE;oCAC/D,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oCAC7B,KAAA,KAAK,CAAC,eAAe,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oCACrD,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;oCAC5F,IAAI,UAAU,GAAG,UAAU,GAAG,CAAC;wCAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;iCAC7E;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,KAAA,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;gCACzF,MAAM;6BACN;4BACD,KAAK,cAAc,CAAC,cAAc,CAAC,CAAC;gCACnC,IAAI,QAAQ,GAAG,IAAI,KAAA,gBAAgB,CAAC,UAAU,CAAC,CAAC;gCAChD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAC/B,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,EAAE,UAAU,EAAE,EAAE;oCAC/D,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;oCAC7B,KAAA,KAAK,CAAC,eAAe,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oCACrD,KAAA,KAAK,CAAC,aAAa,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oCACnD,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EACvG,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;oCAC7B,IAAI,UAAU,GAAG,UAAU,GAAG,CAAC;wCAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;iCAC7E;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,KAAA,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;gCAC5F,MAAM;6BACN;yBACA;qBACD;iBACD;gBAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpD,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACpC,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;wBACzD,IAAI,YAAY,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;wBACpC,IAAI,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACrC,QAAQ,YAAY,EAAE;4BACtB,KAAK,cAAc,CAAC,WAAW,CAAC,CAAC;gCAChC,IAAI,QAAQ,GAAG,IAAI,KAAA,cAAc,CAAC,UAAU,CAAC,CAAC;gCAC9C,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAC/B,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,EAAE,UAAU,EAAE,EAAE;oCAC/D,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oCACpE,IAAI,UAAU,GAAG,UAAU,GAAG,CAAC;wCAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;iCAC7E;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,KAAA,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;gCAC1F,MAAM;6BACN;4BACD,KAAK,cAAc,CAAC,cAAc,CAAC;4BACnC,KAAK,cAAc,CAAC,UAAU,CAAC;4BAC/B,KAAK,cAAc,CAAC,UAAU,CAAC,CAAC;gCAC/B,IAAI,QAAQ,SAAA,CAAC;gCACb,IAAI,aAAa,GAAG,CAAC,CAAC;gCACtB,IAAI,YAAY,IAAI,cAAc,CAAC,UAAU;oCAC5C,QAAQ,GAAG,IAAI,KAAA,aAAa,CAAC,UAAU,CAAC,CAAC;qCACrC,IAAI,YAAY,IAAI,cAAc,CAAC,UAAU;oCACjD,QAAQ,GAAG,IAAI,KAAA,aAAa,CAAC,UAAU,CAAC,CAAC;qCACrC;oCACJ,QAAQ,GAAG,IAAI,KAAA,iBAAiB,CAAC,UAAU,CAAC,CAAC;oCAC7C,aAAa,GAAG,KAAK,CAAC;iCACtB;gCACD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAC/B,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,EAAE,UAAU,EAAE,EAAE;oCAC/D,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,GAAG,aAAa,EACjF,KAAK,CAAC,SAAS,EAAE,GAAG,aAAa,CAAC,CAAC;oCACpC,IAAI,UAAU,GAAG,UAAU,GAAG,CAAC;wCAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;iCAC7E;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,KAAA,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;gCAC7F,MAAM;6BACN;yBACA;qBACD;iBACD;gBAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpD,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAChC,IAAI,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,QAAQ,GAAG,IAAI,KAAA,oBAAoB,CAAC,UAAU,CAAC,CAAC;oBACpD,QAAQ,CAAC,iBAAiB,GAAG,KAAK,CAAC;oBACnC,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,EAAE,UAAU,EAAE,EAAE;wBAC/D,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,WAAW,EAAE,EACnI,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;wBACtB,IAAI,UAAU,GAAG,UAAU,GAAG,CAAC;4BAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;qBAC7E;oBACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,KAAA,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;iBAChG;gBAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpD,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAChC,IAAI,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,QAAQ,GAAG,IAAI,KAAA,2BAA2B,CAAC,UAAU,CAAC,CAAC;oBAC3D,QAAQ,CAAC,wBAAwB,GAAG,KAAK,CAAC;oBAC1C,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,EAAE,UAAU,EAAE,EAAE;wBAC/D,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,EACvG,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;wBACpB,IAAI,UAAU,GAAG,UAAU,GAAG,CAAC;4BAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;qBAC7E;oBACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,KAAA,2BAA2B,CAAC,OAAO,CAAC,CAAC,CAAC;iBACvG;gBAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpD,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAChC,IAAI,IAAI,GAAG,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;oBAC/C,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;wBACzD,IAAI,YAAY,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;wBACpC,IAAI,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACrC,QAAQ,YAAY,EAAE;4BACtB,KAAK,cAAc,CAAC,aAAa,CAAC;4BAClC,KAAK,cAAc,CAAC,YAAY,CAAC,CAAC;gCACjC,IAAI,QAAQ,SAAA,CAAC;gCACb,IAAI,aAAa,GAAG,CAAC,CAAC;gCACtB,IAAI,YAAY,IAAI,cAAc,CAAC,YAAY,EAAE;oCAChD,QAAQ,GAAG,IAAI,KAAA,6BAA6B,CAAC,UAAU,CAAC,CAAC;oCACzD,IAAI,IAAI,CAAC,WAAW,IAAI,KAAA,WAAW,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,IAAI,KAAA,WAAW,CAAC,KAAK;wCAAE,aAAa,GAAG,KAAK,CAAC;iCAC3G;qCAAM;oCACN,QAAQ,GAAG,IAAI,KAAA,8BAA8B,CAAC,UAAU,CAAC,CAAC;oCAC1D,IAAI,IAAI,CAAC,YAAY,IAAI,KAAA,YAAY,CAAC,KAAK;wCAAE,aAAa,GAAG,KAAK,CAAC;iCACnE;gCACD,QAAQ,CAAC,mBAAmB,GAAG,KAAK,CAAC;gCACrC,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,EAAE,UAAU,EAAE,EAAE;oCAC/D,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,GAAG,aAAa,CAAC,CAAC;oCACpF,IAAI,UAAU,GAAG,UAAU,GAAG,CAAC;wCAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;iCAC7E;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,KAAA,8BAA8B,CAAC,OAAO,CAAC,CAAC,CAAC;gCAC1G,MAAM;6BACN;4BACD,KAAK,cAAc,CAAC,QAAQ,CAAC,CAAC;gCAC7B,IAAI,QAAQ,GAAG,IAAI,KAAA,yBAAyB,CAAC,UAAU,CAAC,CAAC;gCACzD,QAAQ,CAAC,mBAAmB,GAAG,KAAK,CAAC;gCACrC,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,EAAE,UAAU,EAAE,EAAE;oCAC/D,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oCACvF,IAAI,UAAU,GAAG,UAAU,GAAG,CAAC;wCAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;iCAC7E;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,KAAA,yBAAyB,CAAC,OAAO,CAAC,CAAC,CAAC;gCACrG,MAAM;6BACN;yBACA;qBACD;iBACD;gBAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpD,IAAI,IAAI,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBACnD,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;wBACzD,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACpC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;4BAC9D,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,KAAK,CAAC,aAAa,EAAE,CAAqB,CAAC;4BAC1F,IAAI,QAAQ,GAAG,UAAU,CAAC,KAAK,IAAI,IAAI,CAAC;4BACxC,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;4BACnC,IAAI,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;4BAExE,IAAI,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;4BACrC,IAAI,QAAQ,GAAG,IAAI,KAAA,cAAc,CAAC,UAAU,CAAC,CAAC;4BAC9C,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;4BAC/B,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;4BAEjC,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,UAAU,EAAE,UAAU,EAAE,EAAE;gCAC/D,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;gCAC7B,IAAI,MAAM,SAAA,CAAC;gCACX,IAAI,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gCAC9B,IAAI,GAAG,IAAI,CAAC;oCACX,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,KAAA,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;qCAC7D;oCACJ,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;oCAC3C,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oCAChC,GAAG,IAAI,KAAK,CAAC;oCACb,IAAI,KAAK,IAAI,CAAC,EAAE;wCACf,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE;4CAC/B,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;qCAC/B;yCAAM;wCACN,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE;4CAC/B,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;qCACvC;oCACD,IAAI,CAAC,QAAQ,EAAE;wCACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;4CAC9C,MAAM,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;qCAC1B;iCACD;gCAED,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;gCAC5C,IAAI,UAAU,GAAG,UAAU,GAAG,CAAC;oCAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;6BAC7E;4BACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;yBAC/D;qBACD;iBACD;gBAGD,IAAI,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,cAAc,GAAG,CAAC,EAAE;oBACvB,IAAI,QAAQ,GAAG,IAAI,KAAA,iBAAiB,CAAC,cAAc,CAAC,CAAC;oBACrD,IAAI,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC;oBAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;wBACxC,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC7B,IAAI,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBACtC,IAAI,SAAS,GAAG,KAAA,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;wBAC7C,KAAK,IAAI,EAAE,GAAG,SAAS,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE;4BACzC,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;wBACpB,IAAI,SAAS,GAAG,KAAA,KAAK,CAAC,QAAQ,CAAC,SAAS,GAAG,WAAW,EAAE,CAAC,CAAC,CAAC;wBAC3D,IAAI,aAAa,GAAG,CAAC,EAAE,cAAc,GAAG,CAAC,CAAC;wBAC1C,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,WAAW,EAAE,EAAE,EAAE,EAAE;4BACxC,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;4BAEpC,OAAO,aAAa,IAAI,SAAS;gCAChC,SAAS,CAAC,cAAc,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;4BAE/C,SAAS,CAAC,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,aAAa,EAAE,CAAC;yBACjE;wBAED,OAAO,aAAa,GAAG,SAAS;4BAC/B,SAAS,CAAC,cAAc,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;wBAE/C,KAAK,IAAI,EAAE,GAAG,SAAS,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE;4BACzC,IAAI,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;gCAAE,SAAS,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,EAAE,cAAc,CAAC,CAAC;wBACtE,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;qBACtC;oBACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;iBACnE;gBAGD,IAAI,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACrC,IAAI,UAAU,GAAG,CAAC,EAAE;oBACnB,IAAI,QAAQ,GAAG,IAAI,KAAA,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;wBACpC,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBAC7B,IAAI,SAAS,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;wBACzD,IAAI,OAAK,GAAG,IAAI,KAAA,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;wBACvC,OAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;wBACtC,OAAK,CAAC,UAAU,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;wBACrC,OAAK,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC;wBACrF,IAAI,OAAK,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;4BACjC,OAAK,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;4BACjC,OAAK,CAAC,OAAO,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;yBAClC;wBACD,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAK,CAAC,CAAC;qBAC5B;oBACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC/D;gBAED,OAAO,IAAI,KAAA,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;YACjD,CAAC;YAEO,kCAAS,GAAjB,UAAmB,KAAkB,EAAE,UAAkB,EAAE,QAAuB;gBACjF,QAAQ,KAAK,CAAC,QAAQ,EAAE,EAAE;oBAC1B,KAAK,cAAc,CAAC,aAAa;wBAChC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;wBAChC,MAAM;oBACP,KAAK,cAAc,CAAC,YAAY;wBAC/B,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;wBAChH,MAAM;iBACN;YACF,CAAC;YAED,iCAAQ,GAAR,UAAU,QAAuB,EAAE,UAAkB,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW;gBACxG,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACnD,CAAC;YAhvBM,mCAAoB,GAAG,CAAE,CAAC,EAA4B,CAAC,EAAgC,CAAC,EAAyB,CAAC,EAA+B,CAAC,EAAyB,CAAC,EAA0B,CAAC,CAA6B,CAAC;YACrO,kCAAmB,GAAG,CAAC,KAAA,aAAa,CAAC,MAAM,EAAE,KAAA,aAAa,CAAC,eAAe,EAAE,KAAA,aAAa,CAAC,sBAAsB,EAAE,KAAA,aAAa,CAAC,OAAO,EAAE,KAAA,aAAa,CAAC,mBAAmB,CAAC,CAAC;YAC5K,iCAAkB,GAAG,CAAE,KAAA,YAAY,CAAC,KAAK,EAAE,KAAA,YAAY,CAAC,OAAO,CAAE,CAAC;YAClE,gCAAiB,GAAG,CAAE,KAAA,WAAW,CAAC,MAAM,EAAE,KAAA,WAAW,CAAC,KAAK,EAAE,KAAA,WAAW,CAAC,OAAO,CAAC,CAAC;YAClF,+BAAgB,GAAG,CAAE,KAAA,UAAU,CAAC,OAAO,EAAE,KAAA,UAAU,CAAC,KAAK,EAAE,KAAA,UAAU,CAAC,UAAU,CAAE,CAAC;YACnF,8BAAe,GAAG,CAAE,KAAA,SAAS,CAAC,MAAM,EAAE,KAAA,SAAS,CAAC,QAAQ,EAAE,KAAA,SAAS,CAAC,QAAQ,EAAE,KAAA,SAAS,CAAC,MAAM,CAAC,CAAC;YAEhG,0BAAW,GAAG,CAAC,CAAC;YAChB,6BAAc,GAAG,CAAC,CAAC;YACnB,yBAAU,GAAG,CAAC,CAAC;YACf,yBAAU,GAAG,CAAC,CAAC;YAEf,8BAAe,GAAG,CAAC,CAAC;YACpB,yBAAU,GAAG,CAAC,CAAC;YACf,6BAAc,GAAG,CAAC,CAAC;YAEnB,4BAAa,GAAG,CAAC,CAAC;YAClB,2BAAY,GAAG,CAAC,CAAC;YACjB,uBAAQ,GAAG,CAAC,CAAC;YAEb,2BAAY,GAAG,CAAC,CAAC;YACjB,4BAAa,GAAG,CAAC,CAAC;YAClB,2BAAY,GAAG,CAAC,CAAC;YA2tBzB,qBAAC;SAAA,AAlvBD,IAkvBC;QAlvBY,mBAAc,iBAkvB1B,CAAA;QAED;YACC,qBAAY,IAAgB,EAAS,OAA6B,EAAU,KAAiB,EAAU,MAAkC;gBAApG,wBAAA,EAAA,cAAc,KAAK,EAAU;gBAAU,sBAAA,EAAA,SAAiB;gBAAU,uBAAA,EAAA,aAAa,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;gBAApG,YAAO,GAAP,OAAO,CAAsB;gBAAU,UAAK,GAAL,KAAK,CAAY;gBAAU,WAAM,GAAN,MAAM,CAA4B;YAEzI,CAAC;YAED,8BAAQ,GAAR;gBACC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;YAC1C,CAAC;YAED,+BAAS,GAAT;gBACC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7C,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,OAAO,KAAK,CAAC;YACd,CAAC;YAED,+BAAS,GAAT;gBACE,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBAC5C,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,OAAO,KAAK,CAAC;YACf,CAAC;YAED,6BAAO,GAAP,UAAQ,gBAAyB;gBAChC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACxB,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE;oBACpB,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACpB,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC1B,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE;wBACpB,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;wBACpB,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;wBAC3B,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE;4BACpB,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;4BACpB,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;4BAC3B,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE;gCACpB,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gCACpB,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;6BAC3B;yBACD;qBACD;iBACD;gBACD,OAAO,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACrE,CAAC;YAED,mCAAa,GAAb;gBACC,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC/B,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACpD,CAAC;YAED,gCAAU,GAAV;gBACC,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACnC,QAAQ,SAAS,EAAE;oBACnB,KAAK,CAAC;wBACL,OAAO,IAAI,CAAC;oBACb,KAAK,CAAC;wBACL,OAAO,EAAE,CAAC;iBACV;gBACD,SAAS,EAAE,CAAC;gBACZ,IAAI,KAAK,GAAG,EAAE,CAAC;gBACf,IAAI,SAAS,GAAG,CAAC,CAAC;gBAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,GAAG;oBAC/B,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACxB,QAAQ,CAAC,IAAI,CAAC,EAAE;wBAChB,KAAK,EAAE,CAAC;wBACR,KAAK,EAAE;4BACN,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;4BACzE,CAAC,IAAI,CAAC,CAAC;4BACP,MAAM;wBACP,KAAK,EAAE;4BACN,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;4BAC1G,CAAC,IAAI,CAAC,CAAC;4BACP,MAAM;wBACP;4BACC,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;4BAChC,CAAC,EAAE,CAAC;qBACJ;iBACD;gBACD,OAAO,KAAK,CAAC;YACd,CAAC;YAED,+BAAS,GAAT;gBACC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC/C,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,OAAO,KAAK,CAAC;YACd,CAAC;YAED,iCAAW,GAAX;gBACC,OAAO,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC7B,CAAC;YACF,kBAAC;QAAD,CAAC,AAxFD,IAwFC;QAED;YAMC,oBAAa,IAAoB,EAAE,IAAY,EAAE,SAAiB,EAAE,MAAc,EAAE,aAAsB;gBACzG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACpC,CAAC;YACF,iBAAC;QAAD,CAAC,AAbD,IAaC;QAED;YACC,kBAAmB,KAA2B,EAAS,QAA6C;gBAAjF,sBAAA,EAAA,YAA2B;gBAAS,yBAAA,EAAA,eAA6C;gBAAjF,UAAK,GAAL,KAAK,CAAsB;gBAAS,aAAQ,GAAR,QAAQ,CAAqC;YAAI,CAAC;YAC1G,eAAC;QAAD,CAAC,AAFD,IAEC;IACF,CAAC,EAj2BoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAi2BxB;AAAD,CAAC,EAj2BS,UAAU,KAAV,UAAU,QAi2BnB;AC/1BD,IAAU,UAAU,CAgLnB;AAhLD,WAAU,UAAU;IAAC,IAAA,IAAI,CAgLxB;IAhLoB,WAAA,IAAI;QACrB;YAAA;gBACI,SAAI,GAAG,CAAC,CAAC;gBAAC,SAAI,GAAG,CAAC,CAAC;gBAAC,SAAI,GAAG,CAAC,CAAC;gBAAC,SAAI,GAAG,CAAC,CAAC;gBACvC,kBAAa,GAAG,IAAI,KAAK,EAAyB,CAAC;gBACnD,aAAQ,GAAG,IAAI,KAAK,EAAqB,CAAC;gBAClC,gBAAW,GAAG,IAAI,KAAA,IAAI,CAAoB;oBAC9C,OAAO,KAAA,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;YAwKP,CAAC;YAtKG,+BAAM,GAAN,UAAQ,QAAkB,EAAE,UAAmB;gBAC3C,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBACvC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;gBACnC,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;gBAC3B,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;gBAE7B,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC;gBACzB,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC9B,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;gBAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;oBAChC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;wBAAE,SAAS;oBAChC,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;oBACtC,IAAI,UAAU,YAAY,KAAA,qBAAqB,EAAE;wBAC7C,IAAI,WAAW,GAAG,UAAmC,CAAC;wBACtD,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAEhC,IAAI,OAAO,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;wBACnC,IAAI,OAAO,CAAC,MAAM,IAAI,WAAW,CAAC,mBAAmB,EAAE;4BACnD,OAAO,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;yBAClE;wBACD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBACvB,WAAW,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,EAAE,WAAW,CAAC,mBAAmB,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;qBAC7F;iBACJ;gBAED,IAAI,UAAU,EAAE;oBACZ,IAAI,CAAC,WAAW,EAAE,CAAC;iBACtB;qBAAM;oBACH,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;oBACrC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;oBACrC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;oBACrC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;iBACxC;YACL,CAAC;YAED,oCAAW,GAAX;gBACI,IAAI,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,IAAI,GAAG,MAAM,CAAC,iBAAiB,CAAC;gBACvI,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC7C,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC1B,IAAI,QAAQ,GAAG,OAAO,CAAC;oBACvB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE;wBACpD,IAAI,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;wBACrB,IAAI,CAAC,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;wBACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;wBACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;wBACzB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;qBAC5B;iBACJ;gBACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC;YAGD,0CAAiB,GAAjB,UAAmB,CAAS,EAAE,CAAS;gBACnC,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC;YAChF,CAAC;YAGD,8CAAqB,GAArB,UAAuB,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;gBACjE,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACrB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACrB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACrB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACrB,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC;oBACpH,OAAO,KAAK,CAAC;gBACjB,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC9B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gBAC7B,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI;oBAAE,OAAO,IAAI,CAAC;gBACtC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gBACzB,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI;oBAAE,OAAO,IAAI,CAAC;gBACtC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBAC7B,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI;oBAAE,OAAO,IAAI,CAAC;gBACtC,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBACzB,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI;oBAAE,OAAO,IAAI,CAAC;gBACtC,OAAO,KAAK,CAAC;YACjB,CAAC;YAGD,+CAAsB,GAAtB,UAAwB,MAAsB;gBAC1C,OAAO,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACpH,CAAC;YAID,sCAAa,GAAb,UAAe,CAAS,EAAE,CAAS;gBAC/B,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBAC3C,IAAI,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;wBAAE,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBACnF,OAAO,IAAI,CAAC;YAChB,CAAC;YAGD,6CAAoB,GAApB,UAAsB,OAA0B,EAAE,CAAS,EAAE,CAAS;gBAClE,IAAI,QAAQ,GAAG,OAAO,CAAC;gBACvB,IAAI,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;gBAExB,IAAI,SAAS,GAAG,EAAE,GAAG,CAAC,CAAC;gBACvB,IAAI,MAAM,GAAG,KAAK,CAAC;gBACnB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE;oBAC/B,IAAI,OAAO,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC/B,IAAI,KAAK,GAAG,QAAQ,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;oBACpC,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,OAAO,IAAI,CAAC,CAAC,EAAE;wBAC5D,IAAI,OAAO,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;wBAC3B,IAAI,OAAO,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;4BAAE,MAAM,GAAG,CAAC,MAAM,CAAC;qBAC3G;oBACD,SAAS,GAAG,EAAE,CAAC;iBAClB;gBACD,OAAO,MAAM,CAAC;YAClB,CAAC;YAKD,0CAAiB,GAAjB,UAAmB,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;gBAC7D,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBAC3C,IAAI,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;wBAAE,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBACjG,OAAO,IAAI,CAAC;YAChB,CAAC;YAGD,iDAAwB,GAAxB,UAA0B,OAA0B,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;gBAChG,IAAI,QAAQ,GAAG,OAAO,CAAC;gBACvB,IAAI,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;gBAExB,IAAI,OAAO,GAAG,EAAE,GAAG,EAAE,EAAE,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAC;gBAC1C,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;gBAC7B,IAAI,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBACjD,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE;oBAC/B,IAAI,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC7C,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;oBAC7B,IAAI,OAAO,GAAG,EAAE,GAAG,EAAE,EAAE,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAC;oBAC1C,IAAI,IAAI,GAAG,OAAO,GAAG,QAAQ,GAAG,QAAQ,GAAG,OAAO,CAAC;oBACnD,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,OAAO,GAAG,OAAO,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;oBACjD,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;wBAClG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;wBACnD,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;4BAAE,OAAO,IAAI,CAAC;qBACrH;oBACD,EAAE,GAAG,EAAE,CAAC;oBACR,EAAE,GAAG,EAAE,CAAC;iBACX;gBACD,OAAO,KAAK,CAAC;YACjB,CAAC;YAGD,mCAAU,GAAV,UAAY,WAAkC;gBAC1C,IAAI,WAAW,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;gBACxE,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;gBACpD,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrD,CAAC;YAED,iCAAQ,GAAR;gBACI,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACjC,CAAC;YAED,kCAAS,GAAT;gBACI,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACjC,CAAC;YACL,qBAAC;QAAD,CAAC,AA9KD,IA8KC;QA9KY,mBAAc,iBA8K1B,CAAA;IACL,CAAC,EAhLoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAgLxB;AAAD,CAAC,EAhLS,UAAU,KAAV,UAAU,QAgLnB;ACjLD,IAAU,UAAU,CAiTnB;AAjTD,WAAU,UAAU;IAAC,IAAA,IAAI,CAiTxB;IAjToB,WAAA,IAAI;QACxB;YAAA;gBACS,iBAAY,GAAG,IAAI,KAAA,YAAY,EAAE,CAAC;gBAClC,oBAAe,GAAG,IAAI,KAAK,EAAU,CAAC;gBACtC,eAAU,GAAG,IAAI,KAAK,EAAU,CAAC;gBACzC,oBAAe,GAAG,IAAI,KAAK,EAAU,CAAC;gBACtC,qBAAgB,GAAG,IAAI,KAAK,EAAU,CAAC;gBAC/B,YAAO,GAAG,IAAI,KAAK,EAAU,CAAC;YAySvC,CAAC;YApSA,oCAAS,GAAT,UAAW,IAAU,EAAE,IAAwB;gBAC9C,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI;oBAAE,OAAO,CAAC,CAAC;gBAC1C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;gBAE3B,IAAI,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC;gBACjC,IAAI,QAAQ,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtD,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;gBAC3C,gBAAgB,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;gBAChD,IAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC5I,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,GAAG,GAAC,EAAE,CAAC,EAAE,EAAE;oBACxD,IAAI,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBAClC,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;oBACxC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;oBACzB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;iBACzB;gBAED,OAAO,gBAAgB,CAAC,MAAM,CAAC;YAChC,CAAC;YAED,0CAAe,GAAf,UAAiB,IAAU;gBAC1B,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI;oBAAE,IAAI,CAAC,OAAO,EAAE,CAAC;YAC7F,CAAC;YAED,kCAAO,GAAP;gBACC,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI;oBAAE,OAAO;gBACxC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;gBAC3B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBAC7B,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;gBAChC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;gBACjC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;YACjC,CAAC;YAED,qCAAU,GAAV;gBACC,OAAO,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC;YACpC,CAAC;YAED,wCAAa,GAAb,UAAe,QAA2B,EAAE,cAAsB,EAAE,SAA4B,EAAE,eAAuB,EAAE,GAAsB,EAChJ,KAAY,EAAE,IAAW,EAAE,QAAiB;gBAE5C,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,EAAE,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;gBACzE,IAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAC7C,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBACrC,IAAI,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;gBACjD,IAAI,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEnC,IAAI,KAAK,GAAG,CAAC,CAAC;gBACd,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC3B,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC5B,KAAK,EACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,IAAI,CAAC,EAAE;oBAC5C,IAAI,YAAY,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,EAAE,GAAG,QAAQ,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;oBACjE,IAAI,EAAE,GAAG,GAAG,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;oBAEvD,YAAY,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,EAAE,GAAG,QAAQ,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;oBACjE,IAAI,EAAE,GAAG,GAAG,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;oBAEvD,YAAY,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,EAAE,GAAG,QAAQ,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;oBACjE,IAAI,EAAE,GAAG,GAAG,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;oBAEvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;wBACvC,IAAI,CAAC,GAAG,eAAe,CAAC,MAAM,CAAC;wBAC/B,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE;4BAC/D,IAAI,gBAAgB,GAAG,UAAU,CAAC,MAAM,CAAC;4BACzC,IAAI,gBAAgB,IAAI,CAAC;gCAAE,SAAS;4BACpC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;4BAC3D,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;4BAEvC,IAAI,eAAe,GAAG,gBAAgB,IAAI,CAAC,CAAC;4BAC5C,IAAI,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC;4BACtC,IAAI,oBAAoB,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,eAAe,EAAE,CAAC,GAAG,eAAe,GAAG,UAAU,CAAC,CAAC;4BACjG,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,gBAAgB,EAAE,EAAE,IAAI,CAAC,EAAE;gCAChD,IAAI,CAAC,GAAG,eAAe,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gCACzD,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gCAC5B,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;gCAChC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACtC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACtC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACtC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACtC,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;gCAC7B,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;gCAChC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;gCAChC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gCAClB,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gCACvD,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gCACvD,IAAI,QAAQ,EAAE;oCACb,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;oCACrC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;oCACrC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;oCACtC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;iCACtC;gCACD,CAAC,IAAI,UAAU,CAAC;6BAChB;4BAED,CAAC,GAAG,gBAAgB,CAAC,MAAM,CAAC;4BAC5B,IAAI,qBAAqB,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;4BAChG,eAAe,EAAE,CAAC;4BAClB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,eAAe,EAAE,EAAE,EAAE,EAAE;gCAC5C,qBAAqB,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;gCACjC,qBAAqB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;gCAC5C,qBAAqB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;gCAChD,CAAC,IAAI,CAAC,CAAC;6BACP;4BACD,KAAK,IAAI,eAAe,GAAG,CAAC,CAAC;yBAE7B;6BAAM;4BACN,IAAI,oBAAoB,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,CAAC;4BACnF,oBAAoB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;4BAC7B,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;4BACjC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;4BACtC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;4BACtC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;4BACtC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;4BACtC,IAAI,CAAC,QAAQ,EAAE;gCACd,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gCACjC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gCAEjC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gCACjC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gCACjC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAElC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;6BAClC;iCAAM;gCACN,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gCACjC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gCACjC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCACrC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCACrC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCACtC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCAEtC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCACtC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCACtC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCACtC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCAEtC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gCACvC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;gCAClC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCACtC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCACtC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gCACtC,oBAAoB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;6BACtC;4BAED,CAAC,GAAG,gBAAgB,CAAC,MAAM,CAAC;4BAC5B,IAAI,qBAAqB,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;4BACxE,qBAAqB,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;4BACjC,qBAAqB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC3C,qBAAqB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC3C,KAAK,IAAI,CAAC,CAAC;4BACX,SAAS,KAAK,CAAC;yBACf;qBACD;iBACD;YACF,CAAC;YAID,+BAAI,GAAJ,UAAM,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,YAA2B,EAAE,MAAqB;gBAC/H,IAAI,cAAc,GAAG,MAAM,CAAC;gBAC5B,IAAI,OAAO,GAAG,KAAK,CAAC;gBAGpB,IAAI,KAAK,GAAkB,IAAI,CAAC;gBAChC,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE;oBACjC,KAAK,GAAG,MAAM,CAAC;oBACf,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;iBACtB;;oBACA,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;gBAEtB,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;gBACjB,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;gBAElB,IAAI,gBAAgB,GAAG,YAAY,CAAC;gBACpC,IAAI,oBAAoB,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;gBACnD,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;oBACxB,IAAI,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACjE,IAAI,MAAM,GAAG,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACvE,IAAI,MAAM,GAAG,KAAK,GAAG,MAAM,EAAE,MAAM,GAAG,KAAK,GAAG,MAAM,CAAC;oBAErD,IAAI,aAAa,GAAG,KAAK,CAAC;oBAC1B,IAAI,mBAAmB,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC;oBACxE,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,mBAAmB,EAAE,EAAE,IAAI,CAAC,EAAE;wBACnD,IAAI,MAAM,GAAG,aAAa,CAAC,EAAE,CAAC,EAAE,MAAM,GAAG,aAAa,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBAC/D,IAAI,OAAO,GAAG,aAAa,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,OAAO,GAAG,aAAa,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;wBACrE,IAAI,KAAK,GAAG,MAAM,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,GAAG,MAAM,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;wBAC1E,IAAI,MAAM,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,MAAM,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,EAAE;4BAChE,IAAI,KAAK,EAAE;gCACV,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gCACrB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gCACrB,SAAS;6BACT;4BAED,IAAI,EAAE,GAAG,OAAO,GAAG,MAAM,EAAE,EAAE,GAAG,OAAO,GAAG,MAAM,CAAC;4BACjD,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC;4BAC3G,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;4BAC3C,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;yBAC3C;6BAAM,IAAI,KAAK,EAAE;4BACjB,IAAI,EAAE,GAAG,OAAO,GAAG,MAAM,EAAE,EAAE,GAAG,OAAO,GAAG,MAAM,CAAC;4BACjD,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC;4BAC3G,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;4BAC3C,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;4BAC3C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BACrB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;yBACrB;wBACD,OAAO,GAAG,IAAI,CAAC;qBACf;oBAED,IAAI,WAAW,IAAI,MAAM,CAAC,MAAM,EAAE;wBACjC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;wBAC1B,OAAO,IAAI,CAAC;qBACZ;oBAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACvB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEvB,IAAI,CAAC,IAAI,oBAAoB;wBAAE,MAAM;oBACrC,IAAI,IAAI,GAAG,MAAM,CAAC;oBAClB,MAAM,GAAG,KAAK,CAAC;oBACf,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;oBAClB,KAAK,GAAG,IAAI,CAAC;iBACb;gBAED,IAAI,cAAc,IAAI,MAAM,EAAE;oBAC7B,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;wBAChD,cAAc,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;iBAC/B;;oBACA,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;gBAEnD,OAAO,OAAO,CAAC;YAChB,CAAC;YAEa,8BAAa,GAA3B,UAA6B,OAA0B;gBACtD,IAAI,QAAQ,GAAG,OAAO,CAAC;gBACvB,IAAI,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC;gBAEpC,IAAI,IAAI,GAAG,QAAQ,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,cAAc,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;gBACvI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;oBACtD,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAClB,GAAG,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACtB,GAAG,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACtB,GAAG,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACtB,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;iBAC9B;gBACD,IAAI,IAAI,GAAG,CAAC;oBAAE,OAAO;gBAErB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,cAAc,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;oBACnF,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACzC,IAAI,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;oBACtB,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAC9B,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBACtC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACpB,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;iBACxB;YACF,CAAC;YACF,uBAAC;QAAD,CAAC,AA/SD,IA+SC;QA/SY,qBAAgB,mBA+S5B,CAAA;IACF,CAAC,EAjToB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAiTxB;AAAD,CAAC,EAjTS,UAAU,KAAV,UAAU,QAiTnB;AChTD,IAAU,UAAU,CA4HnB;AA5HD,WAAU,UAAU;IAAC,IAAA,IAAI,CA4HxB;IA5HoB,WAAA,IAAI;QACrB;YAAA;gBAEI,UAAK,GAAG,IAAI,KAAK,EAAY,CAAC;gBAC9B,UAAK,GAAG,IAAI,KAAK,EAAY,CAAC;gBAC9B,UAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;gBAE1B,WAAM,GAAG,IAAI,KAAK,EAAa,CAAC;gBAChC,eAAU,GAAG,IAAI,KAAK,EAAa,CAAC;gBACpC,kBAAa,GAAG,IAAI,KAAK,EAAoB,CAAC;gBAC9C,yBAAoB,GAAG,IAAI,KAAK,EAA2B,CAAC;gBAC5D,oBAAe,GAAG,IAAI,KAAK,EAAsB,CAAC;gBAKlD,QAAG,GAAG,CAAC,CAAC;YA2GZ,CAAC;YAvGG,+BAAQ,GAAR,UAAU,QAAgB;gBACtB,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ;wBAAE,OAAO,IAAI,CAAC;iBAC1C;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,oCAAa,GAAb,UAAe,QAAgB;gBAC3B,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBACxC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ;wBAAE,OAAO,CAAC,CAAC;gBAC5C,OAAO,CAAC,CAAC,CAAC;YACd,CAAC;YAED,+BAAQ,GAAR,UAAU,QAAgB;gBACtB,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ;wBAAE,OAAO,IAAI,CAAC;iBAC1C;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,oCAAa,GAAb,UAAe,QAAgB;gBAC3B,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBACxC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ;wBAAE,OAAO,CAAC,CAAC;gBAC5C,OAAO,CAAC,CAAC,CAAC;YACd,CAAC;YAED,+BAAQ,GAAR,UAAU,QAAgB;gBACtB,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ;wBAAE,OAAO,IAAI,CAAC;iBAC1C;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,gCAAS,GAAT,UAAW,aAAqB;gBAC5B,IAAI,aAAa,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;gBAC5E,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC3C,IAAI,OAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtB,IAAI,OAAK,CAAC,IAAI,IAAI,aAAa;wBAAE,OAAO,OAAK,CAAC;iBACjD;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,oCAAa,GAAb,UAAe,aAAqB;gBAChC,IAAI,aAAa,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;gBAC5E,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;gBACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC/C,IAAI,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;oBAC9B,IAAI,SAAS,CAAC,IAAI,IAAI,aAAa;wBAAE,OAAO,SAAS,CAAC;iBACzD;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,uCAAgB,GAAhB,UAAkB,cAAsB;gBACpC,IAAI,cAAc,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBAC9E,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAClD,IAAI,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;oBAClC,IAAI,UAAU,CAAC,IAAI,IAAI,cAAc;wBAAE,OAAO,UAAU,CAAC;iBAC5D;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,8CAAuB,GAAvB,UAAyB,cAAsB;gBAC3C,IAAI,cAAc,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBAC9E,IAAI,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;gBACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACzD,IAAI,UAAU,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;oBACzC,IAAI,UAAU,CAAC,IAAI,IAAI,cAAc;wBAAE,OAAO,UAAU,CAAC;iBAC5D;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,yCAAkB,GAAlB,UAAoB,cAAsB;gBACtC,IAAI,cAAc,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBAC9E,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;gBAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpD,IAAI,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;oBACpC,IAAI,UAAU,CAAC,IAAI,IAAI,cAAc;wBAAE,OAAO,UAAU,CAAC;iBAC5D;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,8CAAuB,GAAvB,UAAyB,kBAA0B;gBAC/C,IAAI,kBAAkB,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;gBACtF,IAAI,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;gBAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;oBAClD,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,kBAAkB;wBAAE,OAAO,CAAC,CAAC;gBAChE,OAAO,CAAC,CAAC,CAAC;YACd,CAAC;YACL,mBAAC;QAAD,CAAC,AA1HD,IA0HC;QA1HY,iBAAY,eA0HxB,CAAA;IACL,CAAC,EA5HoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA4HxB;AAAD,CAAC,EA5HS,UAAU,KAAV,UAAU,QA4HnB;AC5HD,IAAU,UAAU,CAq0BnB;AAr0BD,WAAU,UAAU;IAAC,IAAA,IAAI,CAq0BxB;IAr0BoB,WAAA,IAAI;QAKV,8BAAyB,GAAG,KAAK,CAAC;QAE7C;YAKI,sBAAa,gBAAkC;gBAH/C,UAAK,GAAG,CAAC,CAAC;gBACF,iBAAY,GAAG,IAAI,KAAK,EAAc,CAAC;gBAG3C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YAC7C,CAAC;YAED,uCAAgB,GAAhB,UAAkB,IAAkB;gBAChC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAI,YAAY,GAAG,IAAI,KAAA,YAAY,EAAE,CAAC;gBACtC,IAAI,IAAI,GAAG,OAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAG/D,IAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAChC,IAAI,WAAW,IAAI,IAAI,EAAE;oBACrB,YAAY,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;oBACrC,YAAY,CAAC,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC;oBACzC,IAAI,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE;wBAC7C,IAAI,KAAK,GAAG,oFAAkF,WAAW,CAAC,KAAK,sEAAmE,CAAC;wBACnL,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;qBACxB;oBACD,IAAI,YAAY,CAAC,OAAO,KAAK,QAAQ,EACrC;wBACI,IAAI,KAAK,GAAG,+FAA+F,CAAC;wBAC5G,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;qBACxB;oBACD,YAAY,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC;oBAC/B,YAAY,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC;oBAC/B,YAAY,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;oBACvC,YAAY,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;oBACzC,YAAY,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC;oBACnC,YAAY,CAAC,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC;iBAChD;gBAGD,IAAI,IAAI,CAAC,KAAK,EAAE;oBACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACxC,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAE5B,IAAI,QAAM,GAAa,IAAI,CAAC;wBAC5B,IAAI,UAAU,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;wBAChE,IAAI,UAAU,IAAI,IAAI,EAAE;4BACpB,QAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;4BAC3C,IAAI,QAAM,IAAI,IAAI;gCAAE,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,UAAU,CAAC,CAAC;yBAC/E;wBACD,IAAI,IAAI,GAAG,IAAI,KAAA,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,QAAM,CAAC,CAAC;wBACzE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBAC1D,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBAChD,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBAChD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;wBACtD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAClD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;wBACzG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;wBAE1D,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACjC;iBACJ;gBAGD,IAAI,IAAI,CAAC,KAAK,EAAE;oBACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACxC,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC5B,IAAI,QAAQ,GAAW,OAAO,CAAC,IAAI,CAAC;wBACpC,IAAI,QAAQ,GAAW,OAAO,CAAC,IAAI,CAAC;wBACpC,IAAI,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;wBAC/C,IAAI,QAAQ,IAAI,IAAI;4BAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,QAAQ,CAAC,CAAC;wBAC1E,IAAI,IAAI,GAAG,IAAI,KAAA,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;wBAEvE,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;wBAC1D,IAAI,KAAK,IAAI,IAAI;4BAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;wBAEnD,IAAI,IAAI,GAAW,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;wBACxD,IAAI,IAAI,IAAI,IAAI,EAAE;4BACd,IAAI,CAAC,SAAS,GAAG,IAAI,KAAA,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;4BACvC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;yBACtC;wBAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;wBACjE,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;wBAC7F,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACjC;iBACJ;gBAGD,IAAI,IAAI,CAAC,EAAE,EAAE;oBACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACrC,IAAI,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC/B,IAAI,IAAI,GAAG,IAAI,KAAA,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;wBACpD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;wBACtD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;wBAEhE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACjD,IAAI,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BACtC,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;4BAC3C,IAAI,IAAI,IAAI,IAAI;gCAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,GAAG,QAAQ,CAAC,CAAC;4BACpE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBACzB;wBAED,IAAI,UAAU,GAAW,aAAa,CAAC,MAAM,CAAC;wBAC9C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;wBAChD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI;4BAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,UAAU,CAAC,CAAC;wBAEpF,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;wBAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBACpE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;wBAChE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;wBAC9D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;wBAE9D,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACzC;iBACJ;gBAGD,IAAI,IAAI,CAAC,SAAS,EAAE;oBAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC5C,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBACtC,IAAI,IAAI,GAAG,IAAI,KAAA,uBAAuB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;wBAC3D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;wBACtD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;wBAEhE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACjD,IAAI,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BACtC,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;4BAC3C,IAAI,IAAI,IAAI,IAAI;gCAAE,MAAM,IAAI,KAAK,CAAC,uCAAuC,GAAG,QAAQ,CAAC,CAAC;4BACtF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBACzB;wBAED,IAAI,UAAU,GAAW,aAAa,CAAC,MAAM,CAAC;wBAC9C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;wBAChD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI;4BAAE,MAAM,IAAI,KAAK,CAAC,8CAA8C,GAAG,UAAU,CAAC,CAAC;wBAEtG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;wBAC1D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;wBAChE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;wBAClE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBAC5D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBAC5D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAC9D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAC9D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAE9D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;wBAC9D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;wBACpE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;wBAC5D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;wBAE5D,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAChD;iBACJ;gBAGD,IAAI,IAAI,CAAC,IAAI,EAAE;oBACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACvC,IAAI,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACjC,IAAI,IAAI,GAAG,IAAI,KAAA,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;wBACtD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;wBACtD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;wBAEhE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACjD,IAAI,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;4BACtC,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;4BAC3C,IAAI,IAAI,IAAI,IAAI;gCAAE,MAAM,IAAI,KAAK,CAAC,uCAAuC,GAAG,QAAQ,CAAC,CAAC;4BACtF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBACzB;wBAED,IAAI,UAAU,GAAW,aAAa,CAAC,MAAM,CAAC;wBAC9C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;wBAChD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI;4BAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,UAAU,CAAC,CAAC;wBAEtF,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC;wBACjH,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;wBAC7G,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;wBAC3G,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;wBAClE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;wBAC5D,IAAI,IAAI,CAAC,YAAY,IAAI,KAAA,YAAY,CAAC,KAAK;4BAAE,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC;wBACpE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;wBAC1D,IAAI,IAAI,CAAC,WAAW,IAAI,KAAA,WAAW,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,IAAI,KAAA,WAAW,CAAC,KAAK;4BAAE,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;wBAC3G,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;wBAC9D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;wBAEpE,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAC3C;iBACJ;gBAGD,IAAI,IAAI,CAAC,KAAK,EAAE;oBACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACxC,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;wBAC3B,IAAI,IAAI,GAAG,IAAI,KAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAElC,IAAI,OAAO,CAAC,KAAK,EAAE;4BACf,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;gCAC9C,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;gCACpD,IAAI,IAAI,IAAI,IAAI;oCAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCAC9E,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;6BACzB;yBACJ;wBAED,IAAI,OAAO,CAAC,EAAE,EAAE;4BACZ,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;gCAC3C,IAAI,UAAU,GAAG,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC/D,IAAI,UAAU,IAAI,IAAI;oCAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gCAC1F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;6BACrC;yBACJ;wBAED,IAAI,OAAO,CAAC,SAAS,EAAE;4BACnB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;gCAClD,IAAI,UAAU,GAAG,YAAY,CAAC,uBAAuB,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC7E,IAAI,UAAU,IAAI,IAAI;oCAAE,MAAM,IAAI,KAAK,CAAC,uCAAuC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;gCACxG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;6BACrC;yBACJ;wBAED,IAAI,OAAO,CAAC,IAAI,EAAE;4BACd,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;gCAC7C,IAAI,UAAU,GAAG,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;gCACnE,IAAI,UAAU,IAAI,IAAI;oCAAE,MAAM,IAAI,KAAK,CAAC,kCAAkC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gCAC9F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;6BACrC;yBACJ;wBAED,KAAK,IAAI,QAAQ,IAAI,OAAO,CAAC,WAAW,EAAE;4BACtC,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;4BAC3C,IAAI,IAAI,IAAI,IAAI;gCAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;4BACjE,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;4BAC5C,KAAK,IAAI,SAAS,IAAI,OAAO,EAAE;gCAC3B,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;gCACpG,IAAI,UAAU,IAAI,IAAI;oCAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;6BACjF;yBACJ;wBACD,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAC9B,IAAI,IAAI,CAAC,IAAI,IAAI,SAAS;4BAAE,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC;qBAC/D;iBACJ;gBAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACtD,IAAI,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACtC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBACvG,IAAI,IAAI,IAAI,IAAI;wBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;oBACxE,IAAI,QAAM,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;oBACzE,IAAI,QAAM,IAAI,IAAI;wBAAE,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;oBACnF,UAAU,CAAC,IAAI,CAAC,gBAAgB,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,CAAmB,QAAM,CAAC,CAAC,CAAmB,UAAU,CAAC,IAAI,CAAC;oBAC3H,UAAU,CAAC,IAAI,CAAC,aAAa,CAAkB,QAAM,CAAC,CAAC;iBAE1D;gBACD,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;gBAG7B,IAAI,IAAI,CAAC,MAAM,EAAE;oBACb,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE;wBAC/B,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;wBACtC,IAAI,IAAI,GAAG,IAAI,KAAA,SAAS,CAAC,SAAS,CAAC,CAAC;wBACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;wBAClD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;wBACtD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;wBACzD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;wBACxD,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;4BACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BACnD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;yBACxD;wBACD,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAClC;iBACJ;gBAGD,IAAI,IAAI,CAAC,UAAU,EAAE;oBACjB,KAAK,IAAI,aAAa,IAAI,IAAI,CAAC,UAAU,EAAE;wBACvC,IAAI,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;wBAClD,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;qBACjE;iBACJ;gBAED,OAAO,YAAY,CAAC;YACxB,CAAC;YAED,qCAAc,GAAd,UAAgB,GAAQ,EAAE,IAAU,EAAE,SAAiB,EAAE,IAAY,EAAE,YAA0B;gBAC7F,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;gBAExC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;gBAEhD,QAAQ,IAAI,EAAE;oBACV,KAAK,QAAQ,CAAC,CAAC;wBACX,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;wBAC5C,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;wBACzE,IAAI,MAAM,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAChC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;wBACnB,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBAC9C,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBAC9C,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAChD,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAChD,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;wBACpD,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;wBACjC,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC;wBAEnC,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;wBACtD,IAAI,KAAK,IAAI,IAAI;4BAAE,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;wBAGrD,OAAO,MAAM,CAAC;qBACjB;oBACD,KAAK,aAAa,CAAC,CAAC;wBAChB,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBACrE,IAAI,GAAG,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAC7B,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;wBAClD,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;wBACtD,IAAI,KAAK,IAAI,IAAI;4BAAE,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;wBAClD,OAAO,GAAG,CAAC;qBACd;oBACD,KAAK,MAAM,CAAC;oBACZ,KAAK,YAAY,CAAC,CAAC;wBACf,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;wBAC5C,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;wBACrE,IAAI,IAAI,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;wBAEjB,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;wBAC9C,IAAI,KAAK,IAAI,IAAI;4BAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;wBAEnD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBACpD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBAEtD,IAAI,QAAM,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;wBACxD,IAAI,QAAM,IAAI,IAAI,EAAE;4BAChB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,EAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,SAAS,EAAE,QAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;4BAC/I,OAAO,IAAI,CAAC;yBACf;wBAED,IAAI,GAAG,GAAkB,GAAG,CAAC,GAAG,CAAC;wBACjC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;wBACzC,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;wBAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,CAAC,GAAG,CAAC,CAAC;wBAGvC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;wBAC/C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;wBACpD,OAAO,IAAI,CAAC;qBACf;oBACD,KAAK,MAAM,CAAC,CAAC;wBACT,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAC/D,IAAI,IAAI,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;wBAClD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;wBAE/D,IAAI,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;wBAClC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE,WAAW,IAAI,CAAC,CAAC,CAAC;wBAE/C,IAAI,OAAO,GAAkB,KAAA,KAAK,CAAC,QAAQ,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;wBAChE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE;4BACvC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;wBACxC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;wBAEvB,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;wBACtD,IAAI,KAAK,IAAI,IAAI;4BAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;wBACnD,OAAO,IAAI,CAAC;qBACf;oBACD,KAAK,OAAO,CAAC,CAAC;wBACV,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBACjE,IAAI,KAAK,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAC/B,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBAC7C,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;wBAC7C,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;wBAEnD,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;wBAC9C,IAAI,KAAK,IAAI,IAAI;4BAAE,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;wBACpD,OAAO,KAAK,CAAC;qBAChB;oBACD,KAAK,UAAU,CAAC,CAAC;wBACb,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBACnE,IAAI,IAAI,IAAI,IAAI;4BAAE,OAAO,IAAI,CAAC;wBAE9B,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;wBAC1C,IAAI,GAAG,IAAI,IAAI,EAAE;4BACb,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;4BACtC,IAAI,IAAI,IAAI,IAAI;gCAAE,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,GAAG,CAAC,CAAC;4BACzE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;yBACvB;wBAED,IAAI,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;wBAClC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE,WAAW,IAAI,CAAC,CAAC,CAAC;wBAE/C,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;wBACtD,IAAI,KAAK,IAAI,IAAI;4BAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;wBACnD,OAAO,IAAI,CAAC;qBACf;iBACJ;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,mCAAY,GAAZ,UAAc,GAAQ,EAAE,UAA4B,EAAE,cAAsB;gBACxE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,UAAU,CAAC,mBAAmB,GAAG,cAAc,CAAC;gBAChD,IAAI,QAAQ,GAAkB,GAAG,CAAC,QAAQ,CAAC;gBAC3C,IAAI,cAAc,IAAI,QAAQ,CAAC,MAAM,EAAE;oBACnC,IAAI,cAAc,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;oBAClD,IAAI,KAAK,IAAI,CAAC,EAAE;wBACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;4BAC3C,cAAc,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;qBAClC;oBACD,UAAU,CAAC,QAAQ,GAAG,cAAc,CAAC;oBACrC,OAAO;iBACV;gBACD,IAAI,OAAO,GAAG,IAAI,KAAK,EAAU,CAAC;gBAClC,IAAI,KAAK,GAAG,IAAI,KAAK,EAAU,CAAC;gBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG;oBACzC,IAAI,SAAS,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;oBAC9B,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBACtB,KAAK,IAAI,EAAE,GAAG,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;wBAC7C,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;wBACxB,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;wBACtC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;wBACtC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACjC;iBACJ;gBACD,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;gBACzB,UAAU,CAAC,QAAQ,GAAG,KAAA,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YACtD,CAAC;YAED,oCAAa,GAAb,UAAe,GAAQ,EAAE,IAAY,EAAE,YAA0B;gBAC7D,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAI,SAAS,GAAG,IAAI,KAAK,EAAY,CAAC;gBACtC,IAAI,QAAQ,GAAG,CAAC,CAAC;gBAGjB,IAAI,GAAG,CAAC,KAAK,EAAE;oBACX,KAAK,IAAI,QAAQ,IAAI,GAAG,CAAC,KAAK,EAAE;wBAC5B,IAAI,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;wBAClC,IAAI,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;wBACrD,IAAI,SAAS,IAAI,CAAC,CAAC;4BAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;wBACpE,KAAK,IAAI,YAAY,IAAI,OAAO,EAAE;4BAC9B,IAAI,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;4BACxC,IAAI,YAAY,IAAI,YAAY,EAAE;gCAC9B,IAAI,QAAQ,GAAG,IAAI,KAAA,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gCAC1D,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAE/B,IAAI,UAAU,GAAG,CAAC,CAAC;gCACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACzC,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oCAC9B,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;iCACtF;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;6BAChF;iCAAM,IAAI,YAAY,IAAI,OAAO,EAAE;gCAChC,IAAI,QAAQ,GAAG,IAAI,KAAA,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gCACrD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAE/B,IAAI,UAAU,GAAG,CAAC,CAAC;gCACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACzC,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oCAC9B,IAAI,KAAK,GAAG,IAAI,KAAA,KAAK,EAAE,CAAC;oCACxB,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAI,UAAU,CAAC,CAAC;oCAClD,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;oCACtG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;oCAC/C,UAAU,EAAE,CAAC;iCAChB;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,KAAA,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;6BAE1G;iCAAM,IAAI,YAAY,IAAI,UAAU,EAAE;gCACnC,IAAI,QAAQ,GAAG,IAAI,KAAA,gBAAgB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gCACxD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAE/B,IAAI,UAAU,GAAG,CAAC,CAAC;gCACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACzC,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oCAC9B,IAAI,KAAK,GAAG,IAAI,KAAA,KAAK,EAAE,CAAC;oCACxB,IAAI,IAAI,GAAG,IAAI,KAAA,KAAK,EAAE,CAAC;oCACvB,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oCACpC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oCAClC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;oCAC9H,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;oCAC/C,UAAU,EAAE,CAAC;iCAChB;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,KAAA,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;6BAE7G;;gCACG,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,YAAY,GAAG,IAAI,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;yBACpG;qBACJ;iBACJ;gBAGD,IAAI,GAAG,CAAC,KAAK,EAAE;oBACX,KAAK,IAAI,QAAQ,IAAI,GAAG,CAAC,KAAK,EAAE;wBAC5B,IAAI,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;wBAClC,IAAI,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;wBACrD,IAAI,SAAS,IAAI,CAAC,CAAC;4BAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;wBACpE,KAAK,IAAI,YAAY,IAAI,OAAO,EAAE;4BAC9B,IAAI,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;4BACxC,IAAI,YAAY,KAAK,QAAQ,EAAE;gCAC3B,IAAI,QAAQ,GAAG,IAAI,KAAA,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gCACtD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAE/B,IAAI,UAAU,GAAG,CAAC,CAAC;gCACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACzC,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oCAC9B,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;oCACvG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;oCAC/C,UAAU,EAAE,CAAC;iCAChB;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,KAAA,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;6BAE3G;iCAAM,IAAI,YAAY,KAAK,WAAW,IAAI,YAAY,KAAK,OAAO,IAAI,YAAY,KAAK,OAAO,EAAE;gCAC7F,IAAI,QAAQ,GAAsB,IAAI,CAAC;gCACvC,IAAI,aAAa,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,CAAC;gCACxC,IAAI,YAAY,KAAK,OAAO,EAAE;oCAC1B,QAAQ,GAAG,IAAI,KAAA,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCACjD,YAAY,GAAG,CAAC,CAAC;iCACpB;qCAAM,IAAI,YAAY,KAAK,OAAO;oCAC/B,QAAQ,GAAG,IAAI,KAAA,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;qCAChD;oCACD,QAAQ,GAAG,IAAI,KAAA,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCACrD,aAAa,GAAG,KAAK,CAAC;iCACzB;gCACD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAE/B,IAAI,UAAU,GAAG,CAAC,CAAC;gCACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACzC,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oCAC9B,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE,YAAY,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE,YAAY,CAAC,CAAC;oCACnG,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,GAAG,aAAa,CAAC,CAAC;oCACxG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;oCAC/C,UAAU,EAAE,CAAC;iCAChB;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,KAAA,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;6BAE9G;;gCACG,MAAM,IAAI,KAAK,CAAC,oCAAoC,GAAG,YAAY,GAAG,IAAI,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;yBACpG;qBACJ;iBACJ;gBAGD,IAAI,GAAG,CAAC,EAAE,EAAE;oBACR,KAAK,IAAI,cAAc,IAAI,GAAG,CAAC,EAAE,EAAE;wBAC/B,IAAI,aAAa,GAAG,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC;wBAC3C,IAAI,UAAU,GAAG,YAAY,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;wBAC/D,IAAI,QAAQ,GAAG,IAAI,KAAA,oBAAoB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;wBAC9D,QAAQ,CAAC,iBAAiB,GAAG,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;wBAC5E,IAAI,UAAU,GAAG,CAAC,CAAC;wBACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BAC3C,IAAI,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;4BAChC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,GAAG,KAAK,EAC/I,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;4BACnJ,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;4BAC/C,UAAU,EAAE,CAAC;yBAChB;wBACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,KAAA,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;qBACjH;iBACJ;gBAGD,IAAI,GAAG,CAAC,SAAS,EAAE;oBACf,KAAK,IAAI,cAAc,IAAI,GAAG,CAAC,SAAS,EAAE;wBACtC,IAAI,aAAa,GAAG,GAAG,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;wBAClD,IAAI,UAAU,GAAG,YAAY,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;wBACtE,IAAI,QAAQ,GAAG,IAAI,KAAA,2BAA2B,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;wBACrE,QAAQ,CAAC,wBAAwB,GAAG,YAAY,CAAC,oBAAoB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;wBAC1F,IAAI,UAAU,GAAG,CAAC,CAAC;wBACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BAC3C,IAAI,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;4BAChC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC,EACrG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;4BAChI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;4BAC/C,UAAU,EAAE,CAAC;yBAChB;wBACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EACxB,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,KAAA,2BAA2B,CAAC,OAAO,CAAC,CAAC,CAAC;qBAC9F;iBACJ;gBAGD,IAAI,GAAG,CAAC,IAAI,EAAE;oBACV,KAAK,IAAI,cAAc,IAAI,GAAG,CAAC,IAAI,EAAE;wBACjC,IAAI,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;wBAC7C,IAAI,KAAK,GAAG,YAAY,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;wBACjE,IAAI,KAAK,IAAI,CAAC,CAAC;4BAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,cAAc,CAAC,CAAC;wBACjF,IAAI,IAAI,GAAG,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;wBAC/C,KAAK,IAAI,YAAY,IAAI,aAAa,EAAE;4BACpC,IAAI,WAAW,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;4BAC9C,IAAI,YAAY,KAAK,UAAU,IAAI,YAAY,KAAK,SAAS,EAAE;gCAC3D,IAAI,QAAQ,GAAmC,IAAI,CAAC;gCACpD,IAAI,aAAa,GAAG,CAAC,CAAC;gCACtB,IAAI,YAAY,KAAK,SAAS,EAAE;oCAC5B,QAAQ,GAAG,IAAI,KAAA,6BAA6B,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCACjE,IAAI,IAAI,CAAC,WAAW,IAAI,KAAA,WAAW,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,IAAI,KAAA,WAAW,CAAC,KAAK;wCAAE,aAAa,GAAG,KAAK,CAAC;iCAC9G;qCAAM;oCACH,QAAQ,GAAG,IAAI,KAAA,8BAA8B,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;oCAClE,IAAI,IAAI,CAAC,YAAY,IAAI,KAAA,YAAY,CAAC,KAAK;wCAAE,aAAa,GAAG,KAAK,CAAC;iCACtE;gCACD,QAAQ,CAAC,mBAAmB,GAAG,KAAK,CAAC;gCACrC,IAAI,UAAU,GAAG,CAAC,CAAC;gCACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACzC,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oCAC9B,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,EAAE,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC;oCAC5H,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;oCAC/C,UAAU,EAAE,CAAC;iCAChB;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EACxB,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,KAAA,8BAA8B,CAAC,OAAO,CAAC,CAAC,CAAC;6BACjG;iCAAM,IAAI,YAAY,KAAK,KAAK,EAAE;gCAC/B,IAAI,QAAQ,GAAG,IAAI,KAAA,yBAAyB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gCACjE,QAAQ,CAAC,mBAAmB,GAAG,KAAK,CAAC;gCACrC,IAAI,UAAU,GAAG,CAAC,CAAC;gCACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACzC,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oCAC9B,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC,EACrG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;oCAChD,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;oCAC/C,UAAU,EAAE,CAAC;iCAChB;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EACxB,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,GAAG,KAAA,yBAAyB,CAAC,OAAO,CAAC,CAAC,CAAC;6BAC5F;yBACJ;qBACJ;iBACJ;gBAGD,IAAI,GAAG,CAAC,MAAM,EAAE;oBACZ,KAAK,IAAI,UAAU,IAAI,GAAG,CAAC,MAAM,EAAE;wBAC/B,IAAI,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;wBACvC,IAAI,IAAI,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;wBAC7C,IAAI,IAAI,IAAI,IAAI,EAAE;4BACf,IAAI,KAAA,yBAAyB,EAAE;gCAC3B,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,UAAU,CAAC,CAAC;6BACpD;iCAAM;gCACH,SAAS;6BACZ;yBACH;wBACD,KAAK,IAAI,QAAQ,IAAI,SAAS,EAAE;4BAC5B,IAAI,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;4BAClC,IAAI,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;4BACrD,IAAI,SAAS,IAAI,CAAC,CAAC;gCAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;4BACxE,KAAK,IAAI,YAAY,IAAI,OAAO,EAAE;gCAC9B,IAAI,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;gCACxC,IAAI,UAAU,GAAqB,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;gCAC/E,IAAI,UAAU,IAAI,IAAI;oCAAE,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;gCAC5F,IAAI,QAAQ,GAAG,UAAU,CAAC,KAAK,IAAI,IAAI,CAAC;gCACxC,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;gCACnC,IAAI,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;gCAExE,IAAI,QAAQ,GAAG,IAAI,KAAA,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gCACtD,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;gCAC/B,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;gCAEjC,IAAI,UAAU,GAAG,CAAC,CAAC;gCACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACzC,IAAI,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oCAC9B,IAAI,MAAM,SAAmB,CAAC;oCAC9B,IAAI,aAAa,GAAkB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;oCAC7E,IAAI,aAAa,IAAI,IAAI;wCACrB,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,KAAA,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;yCAChE;wCACD,MAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;wCAC3C,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;wCACzD,KAAA,KAAK,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;wCACvE,IAAI,KAAK,IAAI,CAAC,EAAE;4CACZ,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;gDACxD,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;yCAC1B;wCACD,IAAI,CAAC,QAAQ,EAAE;4CACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE;gDACjC,MAAM,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;yCAChC;qCACJ;oCAED,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;oCAC1E,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;oCAC/C,UAAU,EAAE,CAAC;iCAChB;gCACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gCACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;6BAChF;yBACJ;qBACJ;iBACJ;gBAGD,IAAI,aAAa,GAAG,GAAG,CAAC,SAAS,CAAC;gBAClC,IAAI,aAAa,IAAI,IAAI;oBAAE,aAAa,GAAG,GAAG,CAAC,SAAS,CAAC;gBACzD,IAAI,aAAa,IAAI,IAAI,EAAE;oBACvB,IAAI,QAAQ,GAAG,IAAI,KAAA,iBAAiB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBAC3D,IAAI,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC;oBAC1C,IAAI,UAAU,GAAG,CAAC,CAAC;oBACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC3C,IAAI,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;wBACpC,IAAI,SAAS,GAAkB,IAAI,CAAC;wBACpC,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;wBAC3D,IAAI,OAAO,IAAI,IAAI,EAAE;4BACjB,SAAS,GAAG,KAAA,KAAK,CAAC,QAAQ,CAAS,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;4BAClD,IAAI,SAAS,GAAG,KAAA,KAAK,CAAC,QAAQ,CAAS,SAAS,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;4BACtE,IAAI,aAAa,GAAG,CAAC,EAAE,cAAc,GAAG,CAAC,CAAC;4BAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gCACrC,IAAI,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gCAC3B,IAAI,SAAS,GAAG,YAAY,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gCAC3D,IAAI,SAAS,IAAI,CAAC,CAAC;oCAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;gCAE1E,OAAO,aAAa,IAAI,SAAS;oCAC7B,SAAS,CAAC,cAAc,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;gCAElD,SAAS,CAAC,aAAa,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,aAAa,EAAE,CAAC;6BACjE;4BAED,OAAO,aAAa,GAAG,SAAS;gCAC5B,SAAS,CAAC,cAAc,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC;4BAElD,KAAK,IAAI,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;gCACnC,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oCAAE,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,EAAE,cAAc,CAAC,CAAC;yBAC1E;wBACD,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;qBACtF;oBACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;iBAChF;gBAGD,IAAI,GAAG,CAAC,MAAM,EAAE;oBACZ,IAAI,QAAQ,GAAG,IAAI,KAAA,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;oBACpD,IAAI,UAAU,GAAG,CAAC,CAAC;oBACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACxC,IAAI,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC7B,IAAI,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;wBACtD,IAAI,SAAS,IAAI,IAAI;4BAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAC5E,IAAI,OAAK,GAAG,IAAI,KAAA,KAAK,CAAC,KAAA,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;wBAC9F,OAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;wBACpE,OAAK,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;wBAC1E,OAAK,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC;wBAC7E,IAAI,OAAK,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;4BAC9B,OAAK,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BACpD,OAAK,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;yBACzD;wBACD,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,OAAK,CAAC,CAAC;qBAC1C;oBACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;iBAChF;gBAED,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;iBACrE;gBAED,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,KAAA,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC3E,CAAC;YAED,gCAAS,GAAT,UAAW,GAAQ,EAAE,QAAuB,EAAE,UAAkB;gBAC5D,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC;oBAAE,OAAO;gBACzC,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS;oBACvB,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;qBAC/B;oBACD,IAAI,KAAK,GAAW,GAAG,CAAC,KAAK,CAAC;oBAC9B,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;iBAC/H;YACL,CAAC;YAED,+BAAQ,GAAR,UAAU,GAAQ,EAAE,IAAY,EAAE,YAAiB;gBAC/C,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;YAC9D,CAAC;YAEM,gCAAmB,GAA1B,UAA4B,GAAW;gBACnC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;gBACxB,IAAI,GAAG,IAAI,QAAQ;oBAAE,OAAO,KAAA,SAAS,CAAC,MAAM,CAAC;gBAC7C,IAAI,GAAG,IAAI,UAAU;oBAAE,OAAO,KAAA,SAAS,CAAC,QAAQ,CAAC;gBACjD,IAAI,GAAG,IAAI,UAAU;oBAAE,OAAO,KAAA,SAAS,CAAC,QAAQ,CAAC;gBACjD,IAAI,GAAG,IAAI,QAAQ;oBAAE,OAAO,KAAA,SAAS,CAAC,MAAM,CAAC;gBAC7C,MAAM,IAAI,KAAK,CAAC,yBAAuB,GAAK,CAAC,CAAC;YAClD,CAAC;YAEM,mCAAsB,GAA7B,UAA+B,GAAW;gBACtC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;gBACxB,IAAI,GAAG,IAAI,OAAO;oBAAE,OAAO,KAAA,YAAY,CAAC,KAAK,CAAC;gBAC9C,IAAI,GAAG,IAAI,SAAS;oBAAE,OAAO,KAAA,YAAY,CAAC,OAAO,CAAC;gBAClD,MAAM,IAAI,KAAK,CAAC,4BAA0B,GAAK,CAAC,CAAC;YACrD,CAAC;YAEM,kCAAqB,GAA5B,UAA8B,GAAW;gBACrC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;gBACxB,IAAI,GAAG,IAAI,QAAQ;oBAAE,OAAO,KAAA,WAAW,CAAC,MAAM,CAAC;gBAC/C,IAAI,GAAG,IAAI,OAAO;oBAAE,OAAO,KAAA,WAAW,CAAC,KAAK,CAAC;gBAC7C,IAAI,GAAG,IAAI,SAAS;oBAAE,OAAO,KAAA,WAAW,CAAC,OAAO,CAAC;gBACjD,MAAM,IAAI,KAAK,CAAC,4BAA0B,GAAK,CAAC,CAAC;YACrD,CAAC;YAEM,iCAAoB,GAA3B,UAA6B,GAAW;gBACpC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;gBACxB,IAAI,GAAG,IAAI,SAAS;oBAAE,OAAO,KAAA,UAAU,CAAC,OAAO,CAAC;gBAChD,IAAI,GAAG,IAAI,OAAO;oBAAE,OAAO,KAAA,UAAU,CAAC,KAAK,CAAC;gBAC5C,IAAI,GAAG,IAAI,YAAY;oBAAE,OAAO,KAAA,UAAU,CAAC,UAAU,CAAC;gBACtD,MAAM,IAAI,KAAK,CAAC,0BAAwB,GAAK,CAAC,CAAC;YACnD,CAAC;YAEM,oCAAuB,GAA9B,UAA+B,GAAW;gBACtC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;gBACxB,IAAI,GAAG,IAAI,QAAQ;oBAAE,OAAO,KAAA,aAAa,CAAC,MAAM,CAAC;gBACjD,IAAI,GAAG,IAAI,iBAAiB;oBAAE,OAAO,KAAA,aAAa,CAAC,eAAe,CAAC;gBACnE,IAAI,GAAG,IAAI,wBAAwB;oBAAE,OAAO,KAAA,aAAa,CAAC,sBAAsB,CAAC;gBACjF,IAAI,GAAG,IAAI,SAAS;oBAAE,OAAO,KAAA,aAAa,CAAC,OAAO,CAAC;gBACnD,IAAI,GAAG,IAAI,qBAAqB;oBAAE,OAAO,KAAA,aAAa,CAAC,mBAAmB,CAAC;gBAC3E,MAAM,IAAI,KAAK,CAAC,6BAA2B,GAAK,CAAC,CAAC;YACtD,CAAC;YACL,mBAAC;QAAD,CAAC,AA9yBD,IA8yBC;QA9yBY,iBAAY,eA8yBxB,CAAA;QAED;YAMI,oBAAa,IAAoB,EAAE,IAAY,EAAE,SAAiB,EAAE,MAAc,EAAE,aAAsB;gBACtG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACvC,CAAC;YACL,iBAAC;QAAD,CAAC,AAbD,IAaC;IACL,CAAC,EAr0BoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAq0BxB;AAAD,CAAC,EAr0BS,UAAU,KAAV,UAAU,QAq0BnB;ACr0BD,IAAU,UAAU,CA6JnB;AA7JD,WAAU,UAAU;IAAC,IAAA,IAAI,CA6JxB;IA7JoB,WAAA,IAAI;QACrB;YACI,mBAAmB,SAAiB,EAAS,IAAY,EAAS,UAAsB;gBAArE,cAAS,GAAT,SAAS,CAAQ;gBAAS,SAAI,GAAJ,IAAI,CAAQ;gBAAS,eAAU,GAAV,UAAU,CAAY;YAAI,CAAC;YACjG,gBAAC;QAAD,CAAC,AAFD,IAEC;QAFY,cAAS,YAErB,CAAA;QAED;YAMI,cAAa,IAAY;gBAJzB,gBAAW,GAAG,IAAI,KAAK,EAAmB,CAAC;gBAC3C,UAAK,GAAG,KAAK,EAAY,CAAC;gBAC1B,gBAAW,GAAG,IAAI,KAAK,EAAkB,CAAC;gBAGtC,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC;YAED,4BAAa,GAAb,UAAe,SAAiB,EAAE,IAAY,EAAE,UAAsB;gBAClE,IAAI,UAAU,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;gBACtE,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;gBACnC,IAAI,SAAS,IAAI,WAAW,CAAC,MAAM;oBAAE,WAAW,CAAC,MAAM,GAAG,SAAS,GAAG,CAAC,CAAC;gBACxE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;oBAAE,WAAW,CAAC,SAAS,CAAC,GAAG,EAAG,CAAC;gBAC1D,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC;YAC9C,CAAC;YAED,sBAAO,GAAP,UAAS,IAAU;gBACf,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACzB,IAAI,SAAS,GAAG,KAAK,CAAC;oBACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACxC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;4BACvB,SAAS,GAAG,IAAI,CAAC;4BACjB,MAAM;yBACT;qBACJ;oBACD,IAAI,CAAC,SAAS;wBAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACzC;gBAED,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC7C,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBACrC,IAAI,SAAS,GAAG,KAAK,CAAC;oBACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC9C,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,UAAU,EAAE;4BACnC,SAAS,GAAG,IAAI,CAAC;4BACjB,MAAM;yBACT;qBACJ;oBACD,IAAI,CAAC,SAAS;wBAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBACrD;gBAED,IAAI,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;gBACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACzC,IAAI,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oBAChC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;iBACpF;YACL,CAAC;YAED,uBAAQ,GAAR,UAAU,IAAU;gBAChB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACzB,IAAI,SAAS,GAAG,KAAK,CAAC;oBACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACxC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;4BACvB,SAAS,GAAG,IAAI,CAAC;4BACjB,MAAM;yBACT;qBACJ;oBACD,IAAI,CAAC,SAAS;wBAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACzC;gBAED,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC7C,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBACrC,IAAI,SAAS,GAAG,KAAK,CAAC;oBACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC9C,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,UAAU,EAAE;4BACnC,SAAS,GAAG,IAAI,CAAC;4BACjB,MAAM;yBACT;qBACJ;oBACD,IAAI,CAAC,SAAS;wBAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBACrD;gBAED,IAAI,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;gBACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACzC,IAAI,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;oBAChC,IAAI,UAAU,CAAC,UAAU,IAAI,IAAI;wBAAE,SAAS;oBAC5C,IAAI,UAAU,CAAC,UAAU,YAAY,KAAA,cAAc,EAAE;wBACjD,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;wBAC9D,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;qBACpF;yBAAM;wBACH,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;wBACrD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;qBACpF;iBACJ;YACL,CAAC;YAGD,4BAAa,GAAb,UAAe,SAAiB,EAAE,IAAY;gBAC1C,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC7C,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAChD,CAAC;YAED,+BAAgB,GAAhB,UAAkB,SAAiB,EAAE,IAAY;gBAC7C,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC7C,IAAI,UAAU;oBAAE,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YAC5C,CAAC;YAED,6BAAc,GAAd;gBACI,IAAI,OAAO,GAAG,IAAI,KAAK,EAAa,CAAC;gBACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC9C,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC1C,IAAI,eAAe,EAAE;wBACjB,KAAK,IAAI,MAAI,IAAI,eAAe,EAAE;4BAC9B,IAAI,UAAU,GAAG,eAAe,CAAC,MAAI,CAAC,CAAC;4BACvC,IAAI,UAAU;gCAAE,OAAO,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,CAAC,EAAE,MAAI,EAAE,UAAU,CAAC,CAAC,CAAC;yBACpE;qBACJ;iBACJ;gBACD,OAAO,OAAO,CAAC;YACnB,CAAC;YAED,oCAAqB,GAArB,UAAuB,SAAiB,EAAE,WAA6B;gBACnE,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAClD,IAAI,eAAe,EAAE;oBACjB,KAAK,IAAI,MAAI,IAAI,eAAe,EAAE;wBAC9B,IAAI,UAAU,GAAG,eAAe,CAAC,MAAI,CAAC,CAAC;wBACvC,IAAI,UAAU;4BAAE,WAAW,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,SAAS,EAAE,MAAI,EAAE,UAAU,CAAC,CAAC,CAAC;qBAChF;iBACJ;YACL,CAAC;YAED,oBAAK,GAAL;gBACI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;YAChC,CAAC;YAGD,wBAAS,GAAT,UAAW,QAAkB,EAAE,OAAa;gBACxC,IAAI,SAAS,GAAG,CAAC,CAAC;gBAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC5C,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,cAAc,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;oBAC1C,IAAI,cAAc,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE;wBAC1D,IAAI,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;wBAChD,KAAK,IAAI,GAAG,IAAI,UAAU,EAAE;4BACxB,IAAI,cAAc,GAAc,UAAU,CAAC,GAAG,CAAC,CAAC;4BAChD,IAAI,cAAc,IAAI,cAAc,EAAE;gCAClC,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gCACpD,IAAI,UAAU,IAAI,IAAI;oCAAE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACvD,MAAM;6BACT;yBACJ;qBACJ;oBACD,SAAS,EAAE,CAAC;iBACf;YACL,CAAC;YACL,WAAC;QAAD,CAAC,AAvJD,IAuJC;QAvJY,SAAI,OAuJhB,CAAA;IACL,CAAC,EA7JoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA6JxB;AAAD,CAAC,EA7JS,UAAU,KAAV,UAAU,QA6JnB;AC7JD,IAAU,UAAU,CAyEnB;AAzED,WAAU,UAAU;IAAC,IAAA,IAAI,CAyExB;IAzEoB,WAAA,IAAI;QACrB;YA0BI,cAAa,IAAc,EAAE,IAAU;gBAFvC,WAAM,GAAG,IAAI,KAAK,EAAU,CAAC;gBAGzB,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,KAAK,GAAG,IAAI,KAAA,KAAK,EAAE,CAAC;gBACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,KAAA,KAAK,EAAE,CAAC;gBAC7D,IAAI,CAAC,cAAc,EAAE,CAAC;gBAEtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;YACzC,CAAC;YAGD,4BAAa,GAAb;gBACI,OAAO,IAAI,CAAC,UAAU,CAAC;YAC3B,CAAC;YAID,4BAAa,GAAb,UAAe,UAAsB;gBACjC,IAAI,IAAI,CAAC,UAAU,IAAI,UAAU;oBAAE,OAAO;gBAC1C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAC9C,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YAC3B,CAAC;YAED,gCAAiB,GAAjB,UAAmB,IAAY;gBAC3B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;YACzD,CAAC;YAGD,gCAAiB,GAAjB;gBACI,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC;YACzD,CAAC;YAED,6BAAc,GAAd;gBACI,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzC,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI;oBAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC7E,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI;oBAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;qBACtB;oBACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;iBACnG;YACL,CAAC;YACL,WAAC;QAAD,CAAC,AAvED,IAuEC;QAvEY,SAAI,OAuEhB,CAAA;IACL,CAAC,EAzEoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAyExB;AAAD,CAAC,EAzES,UAAU,KAAV,UAAU,QAyEnB;ACzED,IAAU,UAAU,CAmBnB;AAnBD,WAAU,UAAU;IAAC,IAAA,IAAI,CAmBxB;IAnBoB,WAAA,IAAI;QACrB;YASI,kBAAa,KAAa,EAAE,IAAY,EAAE,QAAkB;gBAL5D,UAAK,GAAG,IAAI,KAAA,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAM1B,IAAI,KAAK,GAAG,CAAC;oBAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;gBACtD,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC7B,CAAC;YACL,eAAC;QAAD,CAAC,AAjBD,IAiBC;QAjBY,aAAQ,WAiBpB,CAAA;IACL,CAAC,EAnBoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAmBxB;AAAD,CAAC,EAnBS,UAAU,KAAV,UAAU,QAmBnB;ACnBD,IAAU,UAAU,CA0JnB;AA1JD,WAAU,UAAU;IAAC,IAAA,IAAI,CA0JxB;IA1JoB,WAAA,IAAI;QACrB;YAGI,iBAAa,KAAuB;gBAChC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACxB,CAAC;YAED,0BAAQ,GAAR;gBACI,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,CAAC;YAOa,wBAAgB,GAA9B,UAAgC,IAAY;gBACxC,QAAQ,IAAI,CAAC,WAAW,EAAE,EAAE;oBACxB,KAAK,SAAS,CAAC,CAAC,OAAO,aAAa,CAAC,OAAO,CAAC;oBAC7C,KAAK,QAAQ,CAAC,CAAC,OAAO,aAAa,CAAC,MAAM,CAAC;oBAC3C,KAAK,QAAQ,CAAC,CAAC,OAAO,aAAa,CAAC,MAAM,CAAC;oBAC3C,KAAK,sBAAsB,CAAC,CAAC,OAAO,aAAa,CAAC,oBAAoB,CAAC;oBACvE,KAAK,qBAAqB,CAAC,CAAC,OAAO,aAAa,CAAC,mBAAmB,CAAC;oBACrE,KAAK,qBAAqB,CAAC,CAAC,OAAO,aAAa,CAAC,mBAAmB,CAAC;oBACrE,KAAK,oBAAoB,CAAC,CAAC,OAAO,aAAa,CAAC,kBAAkB,CAAC;oBACnE,OAAO,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,4BAA0B,IAAM,CAAC,CAAC;iBAC9D;YACL,CAAC;YAEa,sBAAc,GAA5B,UAA8B,IAAY;gBACtC,QAAQ,IAAI,CAAC,WAAW,EAAE,EAAE;oBACxB,KAAK,gBAAgB,CAAC,CAAC,OAAO,WAAW,CAAC,cAAc,CAAC;oBACzD,KAAK,aAAa,CAAC,CAAC,OAAO,WAAW,CAAC,WAAW,CAAC;oBACnD,KAAK,QAAQ,CAAC,CAAC,OAAO,WAAW,CAAC,MAAM,CAAC;oBACzC,OAAO,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,0BAAwB,IAAM,CAAC,CAAC;iBAC5D;YACL,CAAC;YACL,cAAC;QAAD,CAAC,AArCD,IAqCC;QArCqB,YAAO,UAqC5B,CAAA;QAED,IAAY,aAQX;QARD,WAAY,aAAa;YACrB,0DAAc,CAAA;YACd,wDAAa,CAAA;YACb,wDAAa,CAAA;YACb,oFAA2B,CAAA;YAC3B,kFAA0B,CAAA;YAC1B,kFAA0B,CAAA;YAC1B,gFAAyB,CAAA;QAC7B,CAAC,EARW,aAAa,GAAb,kBAAa,KAAb,kBAAa,QAQxB;QAED,IAAY,WAIX;QAJD,WAAY,WAAW;YACnB,qEAAsB,CAAA;YACtB,+DAAmB,CAAA;YACnB,qDAAc,CAAA;QAClB,CAAC,EAJW,WAAW,GAAX,gBAAW,KAAX,gBAAW,QAItB;QAED;YAAA;gBAII,SAAI,GAAmB,IAAI,CAAC;YA6FhC,CAAC;YA3FG,sBAAI,gCAAK;qBAAT;oBACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;oBACzB,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;wBACxB,OAAQ,GAAW,CAAC,IAAI,CAAC,KAAK,CAAC;qBAClC;oBACD,IAAI,GAAG,CAAC,IAAI,EAAE;wBACV,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;qBACzB;oBACD,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC1B,CAAC;;;eAAA;YAED,sBAAI,iCAAM;qBAAV;oBACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;oBACzB,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;wBACxB,OAAQ,GAAW,CAAC,IAAI,CAAC,MAAM,CAAC;qBACnC;oBACD,IAAI,GAAG,CAAC,IAAI,EAAE;wBACV,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;qBAC1B;oBACD,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC3B,CAAC;;;eAAA;YAED,sBAAI,4BAAC;qBAAL;oBACI,OAAQ,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;gBACzC,CAAC;;;eAAA;YAED,sBAAI,4BAAC;qBAAL;oBACI,OAAQ,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;gBACzC,CAAC;;;eAAA;YAED,sBAAI,6BAAE;qBAAN;oBACI,OAAQ,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;gBACzC,CAAC;;;eAAA;YAED,sBAAI,6BAAE;qBAAN;oBACI,OAAQ,IAAI,CAAC,OAAe,CAAC,IAAI,CAAC,EAAE,CAAC;gBACzC,CAAC;;;eAAA;YAED,sBAAI,kCAAO;qBAAX;oBACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;oBACzB,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrC,CAAC;;;eAAA;YAED,sBAAI,kCAAO;qBAAX;oBACI,OAAO,CAAC,IAAI,CAAC,wJAAwJ,CAAC,CAAC;oBACvK,OAAO,IAAI,CAAC,YAAY,CAAC;gBAC7B,CAAC;;;eAAA;YAED,sBAAI,sCAAW;qBAAf;oBACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;oBACzB,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrC,CAAC;;;eAAA;YAED,sBAAI,uCAAY;qBAAhB;oBACI,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;oBACvB,OAAO,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3E,CAAC;;;eAAA;YAED,sBAAI,wCAAa;qBAAjB;oBACI,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;oBACvB,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;wBACxB,IAAI,GAAG,CAAC,IAAI,EAAE;4BACV,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;yBACzB;wBACD,OAAQ,GAAW,CAAC,IAAI,CAAC,KAAK,CAAC;qBAClC;oBACD,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC1B,CAAC;;;eAAA;YAED,sBAAI,yCAAc;qBAAlB;oBACI,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;oBACzB,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;wBACxB,IAAI,GAAG,CAAC,IAAI,EAAE;4BACV,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;yBAC1B;wBACD,OAAQ,GAAW,CAAC,IAAI,CAAC,MAAM,CAAC;qBACnC;oBACD,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC3B,CAAC;;;eAAA;YAED,sBAAI,4BAAC;qBAAL;oBACI,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChC,CAAC;;;eAAA;YAED,sBAAI,4BAAC;qBAAL;oBACI,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChC,CAAC;;;eAAA;YAED,sBAAI,iCAAM;qBAAV;oBACI,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;gBACrC,CAAC;;;eAAA;YACL,oBAAC;QAAD,CAAC,AAjGD,IAiGC;QAjGY,kBAAa,gBAiGzB,CAAA;IACL,CAAC,EA1JoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA0JxB;AAAD,CAAC,EA1JS,UAAU,KAAV,UAAU,QA0JnB;AC1JD,IAAU,UAAU,CA2RnB;AA3RD,WAAU,UAAU;IAAC,IAAA,IAAI,CA2RxB;IA3RoB,WAAA,IAAI;QACrB;YAII,sBAAY,SAAkB,EAAE,aAAqF,EAAE,QAAqC;gBAH5J,UAAK,GAAG,IAAI,KAAK,EAAoB,CAAC;gBACtC,YAAO,GAAG,IAAI,KAAK,EAAsB,CAAC;gBAGtC,IAAI,SAAS,EAAE;oBACX,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;iBAC1D;YACL,CAAC;YAED,iCAAU,GAAV,UAAW,IAAY,EAAE,OAAqB;gBAC1C,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAI,IAAI,GAAqB,IAAI,CAAC;gBAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACnC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,OAAO,CAAC,WAAW,EAAE;wBAC9C,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBAChB,MAAM;qBACT;iBACJ;gBACD,IAAI,IAAI,KAAK,IAAI,EAAE;oBACf,IAAI,GAAG,IAAI,gBAAgB,EAAE,CAAC;oBAC9B,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;oBAC1B,IAAI,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;oBACtC,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC;oBACnC,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,UAAU,CAAC;oBACrC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;oBAE/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,KAAA,aAAa,CAAC,OAAO,CAAC;oBACxD,IAAI,CAAC,KAAK,GAAG,KAAA,WAAW,CAAC,WAAW,CAAC;oBACrC,IAAI,CAAC,KAAK,GAAG,KAAA,WAAW,CAAC,WAAW,CAAC;oBACrC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpB;gBACD,IAAI,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAC;gBACtC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gBACnB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gBACnB,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;gBACzB,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC1B,OAAO,MAAM,CAAC;YAClB,CAAC;YAED,qCAAc,GAAd,UAAe,QAA2B,EAAE,cAAuB;gBAC/D,KAAK,IAAI,GAAG,IAAI,QAAQ,EAAE;oBACtB,IAAI,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;wBAC9B,IAAI,CAAC,UAAU,CAAC,cAAc,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;qBACzH;iBACJ;YACL,CAAC;YAEM,oCAAa,GAApB,UAAqB,SAAiB,EAAE,aAAqF,EAAE,QAAoC;gBAC/J,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;YACzD,CAAC;YAEO,2BAAI,GAAZ,UAAa,SAAiB,EAAE,aAAoF,EAAE,QAAoC;gBAA1J,iBA2IC;gBA1IG,IAAI,aAAa,IAAI,IAAI;oBACrB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;gBAErD,IAAI,MAAM,GAAG,IAAI,kBAAkB,CAAC,SAAS,CAAC,CAAC;gBAC/C,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,CAAC,CAAC,CAAC;gBACjC,IAAI,IAAI,GAAqB,IAAI,CAAC;gBAElC,IAAI,aAAa,GAAG;oBAChB,OAAO,IAAI,EAAE;wBACT,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;wBAC7B,IAAI,IAAI,IAAI,IAAI,EAAE;4BACd,OAAO,QAAQ,IAAI,QAAQ,CAAC,KAAI,CAAC,CAAC;yBACrC;wBACD,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;wBACnB,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC;4BAChB,IAAI,GAAG,IAAI,CAAC;6BACX,IAAI,CAAC,IAAI,EAAE;4BACZ,IAAI,GAAG,IAAI,gBAAgB,EAAE,CAAC;4BAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;4BAEjB,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gCAC9B,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCAChC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gCACjC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;6BAC3B;4BAGD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;4BACxB,IAAI,CAAC,SAAS,GAAG,KAAA,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BACpD,IAAI,CAAC,SAAS,GAAG,KAAA,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BAEpD,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;4BACnC,IAAI,CAAC,KAAK,GAAG,KAAA,WAAW,CAAC,WAAW,CAAC;4BACrC,IAAI,CAAC,KAAK,GAAG,KAAA,WAAW,CAAC,WAAW,CAAC;4BACrC,IAAI,SAAS,IAAI,GAAG;gCAChB,IAAI,CAAC,KAAK,GAAG,KAAA,WAAW,CAAC,MAAM,CAAC;iCAC/B,IAAI,SAAS,IAAI,GAAG;gCACrB,IAAI,CAAC,KAAK,GAAG,KAAA,WAAW,CAAC,MAAM,CAAC;iCAC/B,IAAI,SAAS,IAAI,IAAI;gCACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,KAAA,WAAW,CAAC,MAAM,CAAC;4BAEjD,aAAa,CAAC,IAAI,EAAE,UAAC,OAAyB;gCAC1C,IAAI,OAAO,KAAK,IAAI,EAAE;oCAClB,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;oCAC/C,OAAO,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;iCACrC;gCACD,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;gCAC3B,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;oCAChB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;iCAC5C;gCACD,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCACtB,IAAI,CAAC,UAAU,EAAE,CAAC;gCAElB,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;oCAC7B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC;oCAC/B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC;oCACjC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;wCAC7B,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAAC,IAAI,GAAG,kIAAkI,CAAC,CAAC;qCAC3L;iCACJ;gCACD,aAAa,EAAE,CAAC;4BACpB,CAAC,CAAC,CAAC;4BACH,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BACtB,MAAM;yBACT;6BAAM;4BACH,IAAI,MAAM,GAAuB,IAAI,kBAAkB,EAAE,CAAC;4BAC1D,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;4BACnB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;4BAEnB,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;4BACrC,IAAI,MAAM,GAAG,CAAC,CAAC;4BACf,IAAI,WAAW,CAAC,iBAAiB,EAAE,IAAI,MAAM,EAAE;gCAC3C,MAAM,GAAG,CAAC,CAAC;6BACd;iCAAM,IAAI,WAAW,CAAC,iBAAiB,EAAE,IAAI,OAAO,EAAE;gCACnD,MAAM,GAAG,CAAC,CAAC;6BACd;iCAAM;gCACH,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC,GAAE,GAAG,CAAC,GAAG,EAAE,CAAC;6BACxD;4BAED,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;4BACxB,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC3B,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BAE3B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;4BACxB,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC/B,IAAI,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BAEhC,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;4BAC7C,CAAC,IAAI,UAAU,CAAC;4BAChB,CAAC,IAAI,UAAU,CAAC;4BAChB,KAAK,IAAI,UAAU,CAAC;4BACpB,MAAM,IAAI,UAAU,CAAC;4BAErB,IAAM,MAAM,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;4BAC/B,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;4BAEvF,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gCAG9B,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;oCAG9B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;iCAC3B;6BACJ;4BAED,IAAI,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;4BACpD,IAAI,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;4BACrD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;4BACxB,IAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;4BAC9C,IAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;4BAE9C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;4BACnE,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,cAAc,GAAG,MAAM,GAAG,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;4BAIzF,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;gCAExB,MAAM,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;6BACzF;iCAAM;gCAEH,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;gCACrD,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;gCAC1B,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;gCAC3B,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;gCAC7B,MAAM,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;6BAC1F;4BAED,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;4BAC5C,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;4BAE3B,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;yBAC7B;qBACJ;gBACL,CAAC,CAAC;gBAEF,aAAa,EAAE,CAAC;YACpB,CAAC;YAED,iCAAU,GAAV,UAAW,IAAY;gBACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,EAAE;wBAC9B,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;qBAC1B;iBACJ;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,8BAAO,GAAP;gBACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACxC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;iBACvC;YACL,CAAC;YACL,mBAAC;QAAD,CAAC,AAhND,IAgNC;QAhNY,iBAAY,eAgNxB,CAAA;QAED;YAII,4BAAY,IAAY;gBAFxB,UAAK,GAAW,CAAC,CAAC;gBAGd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC1C,CAAC;YAED,qCAAQ,GAAR;gBACI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM;oBAC/B,OAAO,IAAI,CAAC;gBAChB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;YACpC,CAAC;YAED,sCAAS,GAAT;gBACI,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC3B,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC9B,IAAI,KAAK,IAAI,CAAC,CAAC;oBACX,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,CAAC;gBAC7C,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC5C,CAAC;YAED,sCAAS,GAAT,UAAU,KAAoB;gBAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC3B,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC9B,IAAI,KAAK,IAAI,CAAC,CAAC;oBACX,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,CAAC;gBAC7C,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;gBACjC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACf,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;oBACzC,IAAI,KAAK,IAAI,CAAC,CAAC;wBAAE,MAAM;oBACvB,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,GAAG,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;oBAC5D,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;iBACzB;gBACD,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC5C,OAAO,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC;YACL,yBAAC;QAAD,CAAC,AArCD,IAqCC;QAED;YAAA;YA0BA,CAAC;YAhBU,qCAAU,GAAjB;gBACI,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;gBAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC5B,IAAI,MAAM,IAAI,KAAA,aAAa,CAAC,MAAM,EAAE;oBAChC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;iBAC3C;qBAAM,IAAI,IAAI,CAAC,SAAS,IAAI,KAAA,aAAa,CAAC,OAAO,EAAE;oBAChD,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;iBAC5C;qBAAM;oBACH,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;oBACpC,IAAI,MAAM,IAAI,KAAA,aAAa,CAAC,oBAAoB,EAAE;wBAC9C,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;qBAC5C;yBAAM;wBACH,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;qBAC3C;iBACJ;YACL,CAAC;YACL,uBAAC;QAAD,CAAC,AA1BD,IA0BC;QA1BY,qBAAgB,mBA0B5B,CAAA;QAED;YAAwC,sCAAa;YAArD;;YAIA,CAAC;YAAD,yBAAC;QAAD,CAAC,AAJD,CAAwC,KAAA,aAAa,GAIpD;QAJY,uBAAkB,qBAI9B,CAAA;IACL,CAAC,EA3RoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA2RxB;AAAD,CAAC,EA3RS,UAAU,KAAV,UAAU,QA2RnB;AC3RD,IAAU,UAAU,CAmQnB;AAnQD,WAAU,UAAU;IAAC,IAAA,IAAI,CAmQxB;IAnQoB,WAAA,IAAI;QACrB;YAWI,6BAAY,IAA6B,EAAE,QAAkB;gBAP7D,cAAS,GAAG,CAAC,CAAC;gBACd,iBAAY,GAAG,CAAC,CAAC;gBACjB,aAAQ,GAAG,CAAC,CAAC;gBACb,aAAQ,GAAG,CAAC,CAAC;gBACb,SAAI,GAAG,IAAI,KAAA,OAAO,EAAE,CAAC;gBACrB,WAAM,GAAG,KAAK,CAAC;gBAGX,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,QAAQ,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;gBAClE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;gBAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;gBACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAQ,CAAC;gBAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;oBACtC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtD,CAAC;YAED,sCAAQ,GAAR;gBACI,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,CAAC;YAED,mCAAK,GAAL;gBACI,IAAI,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC;YAED,oCAAM,GAAN;gBACI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;oBACjB,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ;wBAClB,IAAI,CAAC,kBAAkB,EAAE,CAAC;;wBAE1B,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBAEjC;qBAAM;oBACH,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ;wBAClB,IAAI,CAAC,kBAAkB,EAAE,CAAC;;wBAE1B,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBACjC;YACL,CAAC;YAED,gDAAkB,GAAlB;gBACI,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,QAAQ,GAAG,IAAI,CAAC,QAAQ,EACtF,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC;gBAC9B,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC;gBAC3E,IAAI,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,KAAA,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAA,SAAS,CAAC,MAAM,CAAC;gBACjF,IAAI,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;gBAC9D,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC;gBAC1D,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,QAAQ,GAAG,KAAK,CAAC;oBACrB,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;oBAEtB,IAAI,SAAS,IAAI,CAAC,EAAE;wBAChB,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;wBAC/C,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,cAAc,CAAC;wBAC/D,IAAI,CAAC,GAAG,KAAA,SAAS,CAAC,EAAE;4BAChB,CAAC,IAAI,KAAA,SAAS,CAAC,GAAG,CAAC;6BAClB,IAAI,CAAC,GAAG,CAAC,KAAA,SAAS,CAAC,EAAE;4BACtB,CAAC,IAAI,KAAA,SAAS,CAAC,GAAG,CAAC;wBACvB,CAAC,IAAI,SAAS,CAAC;wBACf,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACzC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,QAAQ,GAAG,IAAI,CAAC;qBACnB;oBAED,IAAI,YAAY,IAAI,CAAC,EAAE;wBACnB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;wBACrB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;wBACpE,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;wBAC3C,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;wBAC3C,QAAQ,GAAG,IAAI,CAAC;qBACnB;oBAED,IAAI,QAAQ,GAAG,CAAC,EAAE;wBACd,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;wBACjD,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;wBACtC,IAAI,CAAC,GAAG,OAAO;4BAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAC5E,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBACX,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBACX,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC7C,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;wBAClC,IAAI,CAAC,GAAG,OAAO;4BAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAC5E,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBACX,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBACX,QAAQ,GAAG,IAAI,CAAC;qBACnB;oBAED,IAAI,QAAQ,GAAG,CAAC,EAAE;wBACd,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;wBACzB,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC1B,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBAClF,IAAI,CAAC,GAAG,KAAA,SAAS,CAAC,EAAE;4BAChB,CAAC,IAAI,KAAA,SAAS,CAAC,GAAG,CAAC;6BAClB,IAAI,CAAC,GAAG,CAAC,KAAA,SAAS,CAAC,EAAE;4BACtB,CAAC,IAAI,KAAA,SAAS,CAAC,GAAG,CAAC;wBACvB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC,GAAG,QAAQ,CAAC;wBACvC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;wBACjC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACxB,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACxB,QAAQ,GAAG,IAAI,CAAC;qBACnB;oBAED,IAAI,QAAQ;wBAAE,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC3C;YACL,CAAC;YAED,gDAAkB,GAAlB;gBACI,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,QAAQ,GAAG,IAAI,CAAC,QAAQ,EACtF,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC;gBAC9B,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC;gBAC3E,IAAI,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,KAAA,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAA,SAAS,CAAC,MAAM,CAAC;gBACjF,IAAI,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,aAAa,EACzD,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC;gBAC1D,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,QAAQ,GAAG,KAAK,CAAC;oBACrB,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;oBAEtB,IAAI,SAAS,IAAI,CAAC,EAAE;wBAChB,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;wBAC/C,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,cAAc,CAAC;wBAC5C,IAAI,CAAC,GAAG,KAAA,SAAS,CAAC,EAAE;4BAChB,CAAC,IAAI,KAAA,SAAS,CAAC,GAAG,CAAC;6BAClB,IAAI,CAAC,GAAG,CAAC,KAAA,SAAS,CAAC,EAAE;4BAAE,CAAC,IAAI,KAAA,SAAS,CAAC,GAAG,CAAC;wBAC/C,CAAC,IAAI,SAAS,CAAC;wBACf,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACzC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;wBAC1B,QAAQ,GAAG,IAAI,CAAC;qBACnB;oBAED,IAAI,YAAY,IAAI,CAAC,EAAE;wBACnB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;wBACrB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;wBACpE,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC;wBAChC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,GAAG,YAAY,CAAC;wBAChC,QAAQ,GAAG,IAAI,CAAC;qBACnB;oBAED,IAAI,QAAQ,GAAG,CAAC,EAAE;wBACd,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC;wBACnF,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBACX,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBACX,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC;wBAC/E,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBACX,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;wBACX,QAAQ,GAAG,IAAI,CAAC;qBACnB;oBAED,IAAI,QAAQ,GAAG,CAAC,EAAE;wBACd,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;wBAChD,IAAI,CAAC,GAAG,KAAA,SAAS,CAAC,EAAE;4BAChB,CAAC,IAAI,KAAA,SAAS,CAAC,GAAG,CAAC;6BAClB,IAAI,CAAC,GAAG,CAAC,KAAA,SAAS,CAAC,EAAE;4BAAE,CAAC,IAAI,KAAA,SAAS,CAAC,GAAG,CAAC;wBAC/C,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;wBACzB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,EAAE,GAAG,CAAC,GAAG,YAAY,CAAC,GAAG,QAAQ,CAAC;wBACxE,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;wBACjC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACxB,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACxB,QAAQ,GAAG,IAAI,CAAC;qBACnB;oBAED,IAAI,QAAQ;wBAAE,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC3C;YACL,CAAC;YAED,gDAAkB,GAAlB;gBACI,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,QAAQ,GAAG,IAAI,CAAC,QAAQ,EACtF,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,YAAY;oBAAE,MAAM,CAAC,sBAAsB,EAAE,CAAC;gBAC1D,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,IAAI,CAAC,YAAY;wBAAE,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBAEtD,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC9B,IAAI,SAAS,IAAI,CAAC,EAAE;wBAChB,IAAI,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;wBAC/D,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;wBAC1D,QAAQ,IAAI,CAAC,GAAG,SAAS,CAAC;qBAC7B;oBAED,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;oBAC7B,IAAI,YAAY,IAAI,CAAC,EAAE;wBACnB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC;wBACxD,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC;qBAC3D;oBAED,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;oBACjD,IAAI,QAAQ,GAAG,CAAC,EAAE;wBACd,IAAI,MAAM,GAAG,OAAO;4BAAE,MAAM,GAAG,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,GAAG,MAAM,CAAC;wBACjH,IAAI,MAAM,GAAG,OAAO;4BAAE,MAAM,GAAG,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,GAAG,MAAM,CAAC;qBACpH;oBAED,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC1B,IAAI,QAAQ,GAAG,CAAC,EAAE;wBACd,IAAI,CAAC,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;wBACzD,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,kBAAkB,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;wBAC1D,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,QAAQ,CAAC;qBAC/B;oBAED,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;iBACvF;YACL,CAAC;YAED,gDAAkB,GAAlB;gBACI,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,QAAQ,GAAG,IAAI,CAAC,QAAQ,EACtF,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,YAAY;oBAAE,MAAM,CAAC,sBAAsB,EAAE,CAAC;gBAC1D,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,IAAI,CAAC,YAAY;wBAAE,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBAEtD,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC9B,IAAI,SAAS,IAAI,CAAC;wBAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC;oBAE1F,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;oBAC7B,IAAI,YAAY,IAAI,CAAC,EAAE;wBACnB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC;wBACpD,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC;qBACvD;oBAED,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;oBACjD,IAAI,QAAQ,GAAG,CAAC,EAAE;wBACd,IAAI,MAAM,GAAG,OAAO;4BAAE,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAC/F,IAAI,MAAM,GAAG,OAAO;4BAAE,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;qBAClG;oBAED,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC1B,IAAI,QAAQ,GAAG,CAAC;wBAAE,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC;oBAEjF,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;iBACvF;YACL,CAAC;YACL,0BAAC;QAAD,CAAC,AAhQD,IAgQC;QAhQY,wBAAmB,sBAgQ/B,CAAA;IAEL,CAAC,EAnQoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAmQxB;AAAD,CAAC,EAnQS,UAAU,KAAV,UAAU,QAmQnB;ACnQD,IAAU,UAAU,CAanB;AAbD,WAAU,UAAU;IAAC,IAAA,IAAI,CAaxB;IAboB,WAAA,IAAI;QACrB;YAA6C,2CAAc;YAQvD,iCAAa,IAAY;gBAAzB,YACI,kBAAM,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,SACxB;gBATD,WAAK,GAAG,IAAI,KAAK,EAAY,CAAC;gBAE9B,eAAS,GAAG,CAAC,CAAC;gBAAC,kBAAY,GAAG,CAAC,CAAC;gBAAC,cAAQ,GAAG,CAAC,CAAC;gBAAC,cAAQ,GAAG,CAAC,CAAC;gBAC5D,oBAAc,GAAG,CAAC,CAAC;gBAAC,aAAO,GAAG,CAAC,CAAC;gBAAC,aAAO,GAAG,CAAC,CAAC;gBAAC,kBAAY,GAAG,CAAC,CAAC;gBAAC,kBAAY,GAAG,CAAC,CAAC;gBAAC,kBAAY,GAAG,CAAC,CAAC;gBACnG,cAAQ,GAAG,KAAK,CAAC;gBACjB,WAAK,GAAG,KAAK,CAAC;;YAId,CAAC;YACL,8BAAC;QAAD,CAAC,AAXD,CAA6C,KAAA,cAAc,GAW1D;QAXY,4BAAuB,0BAWnC,CAAA;IACL,CAAC,EAboB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAaxB;AAAD,CAAC,EAbS,UAAU,KAAV,UAAU,QAanB;ACdD,IAAU,UAAU,CA+OnB;AA/OD,WAAU,UAAU;IAAC,IAAA,IAAI,CA+OxB;IA/OoB,WAAA,IAAI;QACxB;YAAA;gBACS,mBAAc,GAAG,IAAI,KAAK,EAAiB,CAAC;gBAC5C,0BAAqB,GAAG,IAAI,KAAK,EAAiB,CAAC;gBAEnD,iBAAY,GAAG,IAAI,KAAK,EAAU,CAAC;gBACnC,mBAAc,GAAG,IAAI,KAAK,EAAW,CAAC;gBACtC,cAAS,GAAG,IAAI,KAAK,EAAU,CAAC;gBAEhC,gBAAW,GAAG,IAAI,KAAA,IAAI,CAAgB;oBAC7C,OAAO,IAAI,KAAK,EAAU,CAAC;gBAC5B,CAAC,CAAC,CAAC;gBAEK,uBAAkB,GAAG,IAAI,KAAA,IAAI,CAAgB;oBACpD,OAAO,IAAI,KAAK,EAAU,CAAC;gBAC5B,CAAC,CAAC,CAAC;YA+NJ,CAAC;YA7NO,kCAAW,GAAlB,UAAoB,aAAgC;gBACnD,IAAI,QAAQ,GAAG,aAAa,CAAC;gBAC7B,IAAI,WAAW,GAAG,aAAa,CAAC,MAAM,IAAI,CAAC,CAAC;gBAE5C,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC;gBAChC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;gBACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE;oBACnC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBAEhB,IAAI,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC;gBACpC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;gBACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;oBAC1C,SAAS,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;gBAE1E,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC/B,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;gBAErB,OAAO,WAAW,GAAG,CAAC,EAAE;oBAEvB,IAAI,QAAQ,GAAG,WAAW,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;oBAChD,OAAO,IAAI,EAAE;wBACZ,KAAK,EACL,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;4BAClB,IAAI,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BAC/E,IAAI,GAAG,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BAC/C,IAAI,GAAG,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BAC/C,IAAI,GAAG,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BAC/C,KAAK,IAAI,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,WAAW,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,WAAW,EAAE;gCACpF,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;oCAAE,SAAS;gCAC7B,IAAI,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;gCACzB,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCAC3C,IAAI,YAAY,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;oCAC1D,IAAI,YAAY,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;wCAC1D,IAAI,YAAY,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC;4CAAE,MAAM,KAAK,CAAC;qCACvE;iCACD;6BACD;4BACD,MAAM;yBACN;wBAED,IAAI,IAAI,IAAI,CAAC,EAAE;4BACd,GAAG;gCACF,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oCAAE,MAAM;gCACzB,CAAC,EAAE,CAAC;6BACJ,QAAQ,CAAC,GAAG,CAAC,EAAE;4BAChB,MAAM;yBACN;wBAED,QAAQ,GAAG,CAAC,CAAC;wBACb,CAAC,GAAG,IAAI,CAAC;wBACT,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;qBAChC;oBAGD,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC;oBAC7D,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3B,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC;oBAC/C,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACrB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACvB,WAAW,EAAE,CAAC;oBAEd,IAAI,aAAa,GAAG,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;oBACxD,IAAI,SAAS,GAAG,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACzC,SAAS,CAAC,aAAa,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC,aAAa,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;oBACjG,SAAS,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;iBACzF;gBAED,IAAI,WAAW,IAAI,CAAC,EAAE;oBACrB,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3B,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3B,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC3B;gBAED,OAAO,SAAS,CAAC;YAClB,CAAC;YAED,gCAAS,GAAT,UAAW,aAA4B,EAAE,SAAwB;gBAChE,IAAI,QAAQ,GAAG,aAAa,CAAC;gBAC7B,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;gBACzC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;gBACzC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;gBAE1B,IAAI,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC;gBACvD,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;gBACvD,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC;gBAEjC,IAAI,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;gBACtD,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;gBAE1B,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;gBACxC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;gBAGnB,IAAI,YAAY,GAAG,CAAC,CAAC,EAAE,WAAW,GAAG,CAAC,CAAC;gBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;oBACpD,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;oBACnF,IAAI,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC7C,IAAI,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC7C,IAAI,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;oBAG7C,IAAI,MAAM,GAAG,KAAK,CAAC;oBACnB,IAAI,YAAY,IAAI,EAAE,EAAE;wBACvB,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;wBAC3B,IAAI,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;wBACxG,IAAI,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC5F,IAAI,QAAQ,IAAI,WAAW,IAAI,QAAQ,IAAI,WAAW,EAAE;4BACvD,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;4BACjB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;4BACjB,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;4BACxB,MAAM,GAAG,IAAI,CAAC;yBACd;qBACD;oBAGD,IAAI,CAAC,MAAM,EAAE;wBACZ,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;4BACvB,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BAC7B,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;yBAC3C;6BAAM;4BACN,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;4BAC9B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;yBAC7C;wBACD,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;wBACpC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;wBACnB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACjB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACjB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACjB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACjB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACjB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACjB,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;wBAClD,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;wBAC1B,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACxB,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACxB,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACxB,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;wBAC3D,YAAY,GAAG,EAAE,CAAC;qBAClB;iBACD;gBAED,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;oBACvB,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC7B,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBAC3C;gBAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACtD,cAAc,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC;oBAC1C,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC;wBAAE,SAAS;oBACzC,IAAI,UAAU,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;oBACnC,IAAI,SAAS,GAAG,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBAE1D,OAAO,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;oBAC5B,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC3B,IAAI,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,SAAS,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACvD,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACnD,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oBAC7C,IAAI,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oBAC/C,IAAI,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;oBAEvF,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE;wBAC9B,IAAI,EAAE,IAAI,CAAC;4BAAE,SAAS;wBACtB,IAAI,YAAY,GAAG,qBAAqB,CAAC,EAAE,CAAC,CAAC;wBAC7C,IAAI,YAAY,CAAC,MAAM,IAAI,CAAC;4BAAE,SAAS;wBACvC,IAAI,eAAe,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;wBACtC,IAAI,gBAAgB,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;wBACvC,IAAI,cAAc,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;wBAErC,IAAI,SAAS,GAAG,cAAc,CAAC,EAAE,CAAC,CAAC;wBACnC,IAAI,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBAE/E,IAAI,eAAe,IAAI,UAAU,IAAI,gBAAgB,IAAI,SAAS;4BAAE,SAAS;wBAC7E,IAAI,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;wBAChF,IAAI,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;wBAC9E,IAAI,QAAQ,IAAI,OAAO,IAAI,QAAQ,IAAI,OAAO,EAAE;4BAC/C,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;4BACrB,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;4BACxB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;4BACjB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;4BACjB,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;4BACpC,SAAS,GAAG,KAAK,CAAC;4BAClB,SAAS,GAAG,KAAK,CAAC;4BAClB,KAAK,GAAG,EAAE,CAAC;4BACX,KAAK,GAAG,EAAE,CAAC;4BACX,EAAE,GAAG,CAAC,CAAC;yBACP;qBACD;iBACD;gBAGD,KAAK,IAAI,CAAC,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;oBACpD,OAAO,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;oBAC5B,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;wBACxB,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC/B,cAAc,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAA;wBACzC,qBAAqB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;wBAClC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;qBAC7C;iBACD;gBAED,OAAO,cAAc,CAAC;YACvB,CAAC;YAEc,sBAAS,GAAxB,UAA0B,KAAa,EAAE,WAAmB,EAAE,QAA2B,EAAE,OAA0B;gBACpH,IAAI,QAAQ,GAAG,OAAO,CAAC,CAAC,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;gBACrE,IAAI,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAClC,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;gBACnD,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC,OAAO,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAC7H,QAAQ,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;YAEc,yBAAY,GAA3B,UAA6B,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW;gBACxG,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;YACvE,CAAC;YAEc,oBAAO,GAAtB,UAAwB,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,GAAW;gBACnG,IAAI,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC;gBACnC,OAAO,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChE,CAAC;YACF,mBAAC;QAAD,CAAC,AA7OD,IA6OC;QA7OY,iBAAY,eA6OxB,CAAA;IACF,CAAC,EA/OoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA+OxB;AAAD,CAAC,EA/OS,UAAU,KAAV,UAAU,QA+OnB;AE/OD,IAAU,UAAU,CA0YnB;AA1YD,WAAU,UAAU;IAAC,IAAA,IAAI,CA0YxB;IA1YoB,WAAA,IAAI;QAKrB;YAAA;gBACI,UAAK,GAAG,IAAI,KAAK,EAAU,CAAC;YAmBhC,CAAC;YAjBG,oBAAG,GAAH,UAAK,KAAa;gBACd,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACpC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;gBAClC,OAAO,CAAC,QAAQ,CAAC;YACrB,CAAC;YAED,yBAAQ,GAAR,UAAU,KAAa;gBACnB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC;YAC9C,CAAC;YAED,uBAAM,GAAN,UAAQ,KAAa;gBACjB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;YACtC,CAAC;YAED,sBAAK,GAAL;gBACI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;YAC1B,CAAC;YACL,aAAC;QAAD,CAAC,AApBD,IAoBC;QApBY,WAAM,SAoBlB,CAAA;QAUD;YAOI,eAAoB,CAAa,EAAS,CAAa,EAAS,CAAa,EAAS,CAAa;gBAA/E,kBAAA,EAAA,KAAa;gBAAS,kBAAA,EAAA,KAAa;gBAAS,kBAAA,EAAA,KAAa;gBAAS,kBAAA,EAAA,KAAa;gBAA/E,MAAC,GAAD,CAAC,CAAY;gBAAS,MAAC,GAAD,CAAC,CAAY;gBAAS,MAAC,GAAD,CAAC,CAAY;gBAAS,MAAC,GAAD,CAAC,CAAY;YACnG,CAAC;YAED,mBAAG,GAAH,UAAK,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;gBAC3C,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,4BAAY,GAAZ,UAAc,CAAQ;gBAClB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACb,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,6BAAa,GAAb,UAAe,GAAW;gBACtB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBACjD,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;gBAChD,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;gBAChD,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;gBAChD,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;gBAC1E,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,mBAAG,GAAH,UAAK,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;gBAC3C,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;gBACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;gBACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;gBACZ,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;gBACZ,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,qBAAK,GAAL;gBACI,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;qBACtB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBAEhC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;qBACtB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBAEhC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;qBACtB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBAEhC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;qBACtB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBAChC,OAAO,IAAI,CAAC;YAChB,CAAC;YAEM,qBAAe,GAAtB,UAAuB,KAAY,EAAE,KAAa;gBAC9C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,GAAG,CAAC;gBAC9C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,GAAG,CAAC;gBAC9C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC;gBAC7C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,GAAG,GAAG,CAAC;YAC3C,CAAC;YAEM,mBAAa,GAApB,UAAsB,KAAY,EAAE,KAAa;gBAC7C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,GAAG,CAAC;gBAC9C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC;gBAC7C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,GAAG,GAAG,CAAC;YAC3C,CAAC;YAtEa,WAAK,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC9B,SAAG,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5B,WAAK,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC9B,UAAI,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,aAAO,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAmElD,YAAC;SAAA,AAxED,IAwEC;QAxEY,UAAK,QAwEjB,CAAA;QAED;YAAA;YA6CA,CAAC;YArCU,eAAK,GAAZ,UAAc,KAAa,EAAE,GAAW,EAAE,GAAW;gBACjD,IAAI,KAAK,GAAG,GAAG;oBAAE,OAAO,GAAG,CAAC;gBAC5B,IAAI,KAAK,GAAG,GAAG;oBAAE,OAAO,GAAG,CAAC;gBAC5B,OAAO,KAAK,CAAC;YACjB,CAAC;YAEM,gBAAM,GAAb,UAAe,OAAe;gBAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;YAChD,CAAC;YAEM,gBAAM,GAAb,UAAe,OAAe;gBAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;YAChD,CAAC;YAEM,gBAAM,GAAb,UAAe,KAAa;gBACxB,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,CAAC;YAEM,eAAK,GAAZ,UAAc,CAAS;gBACnB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChD,CAAC;YAEM,cAAI,GAAX,UAAa,CAAS;gBAClB,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,CAAC;gBACnC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC;YAEM,0BAAgB,GAAvB,UAAyB,GAAW,EAAE,GAAW;gBAC7C,OAAO,SAAS,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;YACvE,CAAC;YAEM,8BAAoB,GAA3B,UAA6B,GAAW,EAAE,GAAW,EAAE,IAAY;gBAC/D,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;gBACtB,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;gBAClB,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC;oBAAE,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;gBACxE,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;YACvD,CAAC;YA3CM,YAAE,GAAG,SAAS,CAAC;YACf,aAAG,GAAG,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;YACvB,0BAAgB,GAAG,GAAG,GAAG,SAAS,CAAC,EAAE,CAAC;YACtC,gBAAM,GAAG,SAAS,CAAC,gBAAgB,CAAC;YACpC,0BAAgB,GAAG,SAAS,CAAC,EAAE,GAAG,GAAG,CAAC;YACtC,gBAAM,GAAG,SAAS,CAAC,gBAAgB,CAAC;YAuC/C,gBAAC;SAAA,AA7CD,IA6CC;QA7CY,cAAS,YA6CrB,CAAA;QAED;YAAA;YAKA,CAAC;YAHG,6BAAK,GAAL,UAAM,KAAa,EAAE,GAAW,EAAE,CAAS;gBACvC,OAAO,KAAK,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACzD,CAAC;YACL,oBAAC;QAAD,CAAC,AALD,IAKC;QALqB,kBAAa,gBAKlC,CAAA;QAED;YAAyB,uBAAa;YAGlC,aAAa,KAAa;gBAA1B,YACI,iBAAO,SAEV;gBALS,WAAK,GAAG,CAAC,CAAC;gBAIhB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;YACvB,CAAC;YAED,2BAAa,GAAb,UAAe,CAAS;gBACpB,IAAI,CAAC,IAAI,GAAG;oBAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACrD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAClF,CAAC;YACL,UAAC;QAAD,CAAC,AAZD,CAAyB,aAAa,GAYrC;QAZY,QAAG,MAYf,CAAA;QAED;YAA4B,0BAAG;YAC3B,gBAAa,KAAa;uBACtB,kBAAM,KAAK,CAAC;YAChB,CAAC;YAED,8BAAa,GAAb,UAAe,CAAS;gBACpB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC5E,CAAC;YACL,aAAC;QAAD,CAAC,AARD,CAA4B,GAAG,GAQ9B;QARY,WAAM,SAQlB,CAAA;QAED;YAAA;YAqEA,CAAC;YAlEU,eAAS,GAAhB,UAAqB,MAAoB,EAAE,WAAmB,EAAE,IAAkB,EAAE,SAAiB,EAAE,WAAmB;gBACtH,KAAK,IAAI,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,WAAW,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE;oBAC9E,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;iBACvB;YACL,CAAC;YAEM,kBAAY,GAAnB,UAAwB,KAAe,EAAE,IAAY,EAAE,KAAc;gBAAd,sBAAA,EAAA,SAAc;gBACjE,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC;gBAC3B,IAAI,OAAO,IAAI,IAAI;oBAAE,OAAO,KAAK,CAAC;gBAClC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;gBACpB,IAAI,OAAO,GAAG,IAAI,EAAE;oBAChB,KAAK,IAAI,CAAC,GAAG,OAAO,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE;wBAAE,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;iBACzD;gBACD,OAAO,KAAK,CAAC;YACjB,CAAC;YAEM,yBAAmB,GAA1B,UAA+B,KAAe,EAAE,IAAY,EAAE,KAAc;gBAAd,sBAAA,EAAA,SAAc;gBACxE,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI;oBAAE,OAAO,KAAK,CAAC;gBACvC,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAClD,CAAC;YAEM,cAAQ,GAAf,UAAoB,IAAY,EAAE,YAAe;gBAC7C,IAAI,KAAK,GAAG,IAAI,KAAK,CAAI,IAAI,CAAC,CAAC;gBAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE;oBAAE,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;gBACvD,OAAO,KAAK,CAAC;YACjB,CAAC;YAEM,mBAAa,GAApB,UAAsB,IAAY;gBAC9B,IAAI,KAAK,CAAC,qBAAqB,EAAE;oBAC7B,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,CAAA;iBAChC;qBAAM;oBACH,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,CAAC;oBACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;wBAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBACpD,OAAO,KAAK,CAAC;iBAChB;YACL,CAAC;YAEM,mBAAa,GAApB,UAAsB,IAAY;gBAC9B,IAAI,KAAK,CAAC,qBAAqB,EAAE;oBAC7B,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,CAAA;iBAC9B;qBAAM;oBACH,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,CAAC;oBACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;wBAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;oBACpD,OAAO,KAAK,CAAC;iBAChB;YACL,CAAC;YAEM,kBAAY,GAAnB,UAAqB,KAAoB;gBACrC,OAAO,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACzE,CAAC;YAEM,uBAAiB,GAAxB,UAA0B,KAAa;gBACnC,OAAO,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACpE,CAAC;YAGM,2BAAqB,GAA5B,UAA8B,KAAa,EAAE,KAAe;YAE5D,CAAC;YAEM,cAAQ,GAAf,UAAoB,KAAe,EAAE,OAAU,EAAE,QAAe;gBAAf,yBAAA,EAAA,eAAe;gBAC5D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACnC,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,OAAO;wBAAE,OAAO,IAAI,CAAC;iBACxC;gBACD,OAAO,KAAK,CAAC;YACjB,CAAC;YAnEM,2BAAqB,GAAG,OAAM,CAAC,YAAY,CAAC,KAAK,WAAW,CAAC;YAoExE,YAAC;SAAA,AArED,IAqEC;QArEY,UAAK,QAqEjB,CAAA;QAED;YAAA;YAQA,CAAC;YAPU,mBAAQ,GAAf,UAAgB,QAAkB;gBAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC5C,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;oBACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;iBAC3H;YACL,CAAC;YACL,iBAAC;QAAD,CAAC,AARD,IAQC;QARY,eAAU,aAQtB,CAAA;QAED;YAII,cAAa,YAAqB;gBAH1B,UAAK,GAAG,IAAI,KAAK,EAAK,CAAC;gBAI3B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YACrC,CAAC;YAED,qBAAM,GAAN;gBACI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YAC1E,CAAC;YAED,mBAAI,GAAJ,UAAM,IAAO;gBACT,IAAK,IAAY,CAAC,KAAK;oBAAG,IAAY,CAAC,KAAK,EAAE,CAAC;gBAC/C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1B,CAAC;YAED,sBAAO,GAAP,UAAS,KAAmB;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACnC,IAAK,KAAK,CAAC,CAAC,CAAS,CAAC,KAAK;wBAAG,KAAK,CAAC,CAAC,CAAS,CAAC,KAAK,EAAE,CAAC;oBACvD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;iBAC5B;YACL,CAAC;YAED,oBAAK,GAAL;gBACI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;YAC1B,CAAC;YACL,WAAC;QAAD,CAAC,AA3BD,IA2BC;QA3BY,SAAI,OA2BhB,CAAA;QAED;YACI,iBAAoB,CAAK,EAAS,CAAK;gBAAnB,kBAAA,EAAA,KAAK;gBAAS,kBAAA,EAAA,KAAK;gBAAnB,MAAC,GAAD,CAAC,CAAI;gBAAS,MAAC,GAAD,CAAC,CAAI;YACvC,CAAC;YAED,qBAAG,GAAH,UAAK,CAAS,EAAE,CAAS;gBACrB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACX,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,wBAAM,GAAN;gBACI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gBACf,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YACpC,CAAC;YAED,2BAAS,GAAT;gBACI,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;gBACxB,IAAI,GAAG,IAAI,CAAC,EAAE;oBACV,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC;oBACd,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC;iBACjB;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YACL,cAAC;QAAD,CAAC,AAxBD,IAwBC;QAxBY,YAAO,UAwBnB,CAAA;QAED;YAAA;gBACI,aAAQ,GAAG,KAAK,CAAC;gBACjB,oBAAe,GAAG,CAAC,CAAC;gBACpB,UAAK,GAAG,CAAC,CAAC;gBACV,cAAS,GAAG,CAAC,CAAC;gBAEN,aAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;gBAC7B,eAAU,GAAG,CAAC,CAAC;gBACf,cAAS,GAAG,CAAC,CAAC;YAiB1B,CAAC;YAfG,2BAAM,GAAN;gBACI,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;gBAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC;gBACjC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC;gBAC7B,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC;gBAC7B,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC3D,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;gBAEpB,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE;oBACpB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;oBACxD,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;oBACnB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;iBACvB;YACL,CAAC;YACL,iBAAC;QAAD,CAAC,AAzBD,IAyBC;QAzBY,eAAU,aAyBtB,CAAA;QAOD;YAOI,sBAAa,UAAuB;gBAAvB,2BAAA,EAAA,eAAuB;gBALpC,gBAAW,GAAG,CAAC,CAAC;gBAChB,cAAS,GAAG,CAAC,CAAC;gBACd,SAAI,GAAG,CAAC,CAAC;gBACT,UAAK,GAAG,IAAI,CAAC;gBAGT,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAS,UAAU,CAAC,CAAC;YAChD,CAAC;YAED,oCAAa,GAAb;gBACI,OAAO,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAClD,CAAC;YAED,+BAAQ,GAAR,UAAU,KAAa;gBACnB,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM;oBACrC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,KAAK,CAAC;gBACtC,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC;oBAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;gBAChE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YACtB,CAAC;YAED,8BAAO,GAAP;gBACI,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;oBACtB,IAAI,IAAI,CAAC,KAAK,EAAE;wBACZ,IAAI,IAAI,GAAG,CAAC,CAAC;wBACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACzC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;yBAC1B;wBACD,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;wBACtC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;qBACtB;oBACD,OAAO,IAAI,CAAC,IAAI,CAAC;iBACpB;qBAAM;oBACH,OAAO,CAAC,CAAC;iBACZ;YACL,CAAC;YACL,mBAAC;QAAD,CAAC,AAtCD,IAsCC;QAtCY,iBAAY,eAsCxB,CAAA;IACL,CAAC,EA1YoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA0YxB;AAAD,CAAC,EA1YS,UAAU,KAAV,UAAU,QA0YnB;AEzYD,IAAU,UAAU,CA6GnB;AA7GD,WAAU,UAAU;IAAC,IAAA,IAAI,CA6GxB;IA7GoB,WAAA,IAAI;QACrB;YAGI,oBAAY,IAAY;gBACpB,IAAI,IAAI,IAAI,IAAI;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC;YAGL,iBAAC;QAAD,CAAC,AATD,IASC;QATqB,eAAU,aAS/B,CAAA;QAED;YAA+C,oCAAU;YASrD,0BAAY,IAAY;gBAAxB,YACI,kBAAM,IAAI,CAAC,SACd;gBARD,QAAE,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;gBAG/C,yBAAmB,GAAG,CAAC,CAAC;gBACxB,sBAAgB,GAAqB,KAAI,CAAC;;YAI1C,CAAC;YAED,kDAAuB,GAAvB,UAAwB,IAAU,EAAE,aAAgC;gBAChE,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACtF,CAAC;YAOD,+CAAoB,GAApB,UAAsB,IAAU,EAAE,KAAa,EAAE,KAAa,EAAE,aAAgC,EAAE,MAAc,EAAE,MAAc;gBAC5H,KAAK,GAAG,MAAM,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC;gBACvC,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAClC,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC9B,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAI,KAAK,IAAI,IAAI,EAAE;oBACf,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC;wBAAE,QAAQ,GAAG,WAAW,CAAC;oBACnD,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;oBAC3B,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC;oBACf,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC;oBACf,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oBAC/C,KAAK,IAAI,GAAC,GAAG,KAAK,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,KAAK,EAAE,GAAC,IAAI,CAAC,EAAE,CAAC,IAAI,MAAM,EAAE;wBAC5D,IAAI,EAAE,GAAG,QAAQ,CAAC,GAAC,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,GAAC,GAAG,CAAC,CAAC,CAAC;wBAC3C,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;wBACvC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;qBAC9C;oBACD,OAAO;iBACV;gBACD,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;gBACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE;oBAC/B,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACjB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACX,IAAI,IAAI,CAAC,CAAC;iBACb;gBACD,IAAI,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC;gBACnC,IAAI,WAAW,CAAC,MAAM,IAAI,CAAC,EAAE;oBACzB,KAAK,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE;wBACvD,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;wBACnB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;wBACnB,CAAC,IAAI,CAAC,CAAC;wBACP,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;4BACvB,IAAI,GAAG,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;4BACzC,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACrE,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;4BAClD,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;yBACrD;wBACD,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;wBACtB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;qBAC7B;iBACJ;qBAAM;oBACH,IAAI,MAAM,GAAG,WAAW,CAAC;oBACzB,KAAK,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,MAAM,EAAE;wBACtE,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;wBACnB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;wBACnB,CAAC,IAAI,CAAC,CAAC;wBACP,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;4BAC/B,IAAI,GAAG,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;4BACzC,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACjG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;4BAClD,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;yBACrD;wBACD,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;wBACtB,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;qBAC7B;iBACJ;YACL,CAAC;YAED,iCAAM,GAAN,UAAQ,UAA4B;gBAChC,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;oBACpB,UAAU,CAAC,KAAK,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACxD,KAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;iBAC1E;;oBACG,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC;gBAE5B,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;oBACvB,UAAU,CAAC,QAAQ,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAChE,KAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;iBACnF;;oBACG,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAE/B,UAAU,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;gBAC1D,UAAU,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;YACxD,CAAC;YA9Fc,uBAAM,GAAG,CAAC,CAAC;YA+F9B,uBAAC;SAAA,AAhGD,CAA+C,UAAU,GAgGxD;QAhGqB,qBAAgB,mBAgGrC,CAAA;IACL,CAAC,EA7GoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA6GxB;AAAD,CAAC,EA7GS,UAAU,KAAV,UAAU,QA6GnB;AE7GD,IAAU,UAAU,CAInB;AAJD,WAAU,UAAU;IAAC,IAAA,IAAI,CAIxB;IAJoB,WAAA,IAAI;QACrB,IAAY,cAEX;QAFD,WAAY,cAAc;YACtB,uDAAM,CAAA;YAAE,iEAAW,CAAA;YAAE,mDAAI,CAAA;YAAE,+DAAU,CAAA;YAAE,mDAAI,CAAA;YAAE,qDAAK,CAAA;YAAE,2DAAQ,CAAA;QAChE,CAAC,EAFW,cAAc,GAAd,mBAAc,KAAd,mBAAc,QAEzB;IACL,CAAC,EAJoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAIxB;AAAD,CAAC,EAJS,UAAU,KAAV,UAAU,QAInB;ACJD,IAAU,UAAU,CAenB;AAfD,WAAU,UAAU;IAAC,IAAA,IAAI,CAexB;IAfoB,WAAA,IAAI;QACrB;YAA2C,yCAAgB;YAGvD,+BAAa,IAAY;gBAAzB,YACI,kBAAM,IAAI,CAAC,SACd;gBAJD,WAAK,GAAG,IAAI,KAAA,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;YAI9B,CAAC;YAED,oCAAI,GAAJ;gBACI,IAAI,IAAI,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;gBAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpC,OAAO,IAAI,CAAC;YAChB,CAAC;YACL,4BAAC;QAAD,CAAC,AAbD,CAA2C,KAAA,gBAAgB,GAa1D;QAbY,0BAAqB,wBAajC,CAAA;IACL,CAAC,EAfoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAexB;AAAD,CAAC,EAfS,UAAU,KAAV,UAAU,QAenB;AChBD,IAAU,UAAU,CAmBnB;AAnBD,WAAU,UAAU;IAAC,IAAA,IAAI,CAmBxB;IAnBoB,WAAA,IAAI;QACrB;YAAwC,sCAAgB;YAMpD,4BAAa,IAAY;gBAAzB,YACI,kBAAM,IAAI,CAAC,SACd;gBAJD,WAAK,GAAG,IAAI,KAAA,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;;YAI7C,CAAC;YAED,iCAAI,GAAJ;gBACI,IAAI,IAAI,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;gBACxC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAC5B,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpC,OAAO,IAAI,CAAC;YAChB,CAAC;YACL,yBAAC;QAAD,CAAC,AAjBD,CAAwC,KAAA,gBAAgB,GAiBvD;QAjBY,uBAAkB,qBAiB9B,CAAA;IACL,CAAC,EAnBoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAmBxB;AAAD,CAAC,EAnBS,UAAU,KAAV,UAAU,QAmBnB;AClBD,IAAU,UAAU,CA2EnB;AA3ED,WAAU,UAAU;IAAC,IAAA,IAAI,CA2ExB;IA3EoB,WAAA,IAAI;QACrB;YAAoC,kCAAgB;YAahD,wBAAa,IAAY;gBAAzB,YACI,kBAAM,IAAI,CAAC,SACd;gBAVD,WAAK,GAAG,IAAI,KAAA,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAM9B,eAAS,GAAG,IAAI,KAAA,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;YAIlC,CAAC;YAED,sCAAa,GAAb;gBACI,OAAO,IAAI,CAAC,UAAU,CAAC;YAC3B,CAAC;YAGD,sCAAa,GAAb,UAAe,UAA0B;gBACrC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBAC7B,IAAI,UAAU,IAAI,IAAI,EAAE;oBACpB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;oBAC9B,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;oBACpC,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,mBAAmB,CAAC;oBAC1D,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;oBACtC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;oBACtC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;oBACxC,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,mBAAmB,CAAA;iBAC5D;YACL,CAAC;YAED,6BAAI,GAAJ;gBACI,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI;oBAAE,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;gBAEzD,IAAI,IAAI,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACtB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAEpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClB,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBACzD,KAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAC7E,IAAI,CAAC,GAAG,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC9C,KAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC3D,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAC1D,KAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAC7E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;gBAGlC,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;oBACpB,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClD,KAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;iBACpE;gBACD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAE1B,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,sCAAa,GAAb;gBACI,IAAI,IAAI,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACtB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAC9C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBAErE,OAAO,IAAI,CAAC;YAChB,CAAC;YACL,qBAAC;QAAD,CAAC,AAzED,CAAoC,KAAA,gBAAgB,GAyEnD;QAzEY,mBAAc,iBAyE1B,CAAA;IACL,CAAC,EA3EoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA2ExB;AAAD,CAAC,EA3ES,UAAU,KAAV,UAAU,QA2EnB;AC3ED,IAAU,UAAU,CAqBnB;AArBD,WAAU,UAAU;IAAC,IAAA,IAAI,CAqBxB;IArBoB,WAAA,IAAI;QACrB;YAAoC,kCAAgB;YAKhD,wBAAa,IAAY;gBAAzB,YACI,kBAAM,IAAI,CAAC,SACd;gBALD,YAAM,GAAG,KAAK,CAAC;gBAAC,mBAAa,GAAG,KAAK,CAAC;gBACtC,WAAK,GAAG,IAAI,KAAA,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;YAI9B,CAAC;YAED,6BAAI,GAAJ;gBACI,IAAI,IAAI,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;gBACpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClB,IAAI,CAAC,OAAO,GAAG,IAAI,KAAK,CAAS,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACtD,KAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;gBACxC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpC,OAAO,IAAI,CAAC;YAChB,CAAC;YACL,qBAAC;QAAD,CAAC,AAnBD,CAAoC,KAAA,gBAAgB,GAmBnD;QAnBY,mBAAc,iBAmB1B,CAAA;IACL,CAAC,EArBoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAqBxB;AAAD,CAAC,EArBS,UAAU,KAAV,UAAU,QAqBnB;ACtBD,IAAU,UAAU,CAiCnB;AAjCD,WAAU,UAAU;IAAC,IAAA,IAAI,CAiCxB;IAjCoB,WAAA,IAAI;QACrB;YAAqC,mCAAgB;YAIjD,yBAAa,IAAY;gBAAzB,YACI,kBAAM,IAAI,CAAC,SACd;gBAJD,WAAK,GAAG,IAAI,KAAA,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;YAIpC,CAAC;YAED,8CAAoB,GAApB,UAAqB,IAAU,EAAE,KAAc;gBAC3C,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;gBACxB,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBACxD,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBACxD,OAAO,KAAK,CAAC;YACjB,CAAC;YAED,8CAAoB,GAApB,UAAqB,IAAU;gBAC3B,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;gBACxB,IAAI,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACjF,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;gBAClC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAA,SAAS,CAAC,MAAM,CAAC;YAC/C,CAAC;YAED,8BAAI,GAAJ;gBACI,IAAI,IAAI,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;gBACrC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC9B,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpC,OAAO,IAAI,CAAC;YAChB,CAAC;YACL,sBAAC;QAAD,CAAC,AA/BD,CAAqC,KAAA,gBAAgB,GA+BpD;QA/BY,oBAAe,kBA+B3B,CAAA;IACL,CAAC,EAjCoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAiCxB;AAAD,CAAC,EAjCS,UAAU,KAAV,UAAU,QAiCnB;AChCD,IAAU,UAAU,CA2KnB;AA3KD,WAAU,UAAU;IAAC,IAAA,IAAI,CA2KxB;IA3KoB,WAAA,IAAI;QACrB;YAAsC,oCAAU;YAgE5C,0BAAY,IAAY;gBAAxB,YACI,kBAAM,IAAI,CAAC,SACd;gBApBD,OAAC,GAAG,CAAC,CAAC;gBACN,OAAC,GAAG,CAAC,CAAC;gBACN,YAAM,GAAG,CAAC,CAAC;gBACX,YAAM,GAAG,CAAC,CAAC;gBACX,cAAQ,GAAG,CAAC,CAAC;gBACb,WAAK,GAAG,CAAC,CAAC;gBACV,YAAM,GAAG,CAAC,CAAC;gBACX,WAAK,GAAG,IAAI,KAAA,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAM9B,YAAM,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBAChC,SAAG,GAAG,KAAA,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBAE7B,eAAS,GAAG,IAAI,KAAA,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;YAIlC,CAAC;YAED,uCAAY,GAAZ;gBACI,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC;gBACxE,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC1E,IAAI,MAAM,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;gBAChF,IAAI,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;gBACjF,IAAI,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,YAAY,CAAC;gBACxD,IAAI,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,YAAY,CAAC;gBACzD,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;gBAC5C,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBAC5B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBAC5B,IAAI,SAAS,GAAG,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;gBACtC,IAAI,SAAS,GAAG,MAAM,GAAG,GAAG,CAAC;gBAC7B,IAAI,SAAS,GAAG,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;gBACtC,IAAI,SAAS,GAAG,MAAM,GAAG,GAAG,CAAC;gBAC7B,IAAI,UAAU,GAAG,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;gBACxC,IAAI,UAAU,GAAG,OAAO,GAAG,GAAG,CAAC;gBAC/B,IAAI,UAAU,GAAG,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;gBACxC,IAAI,UAAU,GAAG,OAAO,GAAG,GAAG,CAAC;gBAC/B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBACzB,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC;gBACrD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC;gBACrD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,UAAU,CAAC;gBACtD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,UAAU,GAAG,SAAS,CAAC;gBACtD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,UAAU,GAAG,UAAU,CAAC;gBACvD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,UAAU,GAAG,UAAU,CAAC;gBACvD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,UAAU,GAAG,SAAS,CAAC;gBACtD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,UAAU,CAAC;YAC1D,CAAC;YAED,oCAAS,GAAT,UAAU,MAAqB;gBAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;gBACnB,IAAI,MAAM,CAAC,MAAM,EAAE;oBACf,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;oBAClB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;oBACnB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;oBAClB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;oBAClB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;oBACnB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;oBAClB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;oBACnB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;iBACtB;qBAAM;oBACH,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;oBAClB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;oBACnB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;oBAClB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;oBAClB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;oBACnB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;oBAClB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;oBACnB,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;iBACtB;YACL,CAAC;YAED,+CAAoB,GAApB,UAAqB,IAAU,EAAE,aAAgC,EAAE,MAAc,EAAE,MAAc;gBAC7F,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC/B,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;gBACtB,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC;gBAC3B,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;gBAC/C,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC;gBAE7B,OAAO,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC7C,OAAO,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC7C,aAAa,CAAC,MAAM,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;gBACtD,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC1D,MAAM,IAAI,MAAM,CAAC;gBAEjB,OAAO,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC7C,OAAO,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC7C,aAAa,CAAC,MAAM,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;gBACtD,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC1D,MAAM,IAAI,MAAM,CAAC;gBAEjB,OAAO,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC7C,OAAO,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC7C,aAAa,CAAC,MAAM,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;gBACtD,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC1D,MAAM,IAAI,MAAM,CAAC;gBAEjB,OAAO,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC7C,OAAO,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;gBAC7C,aAAa,CAAC,MAAM,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;gBACtD,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;YAC9D,CAAC;YAED,+BAAI,GAAJ;gBACI,IAAI,IAAI,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;gBAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACtB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC1B,KAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC7C,KAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnD,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpC,OAAO,IAAI,CAAC;YAChB,CAAC;YAvKM,oBAAG,GAAG,CAAC,CAAC;YACR,oBAAG,GAAG,CAAC,CAAC;YACR,oBAAG,GAAG,CAAC,CAAC;YACR,oBAAG,GAAG,CAAC,CAAC;YACR,oBAAG,GAAG,CAAC,CAAC;YACR,oBAAG,GAAG,CAAC,CAAC;YACR,oBAAG,GAAG,CAAC,CAAC;YACR,oBAAG,GAAG,CAAC,CAAC;YAER,mBAAE,GAAG,CAAC,CAAC;YACP,mBAAE,GAAG,CAAC,CAAC;YACP,oBAAG,GAAG,CAAC,CAAC;YACR,oBAAG,GAAG,CAAC,CAAC;YACR,oBAAG,GAAG,CAAC,CAAC;YACR,oBAAG,GAAG,CAAC,CAAC;YACR,mBAAE,GAAG,CAAC,CAAC;YACP,mBAAE,GAAG,CAAC,CAAC;YAEP,mBAAE,GAAG,CAAC,CAAC;YACP,mBAAE,GAAG,CAAC,CAAC;YACP,oBAAG,GAAG,EAAE,CAAC;YACT,oBAAG,GAAG,EAAE,CAAC;YACT,oBAAG,GAAG,EAAE,CAAC;YACT,oBAAG,GAAG,EAAE,CAAC;YACT,mBAAE,GAAG,EAAE,CAAC;YACR,mBAAE,GAAG,EAAE,CAAC;YAER,mBAAE,GAAG,EAAE,CAAC;YACR,mBAAE,GAAG,EAAE,CAAC;YACR,oBAAG,GAAG,EAAE,CAAC;YACT,oBAAG,GAAG,EAAE,CAAC;YACT,oBAAG,GAAG,EAAE,CAAC;YACT,oBAAG,GAAG,EAAE,CAAC;YACT,mBAAE,GAAG,EAAE,CAAC;YACR,mBAAE,GAAG,EAAE,CAAC;YAER,mBAAE,GAAG,EAAE,CAAC;YACR,mBAAE,GAAG,EAAE,CAAC;YACR,oBAAG,GAAG,EAAE,CAAC;YACT,oBAAG,GAAG,EAAE,CAAC;YACT,oBAAG,GAAG,EAAE,CAAC;YACT,oBAAG,GAAG,EAAE,CAAC;YACT,mBAAE,GAAG,EAAE,CAAC;YACR,mBAAE,GAAG,EAAE,CAAC;YA6HnB,uBAAC;SAAA,AAzKD,CAAsC,KAAA,UAAU,GAyK/C;QAzKY,qBAAgB,mBAyK5B,CAAA;IACL,CAAC,EA3KoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QA2KxB;AAAD,CAAC,EA3KS,UAAU,KAAV,UAAU,QA2KnB;AC5KD,IAAU,UAAU,CAqBnB;AArBD,WAAU,UAAU;IAAC,IAAA,IAAI,CAqBxB;IArBoB,WAAA,IAAI;QACxB;YAIC,sBAAa,OAAe,EAAE,OAAe;gBAH7C,YAAO,GAAG,CAAC,CAAC;gBACZ,YAAO,GAAG,CAAC,CAAC;gBAGX,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACxB,CAAC;YAED,4BAAK,GAAL,UAAM,QAAkB;YACxB,CAAC;YAED,gCAAS,GAAT,UAAU,QAAiB,EAAE,EAAW,EAAE,KAAY,EAAE,IAAW;gBAClE,QAAQ,CAAC,CAAC,IAAI,KAAA,SAAS,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBACtE,QAAQ,CAAC,CAAC,IAAI,KAAA,SAAS,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACvE,CAAC;YAED,0BAAG,GAAH;YACA,CAAC;YACF,mBAAC;QAAD,CAAC,AAnBD,IAmBC;QAnBY,iBAAY,eAmBxB,CAAA;IACF,CAAC,EArBoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAqBxB;AAAD,CAAC,EArBS,UAAU,KAAV,UAAU,QAqBnB;ACrBD,IAAU,UAAU,CAoCnB;AApCD,WAAU,UAAU;IAAC,IAAA,IAAI,CAoCxB;IApCoB,WAAA,IAAI;QACxB;YASC,qBAAa,MAAc;gBAP3B,YAAO,GAAG,CAAC,CAAC;gBACZ,YAAO,GAAG,CAAC,CAAC;gBACZ,WAAM,GAAG,CAAC,CAAC;gBACX,UAAK,GAAG,CAAC,CAAC;gBACF,WAAM,GAAG,CAAC,CAAC;gBACX,WAAM,GAAG,CAAC,CAAC;gBAGlB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACtB,CAAC;YAED,2BAAK,GAAL,UAAM,QAAkB;gBACvB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;gBACxC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;YACzC,CAAC;YAED,+BAAS,GAAT,UAAU,QAAiB,EAAE,EAAW,EAAE,KAAY,EAAE,IAAW;gBAClE,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,KAAA,SAAS,CAAC,gBAAgB,CAAC;gBACvD,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBACjC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBACjC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBACpC,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE;oBACvB,IAAI,KAAK,GAAG,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC7F,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBAC1B,QAAQ,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBAC7C,QAAQ,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;iBAC7C;YACF,CAAC;YAED,yBAAG,GAAH;YACA,CAAC;YAhCM,yBAAa,GAAG,IAAI,KAAA,MAAM,CAAC,CAAC,CAAC,CAAC;YAiCtC,kBAAC;SAAA,AAlCD,IAkCC;QAlCY,gBAAW,cAkCvB,CAAA;IACF,CAAC,EApCoB,IAAI,GAAJ,eAAI,KAAJ,eAAI,QAoCxB;AAAD,CAAC,EApCS,UAAU,KAAV,UAAU,QAoCnB;AC9DD,CAAC;IACG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,UAAS,KAAK;YACvC,OAAO,UAAS,CAAS;gBACrB,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;KAC3B;AACL,CAAC,CAAC,EAAE,CAAC;ACTL,IAAU,UAAU,CA0uBnB;AA1uBD,WAAU,UAAU;IAEhB,WAAA,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IAEvB,IAAI,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAOxB;QAAiC,+BAAW;QAA5C;YAAA,qEAGC;YAFG,YAAM,GAAwB,IAAI,CAAC;YACnC,gBAAU,GAAqB,IAAI,CAAC;;QACxC,CAAC;QAAD,kBAAC;IAAD,CAAC,AAHD,CAAiC,IAAI,CAAC,MAAM,GAG3C;IAHY,sBAAW,cAGvB,CAAA;IAED,IAAM,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAgB,CAAC;IAClD,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE;QAChB,IAAI,KAAG,GAAG,EAAE,CAAC;QACb,EAAE,CAAC,UAAU,GAAG;YACZ,IAAM,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;YAC5B,KAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,YAAY,GAAG,KAAG,CAAC;YACxB,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAA;KACJ;IAED;QAA+B,6BAAe;QAI1C,mBAAY,OAAqB,EAAE,QAAuB,EAAE,GAAkB,EAAE,OAAqB,EAAE,QAAiB;YAAxH,YACI,kBAAM,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,SACnD;YALD,YAAM,GAAwB,IAAI,CAAC;YACnC,gBAAU,GAAqB,IAAI,CAAC;;QAIpC,CAAC;QACL,gBAAC;IAAD,CAAC,AAPD,CAA+B,IAAI,CAAC,UAAU,GAO7C;IAPY,oBAAS,YAOrB,CAAA;IAgBD;QAA2B,yBAAc;QAerC,eAAY,SAA4B;YAAxC,YACI,iBAAO,SA0FV;YAxFG,IAAI,CAAC,SAAS,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACvD;YAED,IAAI,CAAC,OAAO,SAAS,CAAC,KAAK,QAAQ,EAAE;gBACjC,MAAM,IAAI,KAAK,CAAC,qGAAqG,CAAC,CAAC;aAC1H;YAOD,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAO3B,KAAI,CAAC,QAAQ,GAAG,IAAI,WAAA,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC7C,KAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;YAOrC,KAAI,CAAC,SAAS,GAAG,IAAI,WAAA,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAOxD,KAAI,CAAC,KAAK,GAAG,IAAI,WAAA,IAAI,CAAC,cAAc,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;YAOrD,KAAI,CAAC,cAAc,GAAG,EAAE,CAAC;YAEzB,KAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;YAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxD,IAAI,IAAI,GAAG,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAClC,IAAI,UAAU,GAAQ,IAAI,CAAC,aAAa,EAAE,CAAC;gBAC3C,IAAI,aAAa,GAAG,KAAI,CAAC,YAAY,EAAE,CAAC;gBACxC,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACxC,KAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;gBAC7B,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAEnC,IAAI,UAAU,YAAY,WAAA,IAAI,CAAC,gBAAgB,EAAE;oBAC7C,IAAI,UAAU,GAAI,UAAU,CAAC,MAAkC,CAAC,IAAI,CAAC;oBACrE,IAAI,MAAM,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;oBAC7D,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;oBAC5B,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;oBACpC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;iBAClC;qBACI,IAAI,UAAU,YAAY,WAAA,IAAI,CAAC,cAAc,EAAE;oBAChD,IAAI,IAAI,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;oBAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,IAAI,CAAC;oBACvC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBAChC;qBACI,IAAI,UAAU,YAAY,WAAA,IAAI,CAAC,kBAAkB,EAAE;oBACpD,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;oBACtC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAC/C,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;iBAChD;qBACI;oBACD,SAAS;iBACZ;aAEJ;YAQD,KAAI,CAAC,OAAO,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAE3C,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;;QACxB,CAAC;QAaD,sBAAI,6BAAU;iBAAd;gBACI,OAAO,IAAI,CAAC,WAAW,CAAC;YAC5B,CAAC;iBAED,UAAe,KAAc;gBACzB,IAAI,KAAK,KAAK,IAAI,CAAC,WAAW,EAAE;oBAC5B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;oBACzB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,eAAe,CAAC;iBACjH;YACL,CAAC;;;WAPA;QAiBD,sBAAI,0BAAO;iBAAX;gBACI,OAAO,IAAI,CAAC,QAAQ,CAAC;YACzB,CAAC;iBAED,UAAY,KAAc;gBACtB,IAAI,KAAK,KAAK,IAAI,CAAC,QAAQ,EAAE;oBACzB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;oBACtB,IAAI,KAAK,EAAE;wBACP,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;qBACrB;iBACJ;YACL,CAAC;;;WATA;QAkBD,sBAAI,uBAAI;iBAAR;gBACI,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAc,CAAC,CAAC;YACnD,CAAC;iBAED,UAAS,KAAa;gBAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,OAAc,CAAC,CAAC;YAClE,CAAC;;;WAJA;QAWD,sBAAI,6BAAU;iBAAd;gBACI,IAAI,KAAK,GAAG,OAAO,IAAI,CAAC,eAAe,KAAK,WAAW,CAAA,CAAC;oBACpD,IAAI,CAAC,eAAe,CAAA,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC;gBAGjD,OAAO,KAAK,IAAI,MAAM,CAAC,SAAS,CAAA;YACpC,CAAC;;;WAAA;QAOD,sBAAM,GAAN,UAAO,EAAU;YAEb,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;YACjC,IAAI,EAAE,GAAG,UAAU;gBAAE,EAAE,GAAG,UAAU,CAAC;YAErC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACtB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAGhC,IAAG,CAAC,IAAI,CAAC,QAAQ;gBACb,OAAO;YAEX,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;YAErC,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAGhC,IAAI,SAAS,GAAI,IAAY,CAAC,KAAK,CAAC;YACpC,IAAI,KAAK,GAAsB,IAAI,EAAE,IAAI,GAAsB,IAAI,CAAC;YAEpE,IAAI,SAAS,EAAE;gBACX,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;gBACxB,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;aACzB;iBAAM;gBACH,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;aACxB;YAED,IAAI,KAAK,GAAG,KAAK,CAAC;YAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;gBACtC,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAE3C,IAAI,CAAC,UAAU,EAAE;oBACb,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;oBAC9B,SAAS;iBACZ;gBAED,IAAI,WAAW,GAAQ,IAAI,CAAC;gBAE5B,IAAI,QAAQ,GAAI,UAAkB,CAAC,KAAK,CAAC;gBACzC,IAAI,UAAU,YAAY,WAAA,IAAI,CAAC,gBAAgB,EAAE;oBAC7C,IAAI,MAAM,GAAI,UAAoC,CAAC,MAAM,CAAC;oBAC1D,IAAI,MAAM,EAAE;wBACR,IAAI,IAAI,CAAC,WAAW,EAAE;4BAClB,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;4BACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;4BACxB,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;yBACpC;wBACD,IAAI,EAAE,GAAG,MAAiC,CAAC;wBAC3C,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,KAAK,EAAE,CAAC,IAAI,EAAE;4BAC/D,IAAI,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC;4BACzB,IAAI,IAAI,CAAC,aAAa,EAAE;gCACpB,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;6BACtC;4BACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;4BAClC,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,SAAS,EAAE;gCACxC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;6BAC3C;iCACI;gCACD,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;gCAC7D,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;6BAClC;4BACD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;4BAC9C,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;yBAIvC;6BAAM,IAAI,IAAI,CAAC,iBAAiB,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;4BAC/D,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;yBAChE;qBACJ;oBAED,IAAI,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;oBACxC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAE1C,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;wBAE1B,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;qBAC1C;yBAAM;wBACH,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;qBACzD;oBACD,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;iBACjD;qBACI,IAAI,UAAU,YAAY,WAAA,IAAI,CAAC,cAAc,EAAE;oBAChD,IAAI,IAAI,CAAC,aAAa,EAAE;wBAEpB,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;wBACnC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;wBAC1B,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;wBAGnC,IAAM,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;wBACtC,SAAiB,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;wBACjC,SAAiB,CAAC,QAAQ,GAAI,aAAa,CAAC,SAAiB,CAAC,QAAQ,CAAC;wBACxE,aAAa,CAAC,SAAS,GAAG,SAAS,CAAC;qBACvC;oBACD,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,KAAK,UAAU,CAAC,IAAI,EAAE;wBACnE,IAAI,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC;wBAC/B,IAAI,IAAI,CAAC,WAAW,EAAE;4BAClB,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;yBACpC;wBAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;wBAEhC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;4BACrC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;yBACxC;6BACI;4BACD,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;4BAC7C,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;yBAChC;wBAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBACzC,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;qBACnC;oBACA,UAAoC,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;oBAC/F,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;wBAExB,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;qBACxC;yBAAM;wBACH,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;wBAClD,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;qBACvD;oBACD,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;iBAC/C;qBACI,IAAI,UAAU,YAAY,WAAA,IAAI,CAAC,kBAAkB,EAAE;oBACpD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;wBACvB,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;wBACtC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;wBAC/C,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;qBAChD;oBACD,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;iBACzC;qBACI;oBACD,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;oBAC9B,SAAS;iBACZ;gBACD,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;gBAG7B,IAAI,WAAW,EAAE;oBACb,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;oBACnC,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;oBACnC,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;oBAGnC,WAAW,CAAC,QAAQ,CAChB,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,EACpC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,EACpC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CACvC,CAAC;oBACF,IAAI,IAAI,CAAC,SAAS,EAAE;wBAChB,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;wBACtB,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;wBACtB,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;qBACzB;yBAAM;wBACH,EAAE,GAAG,GAAG,CAAC;wBACT,EAAE,GAAG,GAAG,CAAC;wBACT,EAAE,GAAG,GAAG,CAAC;qBACZ;oBACD,WAAW,CAAC,OAAO,CACf,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAClC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAClC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CACrC,CAAC;iBACL;gBAED,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aACtC;YAID,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;YACxC,IAAI,kBAAkB,GAA4B,IAAI,CAAC;YACvD,IAAI,iBAAiB,GAAmB,IAAI,CAAC;YAE7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC9C,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC1C,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAEjE,IAAI,CAAC,iBAAiB,EAAE;oBAEpB,IAAI,aAAa,CAAC,MAAM,KAAK,IAAI,IAAI,aAAa,CAAC,MAAM,KAAK,IAAI,EAAE;wBAChE,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;wBAE/C,aAAqB,CAAC,MAAM,GAAG,IAAI,CAAC;qBACxC;iBACJ;gBACD,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;oBAC9C,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;oBAC3C,kBAAkB,GAAG,IAAI,CAAC,aAAa,EAA6B,CAAC;oBACrE,iBAAiB,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;oBACtC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC;oBAEjC,IAAI,kBAAkB,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE;wBACzC,kBAAkB,CAAC,OAAO,GAAG,IAAI,CAAC;qBACrC;iBAEJ;qBAAM;oBACH,IAAI,iBAAiB,EAAE;wBACnB,IAAI,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;wBACnC,IAAI,CAAC,CAAC,EAAE;4BACJ,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;4BACrD,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC;yBACrB;wBACD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBAGpB,aAAqB,CAAC,MAAM,GAAG,IAAI,CAAC;wBACrC,iBAAiB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;wBAC1C,IAAI,kBAAkB,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE;4BACzC,iBAAiB,CAAC,UAAU,GAAG,IAAI,CAAC;4BACpC,iBAAiB,GAAG,IAAI,CAAC;4BACzB,kBAAkB,GAAG,IAAI,CAAC;yBAC7B;qBACJ;yBAAM;wBACH,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC;qBACpC;iBACJ;aACJ;QACL,CAAC;QAAA,CAAC;QAEM,+BAAe,GAAvB,UAAwB,UAAiC,EAAE,MAAmB,EAAE,MAA0B;YAEtG,IAAG,MAAM,CAAC,UAAU,KAAK,UAAU,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,EAAE;gBAC7D,OAAO;aACV;YAED,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;YACvB,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;YAE/B,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAChC,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,GAAG,WAAA,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAC9D,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YAElC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;gBACd,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC;gBAC7E,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;aACnF;iBAAM;gBAEH,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC;gBAC1D,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;aAChE;QACL,CAAC;QAEO,6BAAa,GAArB,UAAsB,UAA+B,EAAE,IAAe,EAAE,MAA0B;YAE9F,IAAG,IAAI,CAAC,UAAU,KAAK,UAAU,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;gBACzD,OAAO;aACV;YAED,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAC9B,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;YAC3B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAC/C,CAAC;QASD,mCAAmB,GAAnB;YACI,IAAI,KAAK,CAAC,gBAAgB,EAAE;gBACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;gBAC5C,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;gBACrD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAC3B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;aAC1B;iBAAM;gBACH,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;aACrB;YAED,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC;QAAA,CAAC;QASF,4BAAY,GAAZ,UAAa,IAAe,EAAE,UAAiC,EAAE,OAAe;YAC5E,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YAC/B,IAAI,IAAI,CAAC,cAAc,KAAK,UAAU,EAAE;gBACpC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;aAC5B;YACD,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAErC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;YAE5D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;YAClC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;YAC/B,OAAO,MAAM,CAAC;QAClB,CAAC;QAAA,CAAC;QAQF,0BAAU,GAAV,UAAW,IAAe,EAAE,UAA+B;YACvD,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YAC/B,IAAI,IAAI,CAAC,cAAc,KAAK,UAAU,EAAE;gBACpC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;gBACzB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;gBAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;aAC1B;YACD,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CACpB,MAAM,CAAC,OAAO,EACd,IAAI,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAC7C,UAAU,CAAC,SAAS,EACpB,IAAI,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,EACrC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAE/B,IAAK,KAAa,CAAC,aAAa,EAAE;gBAC7B,KAAa,CAAC,aAAa,GAAG,GAAG,CAAC;aACtC;YAED,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YAEjC,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YACjC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAE9C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;YAChC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;YACrC,OAAO,KAAK,CAAC;QACjB,CAAC;QAAA,CAAC;QAIF,8BAAc,GAAd,UAAe,IAAe,EAAE,IAA6B;YACzD,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAClC,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAChC,QAAQ,CAAC,KAAK,EAAE,CAAC;YACjB,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAChC,QAAQ,CAAC,WAAW,CAAC,IAAW,CAAC,CAAC;YAClC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;YAChC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YAC7C,IAAI,CAAC,iBAAiB,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC;YAEnD,OAAO,QAAQ,CAAC;QACpB,CAAC;QAED,8BAAc,GAAd,UAAe,IAAe,EAAE,IAA6B;YACzD,IAAI,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;YACzC,IAAI,QAAQ,GAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAsB,CAAC,MAAM,CAAC;YACnE,IAAI,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACjC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,UAAU,EAAE,CAAC;QACtB,CAAC;QAYD,sCAAsB,GAAtB,UAAuB,SAAiB,EAAE,OAA4B,EAAE,IAA2B;YAAzD,wBAAA,EAAA,cAA4B;YAAE,qBAAA,EAAA,WAA2B;YAC/F,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC1C,IAAI,CAAC,IAAI,EAAE;gBACP,OAAO,KAAK,CAAC;aAChB;YACD,IAAI,UAAU,GAAQ,IAAI,CAAC,aAAa,EAAE,CAAC;YAC3C,IAAI,MAAM,GAAuB,UAAU,CAAC,MAAM,CAAC;YACnD,IAAI,OAAO,EAAE;gBACT,MAAM,GAAG,IAAI,WAAA,IAAI,CAAC,aAAa,EAAE,CAAC;gBAClC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;gBACzB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;gBACzB,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;aACpC;iBAAM;gBACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;aAC9B;YACD,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,MAAM,EAAE;gBAC3D,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;gBAC7D,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;aACtC;iBAAM,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,MAAM,EAAE;gBAC9D,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;aAC5D;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;QAYD,qCAAqB,GAArB,UAAsB,QAAgB,EAAE,OAA4B,EAAE,IAA2B;YAAzD,wBAAA,EAAA,cAA4B;YAAE,qBAAA,EAAA,WAA2B;YAC7F,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAClD,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE;gBACb,OAAO,KAAK,CAAC;aAChB;YACD,OAAO,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC7D,CAAC;QAGD,4BAAY,GAAZ;YACI,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;QAChC,CAAC;QAED,yBAAS,GAAT,UAAU,GAAiB;YACvB,OAAO,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QAED,2BAAW,GAAX;YACI,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC;QAED,uBAAO,GAAP,UAAQ,OAAqB,EAAE,QAAuB,EAAE,GAAkB,EAAE,OAAqB,EAAE,QAAiB;YAChH,OAAO,IAAI,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QACpE,CAAC;QAED,6BAAa,GAAb;YACI,OAAO,CAAC,CAAC;QACb,CAAC;QAQD,oCAAoB,GAApB,UAAqB,UAAkB,EAAE,KAAU,EAAE,QAAa;YAC9D,IAAI,CAAC,UAAU,EAAE;gBACb,OAAO;aACV;YACD,IAAM,MAAM,GAAG,EAAE,EAAE,MAAM,GAAG,EAAE,CAAC;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC5D,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAM,MAAI,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,eAAe,IAAI,EAAE,CAAC;gBAClE,IAAM,MAAM,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,WAAW,CAAC;gBACtD,IAAG,MAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAC;oBACzB,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;oBAC3B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACvB;qBAAK,IAAG,QAAQ,IAAI,MAAM,EAAC;oBACxB,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC;oBAC9B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACvB;aACJ;YACD,OAAO,CAAC,MAAM,EAAC,MAAM,CAAC,CAAC;QAC3B,CAAC;QAAA,CAAC;QAEF,uBAAO,GAAP,UAAQ,OAAa;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxD,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAClC,KAAK,IAAI,MAAI,IAAI,IAAI,CAAC,MAAM,EAAE;oBAC1B,IAAI,CAAC,MAAM,CAAC,MAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iBACtC;gBACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBAEnB,KAAK,IAAI,MAAI,IAAI,IAAI,CAAC,OAAO,EAAE;oBAC3B,IAAI,CAAC,OAAO,CAAC,MAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iBACvC;gBACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;aACvB;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxD,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;aAC3C;YACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAE/B,iBAAM,OAAO,YAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QAtqBM,sBAAgB,GAAY,IAAI,CAAC;QACjC,sBAAgB,GAAY,CAAC,CAAC;QA8gB9B,qBAAe,GAAkB,EAAE,CAAC;QAwJ/C,YAAC;KAAA,AAxqBD,CAA2B,IAAI,CAAC,SAAS,GAwqBxC;IAxqBY,gBAAK,QAwqBjB,CAAA;IAED,SAAS,8BAA8B;QACnC,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;QACpC,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;QAC7B,IAAI,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC;QAC7B,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;QAC5C,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QACtD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC/B,CAAC;AACL,CAAC,EA1uBS,UAAU,KAAV,UAAU,QA0uBnB;AC7uBD,IAAU,UAAU,CAUnB;AAVD,WAAU,UAAU;IACf,IAAY,CAAC,KAAK,GAAG,UAAU,CAAC;IAIjC,IAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,SAAgB,CAAC;IAEnD,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE;QAC1B,YAAY,CAAC,UAAU,GAAG,YAAY,CAAC,SAAS,CAAC;KACpD;AACL,CAAC,EAVS,UAAU,KAAV,UAAU,QAUnB;ACMD,IAAU,UAAU,CAoLnB;AApLD,WAAU,UAAU;IAEhB,SAAS,MAAM,CAAC,QAA6B;QACzC,OAAO,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;IAC3D,CAAC;IAED,SAAS,QAAQ,CAAC,QAA6B;QAC3C,OAAO,QAAQ,CAAC,OAAO,KAAK,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC;IAC7E,CAAC;IAED,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAE9F;QAAA;QAiHA,CAAC;QAhHU,eAAG,GAAV,UAA8B,QAA6B,EAAE,IAAe;YAExE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;gBAChB,OAAO,IAAI,EAAE,CAAC;aACjB;YAED,IAAM,gBAAgB,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;YACjE,IAAM,kBAAkB,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,KAAK,MAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAEpH,IAAI,CAAC,gBAAgB,IAAI,CAAC,kBAAkB,EAAE;gBAC1C,OAAO,IAAI,EAAE,CAAC;aACjB;YAED,IAAI,MAAM,GAA4C,IAAI,CAAC;YAC3D,IAAI,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC;YAEhC,IAAI,gBAAgB,EAAE;gBAClB,MAAM,GAAG,IAAI,WAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aACxC;iBAAM;gBACH,MAAM,GAAG,IAAI,WAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBACvC,IAAI,QAAQ,CAAC,IAAI,YAAY,WAAW,EAAE;oBACtC,WAAW,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBAC/C;aACJ;YAED,IAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,IAAI,EAAE,CAAC;YACzC,IAAM,qBAAqB,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC;YAErF,IAAI,qBAAqB,EAAE;gBACvB,MAAM,CAAC,KAAK,GAAG,qBAAqB,CAAC;aACxC;YAED,IAAM,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;YACrE,IAAI,aAAa,KAAK,KAAK,EAAE;gBACzB,OAAO,IAAI,EAAE,CAAC;aACjB;YACD,IAAI,aAAa,IAAI,aAAa,CAAC,KAAK,EAAE;gBAEtC,MAAM,CAAC,gBAAgB,GAAG,IAAI,WAAA,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;gBACxE,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;gBAC1D,QAAQ,CAAC,UAAU,GAAG,aAAa,CAAC;gBAEpC,OAAO,IAAI,EAAE,CAAC;aACjB;YAED,IAAM,mBAAmB,GAAG,QAAQ,CAAC,gBAAgB,IAAI,QAAQ,CAAC;YAOlE,IAAI,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC;YAC7B,IAAI,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC5C,IAAI,cAAc,GAAG,CAAC,EAAE;gBAEpB,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,cAAc,CAAC,CAAA;aAClD;YACD,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB,CAAC;YAElF,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,cAAc,EAAE;gBACvD,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC;aAChD;YAGD,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAEhD,IAAM,YAAY,GAAG;gBACjB,WAAW,EAAE,QAAQ,CAAC,WAAW;gBACjC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,IAAI;gBACnD,QAAQ,EAAE,QAAQ,CAAC,aAAa,IAAI,IAAI;gBACxC,cAAc,EAAE,QAAQ;aAC3B,CAAC;YACF,IAAM,YAAY,GAAG;gBACjB,WAAW,EAAE,QAAQ,CAAC,WAAW;gBACjC,QAAQ,EAAE,QAAQ,CAAC,aAAa,IAAI,IAAI;gBACxC,cAAc,EAAE,QAAQ;aAC3B,CAAC;YACF,IAAI,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAExE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAE5C,IAAM,UAAU,GAAG,QAAQ,CAAC,eAAe,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,cAAc,CAAC,CAAC;YAEhF,IAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAChE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,CAAC,EAAE,SAAS,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC;oBAC/D,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,YAAY,CAAC;wBAClF,CAAC,CAAC,kBAAkB,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;YAE1E,IAAM,0BAA0B,GAAG,UAAU,OAAe;gBACxD,IAAI,WAAA,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,UAAU;oBACxD,IAAI,UAAU,EAAE;wBACZ,MAAM,CAAC,gBAAgB,GAAG,IAAI,WAAA,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;wBACrE,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;wBAC1D,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;qBACpC;oBACD,IAAI,EAAE,CAAC;gBACX,CAAC,CAAC,CAAC;YACP,CAAC,CAAC;YAEF,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,YAAY,EAAE;gBACrD,0BAA0B,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAA;aAC7D;iBAAM;gBACH,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,GAAG,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,UAAU,aAAkB;oBACpF,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;wBACtB,0BAA0B,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;qBAClD;yBAAM;wBACH,IAAI,EAAE,CAAC;qBACV;gBACL,CAAC,CAAC,CAAC;aACN;QACL,CAAC;QACL,kBAAC;IAAD,CAAC,AAjHD,IAiHC;IAjHY,sBAAW,cAiHvB,CAAA;IAED,SAAgB,kBAAkB,CAAC,MAAW,EAAE,UAAe,EAAE,OAAY,EAAE,YAAiB;QAC5F,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;YAC9D,OAAO,IAAI,GAAG,CAAC;SAClB;QACD,OAAO,UAAU,IAAY,EAAE,QAAgD;YAC3E,IAAM,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC;YAC/B,IAAM,GAAG,GAAG,OAAO,GAAG,IAAI,CAAC;YAE3B,IAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC9C,IAAI,cAAc,EAAE;gBAChB,IAAM,IAAI,GAAG;oBACT,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;gBAChD,CAAC,CAAA;gBACD,IAAI,cAAc,CAAC,OAAO,EAAE;oBACxB,IAAI,EAAE,CAAC;iBACV;qBACI;oBACD,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;iBAC9C;aACJ;iBAAM;gBACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,UAAC,QAA6B;oBAChE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;wBACnB,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;qBACxC;yBAAM;wBACL,QAAQ,CAAC,IAAI,CAAC,CAAC;qBAChB;gBACH,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAA;IACL,CAAC;IA7Be,6BAAkB,qBA6BjC,CAAA;IAED,SAAgB,sBAAsB,CAAC,OAAY,EAAE,WAAgB;QACjE,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;YAC9D,OAAO,IAAI,GAAG,CAAC;SAClB;QACD,OAAO,UAAU,IAAS,EAAE,QAAa;YACrC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;QACvD,CAAC,CAAA;IACL,CAAC;IAPe,iCAAsB,yBAOrC,CAAA;IAED,SAAgB,iBAAiB,CAAC,KAA2D;QACzF,OAAO,UAAU,IAAS,EAAE,QAAa;YACrC,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,SAAS,CAAQ,CAAC;YAClD,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW;gBACxB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;gBAE3B,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC,CAAA;IACL,CAAC;IARe,4BAAiB,oBAQhC,CAAA;IAED,IAAI,IAAI,CAAC,MAAM,EAAE;QACb,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;KAC3C;AACL,CAAC,EApLS,UAAU,KAAV,UAAU,QAoLnB","sourcesContent":["/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated May 1, 2019. Replaces all prior versions.\n *\n * Copyright (c) 2013-2019, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN\n * NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS\n * INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n\n    /** A simple container for a list of timelines and a name. */\n    export class Animation {\n        /** The animation's name, which is unique across all animations in the skeleton. */\n        name: string;\n        timelines: Array<Timeline>;\n        timelineIds: Array<boolean>;\n\n        /** The duration of the animation in seconds, which is the highest time of all keys in the timeline. */\n        duration: number;\n\n        constructor (name: string, timelines: Array<Timeline>, duration: number) {\n            if (name == null) throw new Error(\"name cannot be null.\");\n            if (timelines == null) throw new Error(\"timelines cannot be null.\");\n            this.name = name;\n            this.timelines = timelines;\n            this.timelineIds = [];\n            for (var i = 0; i < timelines.length; i++)\n                this.timelineIds[timelines[i].getPropertyId()] = true;\n            this.duration = duration;\n        }\n\n        hasTimeline (id: number) {\n            return this.timelineIds[id] == true;\n        }\n\n        /** Applies all the animation's timelines to the specified skeleton.\n         *\n         * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\n         * @param loop If true, the animation repeats after {@link #getDuration()}.\n         * @param events May be null to ignore fired events. */\n        apply (skeleton: Skeleton, lastTime: number, time: number, loop: boolean, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n\n            if (loop && this.duration != 0) {\n                time %= this.duration;\n                if (lastTime > 0) lastTime %= this.duration;\n            }\n\n            let timelines = this.timelines;\n            for (let i = 0, n = timelines.length; i < n; i++)\n                timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);\n        }\n\n        /** @param target After the first and before the last value.\n         * @returns index of first value greater than the target. */\n        static binarySearch (values: ArrayLike<number>, target: number, step: number = 1) {\n            let low = 0;\n            let high = values.length / step - 2;\n            if (high == 0) return step;\n            let current = high >>> 1;\n            while (true) {\n                if (values[(current + 1) * step] <= target)\n                    low = current + 1;\n                else\n                    high = current;\n                if (low == high) return (low + 1) * step;\n                current = (low + high) >>> 1;\n            }\n        }\n\n        static linearSearch (values: ArrayLike<number>, target: number, step: number) {\n            for (let i = 0, last = values.length - step; i <= last; i += step)\n                if (values[i] > target) return i;\n            return -1;\n        }\n    }\n\n    /** The interface for all timelines. */\n    export interface Timeline {\n        /** Applies this timeline to the skeleton.\n         * @param skeleton The skeleton the timeline is being applied to. This provides access to the bones, slots, and other\n         *           skeleton components the timeline may change.\n         * @param lastTime The time this timeline was last applied. Timelines such as {@link EventTimeline}} trigger only at specific\n         *           times rather than every frame. In that case, the timeline triggers everything between `lastTime`\n         *           (exclusive) and `time` (inclusive).\n         * @param time The time within the animation. Most timelines find the key before and the key after this time so they can\n         *           interpolate between the keys.\n         * @param events If any events are fired, they are added to this list. Can be null to ignore fired events or if the timeline\n         *           does not fire events.\n         * @param alpha 0 applies the current or setup value (depending on `blend`). 1 applies the timeline value.\n         *           Between 0 and 1 applies a value between the current or setup value and the timeline value. By adjusting\n         *           `alpha` over time, an animation can be mixed in or out. `alpha` can also be useful to\n         *           apply animations on top of each other (layering).\n         * @param blend Controls how mixing is applied when `alpha` < 1.\n         * @param direction Indicates whether the timeline is mixing in or out. Used by timelines which perform instant transitions,\n         *           such as {@link DrawOrderTimeline} or {@link AttachmentTimeline}. */\n        apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection): void;\n\n        /** Uniquely encodes both the type of this timeline and the skeleton property that it affects. */\n        getPropertyId (): number;\n    }\n\n    /** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`\n     * < 1.\n     *\n     * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\n    export enum MixBlend {\n        /** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\n         * value is set. */\n        setup,\n        /** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\n         * the setup value. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or\n         * {@link AttachmentTimeline}, use the setup value before the first key.\n         *\n         * `first` is intended for the first animations applied, not for animations layered on top of those. */\n        first,\n        /** Transitions from the current value to the timeline value. No change is made before the first key (the current value is\n         * kept until the first key).\n         *\n         * `replace` is intended for animations layered on top of others, not for the first animations applied. */\n        replace,\n        /** Transitions from the current value to the current value plus the timeline value. No change is made before the first key\n         * (the current value is kept until the first key).\n         *\n         * `add` is intended for animations layered on top of others, not for the first animations applied. Properties\n         * keyed by additive animations must be set manually or by another animation before applying the additive animations, else\n         * the property values will increase continually. */\n        add\n    }\n\n    /** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or\n     * mixing in toward 1 (the timeline's value).\n     *\n     * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\n    export enum MixDirection {\n        mixIn, mixOut\n    }\n\n    export enum TimelineType {\n        rotate, translate, scale, shear,\n        attachment, color, deform,\n        event, drawOrder,\n        ikConstraint, transformConstraint,\n        pathConstraintPosition, pathConstraintSpacing, pathConstraintMix,\n        twoColor\n    }\n\n    /** The base class for timelines that use interpolation between key frame values. */\n    export abstract class CurveTimeline implements Timeline {\n        static LINEAR = 0; static STEPPED = 1; static BEZIER = 2;\n        static BEZIER_SIZE = 10 * 2 - 1;\n\n        private curves: ArrayLike<number>; // type, x, y, ...\n\n        abstract getPropertyId(): number;\n\n        constructor (frameCount: number) {\n            if (frameCount <= 0) throw new Error(\"frameCount must be > 0: \" + frameCount);\n            this.curves = Utils.newFloatArray((frameCount - 1) * CurveTimeline.BEZIER_SIZE);\n        }\n\n        /** The number of key frames for this timeline. */\n        getFrameCount () {\n            return this.curves.length / CurveTimeline.BEZIER_SIZE + 1;\n        }\n\n        /** Sets the specified key frame to linear interpolation. */\n        setLinear (frameIndex: number) {\n            this.curves[frameIndex * CurveTimeline.BEZIER_SIZE] = CurveTimeline.LINEAR;\n        }\n\n        /** Sets the specified key frame to stepped interpolation. */\n        setStepped (frameIndex: number) {\n            this.curves[frameIndex * CurveTimeline.BEZIER_SIZE] = CurveTimeline.STEPPED;\n        }\n\n        /** Returns the interpolation type for the specified key frame.\n         * @returns Linear is 0, stepped is 1, Bezier is 2. */\n        getCurveType (frameIndex: number): number {\n            let index = frameIndex * CurveTimeline.BEZIER_SIZE;\n            if (index == this.curves.length) return CurveTimeline.LINEAR;\n            let type = this.curves[index];\n            if (type == CurveTimeline.LINEAR) return CurveTimeline.LINEAR;\n            if (type == CurveTimeline.STEPPED) return CurveTimeline.STEPPED;\n            return CurveTimeline.BEZIER;\n        }\n\n        /** Sets the specified key frame to Bezier interpolation. `cx1` and `cx2` are from 0 to 1,\n         * representing the percent of time between the two key frames. `cy1` and `cy2` are the percent of the\n         * difference between the key frame's values. */\n        setCurve (frameIndex: number, cx1: number, cy1: number, cx2: number, cy2: number) {\n            let tmpx = (-cx1 * 2 + cx2) * 0.03, tmpy = (-cy1 * 2 + cy2) * 0.03;\n            let dddfx = ((cx1 - cx2) * 3 + 1) * 0.006, dddfy = ((cy1 - cy2) * 3 + 1) * 0.006;\n            let ddfx = tmpx * 2 + dddfx, ddfy = tmpy * 2 + dddfy;\n            let dfx = cx1 * 0.3 + tmpx + dddfx * 0.16666667, dfy = cy1 * 0.3 + tmpy + dddfy * 0.16666667;\n\n            let i = frameIndex * CurveTimeline.BEZIER_SIZE;\n            let curves = this.curves;\n            curves[i++] = CurveTimeline.BEZIER;\n\n            let x = dfx, y = dfy;\n            for (let n = i + CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {\n                curves[i] = x;\n                curves[i + 1] = y;\n                dfx += ddfx;\n                dfy += ddfy;\n                ddfx += dddfx;\n                ddfy += dddfy;\n                x += dfx;\n                y += dfy;\n            }\n        }\n\n        /** Returns the interpolated percentage for the specified key frame and linear percentage. */\n        getCurvePercent (frameIndex: number, percent: number) {\n            percent = MathUtils.clamp(percent, 0, 1);\n            let curves = this.curves;\n            let i = frameIndex * CurveTimeline.BEZIER_SIZE;\n            let type = curves[i];\n            if (type == CurveTimeline.LINEAR) return percent;\n            if (type == CurveTimeline.STEPPED) return 0;\n            i++;\n            let x = 0;\n            for (let start = i, n = i + CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {\n                x = curves[i];\n                if (x >= percent) {\n                    let prevX: number, prevY: number;\n                    if (i == start) {\n                        prevX = 0;\n                        prevY = 0;\n                    } else {\n                        prevX = curves[i - 2];\n                        prevY = curves[i - 1];\n                    }\n                    return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\n                }\n            }\n            let y = curves[i - 1];\n            return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.\n        }\n\n        abstract apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection): void;\n    }\n\n    /** Changes a bone's local {@link Bone#rotation}. */\n    export class RotateTimeline extends CurveTimeline {\n        static ENTRIES = 2;\n        static PREV_TIME = -2; static PREV_ROTATION = -1;\n        static ROTATION = 1;\n\n        /** The index of the bone in {@link Skeleton#bones} that will be changed. */\n        boneIndex: number;\n\n        /** The time in seconds and rotation in degrees for each key frame. */\n        frames: ArrayLike<number>; // time, degrees, ...\n\n        constructor (frameCount: number) {\n            super(frameCount);\n            this.frames = Utils.newFloatArray(frameCount << 1);\n        }\n\n        getPropertyId () {\n            return (TimelineType.rotate << 24) + this.boneIndex;\n        }\n\n        /** Sets the time and angle of the specified keyframe. */\n        setFrame (frameIndex: number, time: number, degrees: number) {\n            frameIndex <<= 1;\n            this.frames[frameIndex] = time;\n            this.frames[frameIndex + RotateTimeline.ROTATION] = degrees;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let frames = this.frames;\n\n            let bone = skeleton.bones[this.boneIndex];\n            if (!bone.active) return;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bone.rotation = bone.data.rotation;\n                        return;\n                    case MixBlend.first:\n                        let r = bone.data.rotation - bone.rotation;\n                        bone.rotation += (r - (16384 - ((16384.499999999996 - r / 360) | 0)) * 360) * alpha;\n                }\n                return;\n            }\n\n            if (time >= frames[frames.length - RotateTimeline.ENTRIES]) { // Time is after last frame.\n                let r = frames[frames.length + RotateTimeline.PREV_ROTATION];\n                switch (blend) {\n                    case MixBlend.setup:\n                        bone.rotation = bone.data.rotation + r * alpha;\n                        break;\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        r += bone.data.rotation - bone.rotation;\n                        r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360; // Wrap within -180 and 180.\n                    case MixBlend.add:\n                        bone.rotation += r * alpha;\n                }\n                return;\n            }\n\n            // Interpolate between the previous frame and the current frame.\n            let frame = Animation.binarySearch(frames, time, RotateTimeline.ENTRIES);\n            let prevRotation = frames[frame + RotateTimeline.PREV_ROTATION];\n            let frameTime = frames[frame];\n            let percent = this.getCurvePercent((frame >> 1) - 1,\n                1 - (time - frameTime) / (frames[frame + RotateTimeline.PREV_TIME] - frameTime));\n\n            let r = frames[frame + RotateTimeline.ROTATION] - prevRotation;\n            r = prevRotation + (r - (16384 - ((16384.499999999996 - r / 360) | 0)) * 360) * percent;\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.rotation = bone.data.rotation + (r - (16384 - ((16384.499999999996 - r / 360) | 0)) * 360) * alpha;\n                    break;\n                case MixBlend.first:\n                case MixBlend.replace:\n                    r += bone.data.rotation - bone.rotation;\n                case MixBlend.add:\n                    bone.rotation += (r - (16384 - ((16384.499999999996 - r / 360) | 0)) * 360) * alpha;\n            }\n        }\n    }\n\n    /** Changes a bone's local {@link Bone#x} and {@link Bone#y}. */\n    export class TranslateTimeline extends CurveTimeline {\n        static ENTRIES = 3;\n        static PREV_TIME = -3; static PREV_X = -2; static PREV_Y = -1;\n        static X = 1; static Y = 2;\n\n        /** The index of the bone in {@link Skeleton#bones} that will be changed. */\n        boneIndex: number;\n\n        /** The time in seconds, x, and y values for each key frame. */\n        frames: ArrayLike<number>; // time, x, y, ...\n\n        constructor (frameCount: number) {\n            super(frameCount);\n            this.frames = Utils.newFloatArray(frameCount * TranslateTimeline.ENTRIES);\n        }\n\n        getPropertyId () {\n            return (TimelineType.translate << 24) + this.boneIndex;\n        }\n\n        /** Sets the time in seconds, x, and y values for the specified key frame. */\n        setFrame (frameIndex: number, time: number, x: number, y: number) {\n            frameIndex *= TranslateTimeline.ENTRIES;\n            this.frames[frameIndex] = time;\n            this.frames[frameIndex + TranslateTimeline.X] = x;\n            this.frames[frameIndex + TranslateTimeline.Y] = y;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let frames = this.frames;\n\n            let bone = skeleton.bones[this.boneIndex];\n            if (!bone.active) return;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bone.x = bone.data.x;\n                        bone.y = bone.data.y;\n                        return;\n                    case MixBlend.first:\n                        bone.x += (bone.data.x - bone.x) * alpha;\n                        bone.y += (bone.data.y - bone.y) * alpha;\n                }\n                return;\n            }\n\n            let x = 0, y = 0;\n            if (time >= frames[frames.length - TranslateTimeline.ENTRIES]) { // Time is after last frame.\n                x = frames[frames.length + TranslateTimeline.PREV_X];\n                y = frames[frames.length + TranslateTimeline.PREV_Y];\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                let frame = Animation.binarySearch(frames, time, TranslateTimeline.ENTRIES);\n                x = frames[frame + TranslateTimeline.PREV_X];\n                y = frames[frame + TranslateTimeline.PREV_Y];\n                let frameTime = frames[frame];\n                let percent = this.getCurvePercent(frame / TranslateTimeline.ENTRIES - 1,\n                    1 - (time - frameTime) / (frames[frame + TranslateTimeline.PREV_TIME] - frameTime));\n\n                x += (frames[frame + TranslateTimeline.X] - x) * percent;\n                y += (frames[frame + TranslateTimeline.Y] - y) * percent;\n            }\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.x = bone.data.x + x * alpha;\n                    bone.y = bone.data.y + y * alpha;\n                    break;\n                case MixBlend.first:\n                case MixBlend.replace:\n                    bone.x += (bone.data.x + x - bone.x) * alpha;\n                    bone.y += (bone.data.y + y - bone.y) * alpha;\n                    break;\n                case MixBlend.add:\n                    bone.x += x * alpha;\n                    bone.y += y * alpha;\n            }\n        }\n    }\n\n    /** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\n    export class ScaleTimeline extends TranslateTimeline {\n        constructor (frameCount: number) {\n            super(frameCount);\n        }\n\n        getPropertyId () {\n            return (TimelineType.scale << 24) + this.boneIndex;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let frames = this.frames;\n\n            let bone = skeleton.bones[this.boneIndex];\n            if (!bone.active) return;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bone.scaleX = bone.data.scaleX;\n                        bone.scaleY = bone.data.scaleY;\n                        return;\n                    case MixBlend.first:\n                        bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\n                        bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\n                }\n                return;\n            }\n\n            let x = 0, y = 0;\n            if (time >= frames[frames.length - ScaleTimeline.ENTRIES]) { // Time is after last frame.\n                x = frames[frames.length + ScaleTimeline.PREV_X] * bone.data.scaleX;\n                y = frames[frames.length + ScaleTimeline.PREV_Y] * bone.data.scaleY;\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                let frame = Animation.binarySearch(frames, time, ScaleTimeline.ENTRIES);\n                x = frames[frame + ScaleTimeline.PREV_X];\n                y = frames[frame + ScaleTimeline.PREV_Y];\n                let frameTime = frames[frame];\n                let percent = this.getCurvePercent(frame / ScaleTimeline.ENTRIES - 1,\n                    1 - (time - frameTime) / (frames[frame + ScaleTimeline.PREV_TIME] - frameTime));\n\n                x = (x + (frames[frame + ScaleTimeline.X] - x) * percent) * bone.data.scaleX;\n                y = (y + (frames[frame + ScaleTimeline.Y] - y) * percent) * bone.data.scaleY;\n            }\n            if (alpha == 1) {\n                if (blend == MixBlend.add) {\n                    bone.scaleX += x - bone.data.scaleX;\n                    bone.scaleY += y - bone.data.scaleY;\n                } else {\n                    bone.scaleX = x;\n                    bone.scaleY = y;\n                }\n            } else {\n                let bx = 0, by = 0;\n                if (direction == MixDirection.mixOut) {\n                    switch (blend) {\n                        case MixBlend.setup:\n                            bx = bone.data.scaleX;\n                            by = bone.data.scaleY;\n                            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n                            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n                            break;\n                        case MixBlend.first:\n                        case MixBlend.replace:\n                            bx = bone.scaleX;\n                            by = bone.scaleY;\n                            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n                            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n                            break;\n                        case MixBlend.add:\n                            bx = bone.scaleX;\n                            by = bone.scaleY;\n                            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bone.data.scaleX) * alpha;\n                            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - bone.data.scaleY) * alpha;\n                    }\n                } else {\n                    switch (blend) {\n                        case MixBlend.setup:\n                            bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\n                            by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\n                            bone.scaleX = bx + (x - bx) * alpha;\n                            bone.scaleY = by + (y - by) * alpha;\n                            break;\n                        case MixBlend.first:\n                        case MixBlend.replace:\n                            bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\n                            by = Math.abs(bone.scaleY) * MathUtils.signum(y);\n                            bone.scaleX = bx + (x - bx) * alpha;\n                            bone.scaleY = by + (y - by) * alpha;\n                            break;\n                        case MixBlend.add:\n                            bx = MathUtils.signum(x);\n                            by = MathUtils.signum(y);\n                            bone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.data.scaleX) * bx) * alpha;\n                            bone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.data.scaleY) * by) * alpha;\n                    }\n                }\n            }\n        }\n    }\n\n    /** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\n    export class ShearTimeline extends TranslateTimeline {\n        constructor (frameCount: number) {\n            super(frameCount);\n        }\n\n        getPropertyId () {\n            return (TimelineType.shear << 24) + this.boneIndex;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let frames = this.frames;\n\n            let bone = skeleton.bones[this.boneIndex];\n            if (!bone.active) return;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bone.shearX = bone.data.shearX;\n                        bone.shearY = bone.data.shearY;\n                        return;\n                    case MixBlend.first:\n                        bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\n                        bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\n                }\n                return;\n            }\n\n            let x = 0, y = 0;\n            if (time >= frames[frames.length - ShearTimeline.ENTRIES]) { // Time is after last frame.\n                x = frames[frames.length + ShearTimeline.PREV_X];\n                y = frames[frames.length + ShearTimeline.PREV_Y];\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                let frame = Animation.binarySearch(frames, time, ShearTimeline.ENTRIES);\n                x = frames[frame + ShearTimeline.PREV_X];\n                y = frames[frame + ShearTimeline.PREV_Y];\n                let frameTime = frames[frame];\n                let percent = this.getCurvePercent(frame / ShearTimeline.ENTRIES - 1,\n                    1 - (time - frameTime) / (frames[frame + ShearTimeline.PREV_TIME] - frameTime));\n\n                x = x + (frames[frame + ShearTimeline.X] - x) * percent;\n                y = y + (frames[frame + ShearTimeline.Y] - y) * percent;\n            }\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.shearX = bone.data.shearX + x * alpha;\n                    bone.shearY = bone.data.shearY + y * alpha;\n                    break;\n                case MixBlend.first:\n                case MixBlend.replace:\n                    bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n                    bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n                    break;\n                case MixBlend.add:\n                    bone.shearX += x * alpha;\n                    bone.shearY += y * alpha;\n            }\n        }\n    }\n\n    /** Changes a slot's {@link Slot#color}. */\n    export class ColorTimeline extends CurveTimeline {\n        static ENTRIES = 5;\n        static PREV_TIME = -5; static PREV_R = -4; static PREV_G = -3; static PREV_B = -2; static PREV_A = -1;\n        static R = 1; static G = 2; static B = 3; static A = 4;\n\n        /** The index of the slot in {@link Skeleton#slots} that will be changed. */\n        slotIndex: number;\n\n        /** The time in seconds, red, green, blue, and alpha values for each key frame. */\n        frames: ArrayLike<number>; // time, r, g, b, a, ...\n\n        constructor (frameCount: number) {\n            super(frameCount);\n            this.frames = Utils.newFloatArray(frameCount * ColorTimeline.ENTRIES);\n        }\n\n        getPropertyId () {\n            return (TimelineType.color << 24) + this.slotIndex;\n        }\n\n        /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n        setFrame (frameIndex: number, time: number, r: number, g: number, b: number, a: number) {\n            frameIndex *= ColorTimeline.ENTRIES;\n            this.frames[frameIndex] = time;\n            this.frames[frameIndex + ColorTimeline.R] = r;\n            this.frames[frameIndex + ColorTimeline.G] = g;\n            this.frames[frameIndex + ColorTimeline.B] = b;\n            this.frames[frameIndex + ColorTimeline.A] = a;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let slot = skeleton.slots[this.slotIndex];\n            if (!slot.bone.active) return;\n            let frames = this.frames;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        slot.color.setFromColor(slot.data.color);\n                        return;\n                    case MixBlend.first:\n                        let color = slot.color, setup = slot.data.color;\n                        color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha,\n                            (setup.a - color.a) * alpha);\n                }\n                return;\n            }\n\n            let r = 0, g = 0, b = 0, a = 0;\n            if (time >= frames[frames.length - ColorTimeline.ENTRIES]) { // Time is after last frame.\n                let i = frames.length;\n                r = frames[i + ColorTimeline.PREV_R];\n                g = frames[i + ColorTimeline.PREV_G];\n                b = frames[i + ColorTimeline.PREV_B];\n                a = frames[i + ColorTimeline.PREV_A];\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                let frame = Animation.binarySearch(frames, time, ColorTimeline.ENTRIES);\n                r = frames[frame + ColorTimeline.PREV_R];\n                g = frames[frame + ColorTimeline.PREV_G];\n                b = frames[frame + ColorTimeline.PREV_B];\n                a = frames[frame + ColorTimeline.PREV_A];\n                let frameTime = frames[frame];\n                let percent = this.getCurvePercent(frame / ColorTimeline.ENTRIES - 1,\n                    1 - (time - frameTime) / (frames[frame + ColorTimeline.PREV_TIME] - frameTime));\n\n                r += (frames[frame + ColorTimeline.R] - r) * percent;\n                g += (frames[frame + ColorTimeline.G] - g) * percent;\n                b += (frames[frame + ColorTimeline.B] - b) * percent;\n                a += (frames[frame + ColorTimeline.A] - a) * percent;\n            }\n            if (alpha == 1)\n                slot.color.set(r, g, b, a);\n            else {\n                let color = slot.color;\n                if (blend == MixBlend.setup) color.setFromColor(slot.data.color);\n                color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\n            }\n        }\n    }\n\n    /** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\n    export class TwoColorTimeline extends CurveTimeline {\n        static ENTRIES = 8;\n        static PREV_TIME = -8; static PREV_R = -7; static PREV_G = -6; static PREV_B = -5; static PREV_A = -4;\n        static PREV_R2 = -3; static PREV_G2 = -2; static PREV_B2 = -1;\n        static R = 1; static G = 2; static B = 3; static A = 4; static R2 = 5; static G2 = 6; static B2 = 7;\n\n        /** The index of the slot in {@link Skeleton#slots()} that will be changed. The {@link Slot#darkColor()} must not be\n         * null. */\n        slotIndex: number;\n\n        /** The time in seconds, red, green, blue, and alpha values of the color, red, green, blue of the dark color, for each key frame. */\n        frames: ArrayLike<number>; // time, r, g, b, a, r2, g2, b2, ...\n\n        constructor (frameCount: number) {\n            super(frameCount);\n            this.frames = Utils.newFloatArray(frameCount * TwoColorTimeline.ENTRIES);\n        }\n\n        getPropertyId () {\n            return (TimelineType.twoColor << 24) + this.slotIndex;\n        }\n\n        /** Sets the time in seconds, light, and dark colors for the specified key frame. */\n        setFrame (frameIndex: number, time: number, r: number, g: number, b: number, a: number, r2: number, g2: number, b2: number) {\n            frameIndex *= TwoColorTimeline.ENTRIES;\n            this.frames[frameIndex] = time;\n            this.frames[frameIndex + TwoColorTimeline.R] = r;\n            this.frames[frameIndex + TwoColorTimeline.G] = g;\n            this.frames[frameIndex + TwoColorTimeline.B] = b;\n            this.frames[frameIndex + TwoColorTimeline.A] = a;\n            this.frames[frameIndex + TwoColorTimeline.R2] = r2;\n            this.frames[frameIndex + TwoColorTimeline.G2] = g2;\n            this.frames[frameIndex + TwoColorTimeline.B2] = b2;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let slot = skeleton.slots[this.slotIndex];\n            if (!slot.bone.active) return;\n            let frames = this.frames;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        slot.color.setFromColor(slot.data.color);\n                        slot.darkColor.setFromColor(slot.data.darkColor);\n                        return;\n                    case MixBlend.first:\n                        let light = slot.color, dark = slot.darkColor, setupLight = slot.data.color, setupDark = slot.data.darkColor;\n                        light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha,\n                            (setupLight.a - light.a) * alpha);\n                        dark.add((setupDark.r - dark.r) * alpha, (setupDark.g - dark.g) * alpha, (setupDark.b - dark.b) * alpha, 0);\n                }\n                return;\n            }\n\n            let r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\n            if (time >= frames[frames.length - TwoColorTimeline.ENTRIES]) { // Time is after last frame.\n                let i = frames.length;\n                r = frames[i + TwoColorTimeline.PREV_R];\n                g = frames[i + TwoColorTimeline.PREV_G];\n                b = frames[i + TwoColorTimeline.PREV_B];\n                a = frames[i + TwoColorTimeline.PREV_A];\n                r2 = frames[i + TwoColorTimeline.PREV_R2];\n                g2 = frames[i + TwoColorTimeline.PREV_G2];\n                b2 = frames[i + TwoColorTimeline.PREV_B2];\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                let frame = Animation.binarySearch(frames, time, TwoColorTimeline.ENTRIES);\n                r = frames[frame + TwoColorTimeline.PREV_R];\n                g = frames[frame + TwoColorTimeline.PREV_G];\n                b = frames[frame + TwoColorTimeline.PREV_B];\n                a = frames[frame + TwoColorTimeline.PREV_A];\n                r2 = frames[frame + TwoColorTimeline.PREV_R2];\n                g2 = frames[frame + TwoColorTimeline.PREV_G2];\n                b2 = frames[frame + TwoColorTimeline.PREV_B2];\n                let frameTime = frames[frame];\n                let percent = this.getCurvePercent(frame / TwoColorTimeline.ENTRIES - 1,\n                    1 - (time - frameTime) / (frames[frame + TwoColorTimeline.PREV_TIME] - frameTime));\n\n                r += (frames[frame + TwoColorTimeline.R] - r) * percent;\n                g += (frames[frame + TwoColorTimeline.G] - g) * percent;\n                b += (frames[frame + TwoColorTimeline.B] - b) * percent;\n                a += (frames[frame + TwoColorTimeline.A] - a) * percent;\n                r2 += (frames[frame + TwoColorTimeline.R2] - r2) * percent;\n                g2 += (frames[frame + TwoColorTimeline.G2] - g2) * percent;\n                b2 += (frames[frame + TwoColorTimeline.B2] - b2) * percent;\n            }\n            if (alpha == 1) {\n                slot.color.set(r, g, b, a);\n                slot.darkColor.set(r2, g2, b2, 1);\n            } else {\n                let light = slot.color, dark = slot.darkColor;\n                if (blend == MixBlend.setup) {\n                    light.setFromColor(slot.data.color);\n                    dark.setFromColor(slot.data.darkColor);\n                }\n                light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);\n                dark.add((r2 - dark.r) * alpha, (g2 - dark.g) * alpha, (b2 - dark.b) * alpha, 0);\n            }\n        }\n    }\n\n    /** Changes a slot's {@link Slot#attachment}. */\n    export class AttachmentTimeline implements Timeline {\n        /** The index of the slot in {@link Skeleton#slots} that will be changed. */\n        slotIndex: number;\n\n        /** The time in seconds for each key frame. */\n        frames: ArrayLike<number> // time, ...\n\n        /** The attachment name for each key frame. May contain null values to clear the attachment. */\n        attachmentNames: Array<string>;\n\n        constructor (frameCount: number) {\n            this.frames = Utils.newFloatArray(frameCount);\n            this.attachmentNames = new Array<string>(frameCount);\n        }\n\n        getPropertyId () {\n            return (TimelineType.attachment << 24) + this.slotIndex;\n        }\n\n        /** The number of key frames for this timeline. */\n        getFrameCount () {\n            return this.frames.length;\n        }\n\n        /** Sets the time in seconds and the attachment name for the specified key frame. */\n        setFrame (frameIndex: number, time: number, attachmentName: string) {\n            this.frames[frameIndex] = time;\n            this.attachmentNames[frameIndex] = attachmentName;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, events: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let slot = skeleton.slots[this.slotIndex];\n            if (!slot.bone.active) return;\n            if (direction == MixDirection.mixOut && blend == MixBlend.setup) {\n                let attachmentName = slot.data.attachmentName;\n                slot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n                return;\n            }\n\n            let frames = this.frames;\n            if (time < frames[0]) {\n                if (blend == MixBlend.setup || blend == MixBlend.first) {\n                    let attachmentName = slot.data.attachmentName;\n                    slot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n                }\n                return;\n            }\n\n            let frameIndex = 0;\n            if (time >= frames[frames.length - 1]) // Time is after last frame.\n                frameIndex = frames.length - 1;\n            else\n                frameIndex = Animation.binarySearch(frames, time, 1) - 1;\n\n            let attachmentName = this.attachmentNames[frameIndex];\n            skeleton.slots[this.slotIndex]\n                .setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n        }\n    }\n\n    let zeros : ArrayLike<number> = null;\n\n    /** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}. */\n    export class DeformTimeline extends CurveTimeline {\n        /** The index of the slot in {@link Skeleton#getSlots()} that will be changed. */\n        slotIndex: number;\n\n        /** The attachment that will be deformed. */\n        attachment: VertexAttachment;\n\n        /** The time in seconds for each key frame. */\n        frames: ArrayLike<number>; // time, ...\n\n        /** The vertices for each key frame. */\n        frameVertices: Array<ArrayLike<number>>;\n\n        constructor (frameCount: number) {\n            super(frameCount);\n            this.frames = Utils.newFloatArray(frameCount);\n            this.frameVertices = new Array<ArrayLike<number>>(frameCount);\n            if (zeros == null) zeros = Utils.newFloatArray(64);\n        }\n\n        getPropertyId () {\n            return (TimelineType.deform << 27) + + this.attachment.id + this.slotIndex;\n        }\n\n        /** Sets the time in seconds and the vertices for the specified key frame.\n         * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */\n        setFrame (frameIndex: number, time: number, vertices: ArrayLike<number>) {\n            this.frames[frameIndex] = time;\n            this.frameVertices[frameIndex] = vertices;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let slot: Slot = skeleton.slots[this.slotIndex];\n            if (!slot.bone.active) return;\n            let slotAttachment: Attachment = slot.getAttachment();\n            if (!(slotAttachment instanceof VertexAttachment) || !((<VertexAttachment>slotAttachment).deformAttachment == this.attachment)) return;\n\n            let deformArray: Array<number> = slot.deform;\n            if (deformArray.length == 0) blend = MixBlend.setup;\n\n            let frameVertices = this.frameVertices;\n            let vertexCount = frameVertices[0].length;\n\n            let frames = this.frames;\n            if (time < frames[0]) {\n                let vertexAttachment = <VertexAttachment>slotAttachment;\n                switch (blend) {\n                    case MixBlend.setup:\n                        deformArray.length = 0;\n                        return;\n                    case MixBlend.first:\n                        if (alpha == 1) {\n                            deformArray.length = 0;\n                            break;\n                        }\n                        let deform: Array<number> = Utils.setArraySize(deformArray, vertexCount);\n                        if (vertexAttachment.bones == null) {\n                            // Unweighted vertex positions.\n                            let setupVertices = vertexAttachment.vertices;\n                            for (var i = 0; i < vertexCount; i++)\n                                deform[i] += (setupVertices[i] - deform[i]) * alpha;\n                        } else {\n                            // Weighted deform offsets.\n                            alpha = 1 - alpha;\n                            for (var i = 0; i < vertexCount; i++)\n                                deform[i] *= alpha;\n                        }\n                }\n                return;\n            }\n\n            let deform: Array<number> = Utils.setArraySize(deformArray, vertexCount);\n            if (time >= frames[frames.length - 1]) { // Time is after last frame.\n                let lastVertices = frameVertices[frames.length - 1];\n                if (alpha == 1) {\n                    if (blend == MixBlend.add) {\n                        let vertexAttachment = slotAttachment as VertexAttachment;\n                        if (vertexAttachment.bones == null) {\n                            // Unweighted vertex positions, with alpha.\n                            let setupVertices = vertexAttachment.vertices;\n                            for (let i = 0; i < vertexCount; i++) {\n                                deform[i] += lastVertices[i] - setupVertices[i];\n                            }\n                        } else {\n                            // Weighted deform offsets, with alpha.\n                            for (let i = 0; i < vertexCount; i++)\n                                deform[i] += lastVertices[i];\n                        }\n                    } else {\n                        Utils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);\n                    }\n                } else {\n                    switch (blend) {\n                        case MixBlend.setup: {\n                            let vertexAttachment = slotAttachment as VertexAttachment;\n                            if (vertexAttachment.bones == null) {\n                                // Unweighted vertex positions, with alpha.\n                                let setupVertices = vertexAttachment.vertices;\n                                for (let i = 0; i < vertexCount; i++) {\n                                    let setup = setupVertices[i];\n                                    deform[i] = setup + (lastVertices[i] - setup) * alpha;\n                                }\n                            } else {\n                                // Weighted deform offsets, with alpha.\n                                for (let i = 0; i < vertexCount; i++)\n                                    deform[i] = lastVertices[i] * alpha;\n                            }\n                            break;\n                        }\n                        case MixBlend.first:\n                        case MixBlend.replace:\n                            for (let i = 0; i < vertexCount; i++)\n                                deform[i] += (lastVertices[i] - deform[i]) * alpha;\n                            break;\n                        case MixBlend.add:\n                            let vertexAttachment = slotAttachment as VertexAttachment;\n                            if (vertexAttachment.bones == null) {\n                                // Unweighted vertex positions, with alpha.\n                                let setupVertices = vertexAttachment.vertices;\n                                for (let i = 0; i < vertexCount; i++) {\n                                    deform[i] += (lastVertices[i] - setupVertices[i]) * alpha;\n                                }\n                            } else {\n                                // Weighted deform offsets, with alpha.\n                                for (let i = 0; i < vertexCount; i++)\n                                    deform[i] += lastVertices[i] * alpha;\n                            }\n                    }\n                }\n                return;\n            }\n\n            // Interpolate between the previous frame and the current frame.\n            let frame = Animation.binarySearch(frames, time);\n            let prevVertices = frameVertices[frame - 1];\n            let nextVertices = frameVertices[frame];\n            let frameTime = frames[frame];\n            let percent = this.getCurvePercent(frame - 1, 1 - (time - frameTime) / (frames[frame - 1] - frameTime));\n\n            if (alpha == 1) {\n                if (blend == MixBlend.add) {\n                    let vertexAttachment = slotAttachment as VertexAttachment;\n                    if (vertexAttachment.bones == null) {\n                        // Unweighted vertex positions, with alpha.\n                        let setupVertices = vertexAttachment.vertices;\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i];\n                            deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];\n                        }\n                    } else {\n                        // Weighted deform offsets, with alpha.\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i];\n                            deform[i] += prev + (nextVertices[i] - prev) * percent;\n                        }\n                    }\n                } else {\n                    for (let i = 0; i < vertexCount; i++) {\n                        let prev = prevVertices[i];\n                        deform[i] = prev + (nextVertices[i] - prev) * percent;\n                    }\n                }\n            } else {\n                switch (blend) {\n                    case MixBlend.setup: {\n                        let vertexAttachment = slotAttachment as VertexAttachment;\n                        if (vertexAttachment.bones == null) {\n                            // Unweighted vertex positions, with alpha.\n                            let setupVertices = vertexAttachment.vertices;\n                            for (let i = 0; i < vertexCount; i++) {\n                                let prev = prevVertices[i], setup = setupVertices[i];\n                                deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\n                            }\n                        } else {\n                            // Weighted deform offsets, with alpha.\n                            for (let i = 0; i < vertexCount; i++) {\n                                let prev = prevVertices[i];\n                                deform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\n                            }\n                        }\n                        break;\n                    }\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i];\n                            deform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;\n                        }\n                        break;\n                    case MixBlend.add:\n                        let vertexAttachment = slotAttachment as VertexAttachment;\n                        if (vertexAttachment.bones == null) {\n                            // Unweighted vertex positions, with alpha.\n                            let setupVertices = vertexAttachment.vertices;\n                            for (let i = 0; i < vertexCount; i++) {\n                                let prev = prevVertices[i];\n                                deform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;\n                            }\n                        } else {\n                            // Weighted deform offsets, with alpha.\n                            for (let i = 0; i < vertexCount; i++) {\n                                let prev = prevVertices[i];\n                                deform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;\n                            }\n                        }\n                }\n            }\n        }\n    }\n\n    /** Fires an {@link Event} when specific animation times are reached. */\n    export class EventTimeline implements Timeline {\n        /** The time in seconds for each key frame. */\n        frames: ArrayLike<number>; // time, ...\n\n        /** The event for each key frame. */\n        events: Array<Event>;\n\n        constructor (frameCount: number) {\n            this.frames = Utils.newFloatArray(frameCount);\n            this.events = new Array<Event>(frameCount);\n        }\n\n        getPropertyId () {\n            return TimelineType.event << 24;\n        }\n\n        /** The number of key frames for this timeline. */\n        getFrameCount () {\n            return this.frames.length;\n        }\n\n        /** Sets the time in seconds and the event for the specified key frame. */\n        setFrame (frameIndex: number, event: Event) {\n            this.frames[frameIndex] = event.time;\n            this.events[frameIndex] = event;\n        }\n\n        /** Fires events for frames > `lastTime` and <= `time`. */\n        apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            if (firedEvents == null) return;\n            let frames = this.frames;\n            let frameCount = this.frames.length;\n\n            if (lastTime > time) { // Fire events after last time for looped animations.\n                this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);\n                lastTime = -1;\n            } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\n                return;\n            if (time < frames[0]) return; // Time is before first frame.\n\n            let frame = 0;\n            if (lastTime < frames[0])\n                frame = 0;\n            else {\n                frame = Animation.binarySearch(frames, lastTime);\n                let frameTime = frames[frame];\n                while (frame > 0) { // Fire multiple events with the same frame.\n                    if (frames[frame - 1] != frameTime) break;\n                    frame--;\n                }\n            }\n            for (; frame < frameCount && time >= frames[frame]; frame++)\n                firedEvents.push(this.events[frame]);\n        }\n    }\n\n    /** Changes a skeleton's {@link Skeleton#drawOrder}. */\n    export class DrawOrderTimeline implements Timeline {\n        /** The time in seconds for each key frame. */\n        frames: ArrayLike<number>; // time, ...\n\n        /** The draw order for each key frame. See {@link #setFrame(int, float, int[])}. */\n        drawOrders: Array<Array<number>>;\n\n        constructor (frameCount: number) {\n            this.frames = Utils.newFloatArray(frameCount);\n            this.drawOrders = new Array<Array<number>>(frameCount);\n        }\n\n        getPropertyId () {\n            return TimelineType.drawOrder << 24;\n        }\n\n        /** The number of key frames for this timeline. */\n        getFrameCount () {\n            return this.frames.length;\n        }\n\n        /** Sets the time in seconds and the draw order for the specified key frame.\n         * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\n         *           draw order. */\n        setFrame (frameIndex: number, time: number, drawOrder: Array<number>) {\n            this.frames[frameIndex] = time;\n            this.drawOrders[frameIndex] = drawOrder;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let drawOrder: Array<Slot> = skeleton.drawOrder;\n            let slots: Array<Slot> = skeleton.slots;\n            if (direction == MixDirection.mixOut && blend == MixBlend.setup) {\n                Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n                return;\n            }\n\n            let frames = this.frames;\n            if (time < frames[0]) {\n                if (blend == MixBlend.setup || blend == MixBlend.first) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n                return;\n            }\n\n            let frame = 0;\n            if (time >= frames[frames.length - 1]) // Time is after last frame.\n                frame = frames.length - 1;\n            else\n                frame = Animation.binarySearch(frames, time) - 1;\n\n            let drawOrderToSetupIndex = this.drawOrders[frame];\n            if (drawOrderToSetupIndex == null)\n                Utils.arrayCopy(slots, 0, drawOrder, 0, slots.length);\n            else {\n                for (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\n                    drawOrder[i] = slots[drawOrderToSetupIndex[i]];\n            }\n        }\n    }\n\n    /** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},\n     * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}. */\n    export class IkConstraintTimeline extends CurveTimeline {\n        static ENTRIES = 6;\n        static PREV_TIME = -6; static PREV_MIX = -5; static PREV_SOFTNESS = -4; static PREV_BEND_DIRECTION = -3; static PREV_COMPRESS = -2; static PREV_STRETCH = -1;\n        static MIX = 1; static SOFTNESS = 2; static BEND_DIRECTION = 3; static COMPRESS = 4; static STRETCH = 5;\n\n        /** The index of the IK constraint slot in {@link Skeleton#ikConstraints} that will be changed. */\n        ikConstraintIndex: number;\n\n        /** The time in seconds, mix, softness, bend direction, compress, and stretch for each key frame. */\n        frames: ArrayLike<number>; // time, mix, softness, bendDirection, compress, stretch, ...\n\n        constructor (frameCount: number) {\n            super(frameCount);\n            this.frames = Utils.newFloatArray(frameCount * IkConstraintTimeline.ENTRIES);\n        }\n\n        getPropertyId () {\n            return (TimelineType.ikConstraint << 24) + this.ikConstraintIndex;\n        }\n\n        /** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */\n        setFrame (frameIndex: number, time: number, mix: number, softness: number, bendDirection: number, compress: boolean, stretch: boolean) {\n            frameIndex *= IkConstraintTimeline.ENTRIES;\n            this.frames[frameIndex] = time;\n            this.frames[frameIndex + IkConstraintTimeline.MIX] = mix;\n            this.frames[frameIndex + IkConstraintTimeline.SOFTNESS] = softness;\n            this.frames[frameIndex + IkConstraintTimeline.BEND_DIRECTION] = bendDirection;\n            this.frames[frameIndex + IkConstraintTimeline.COMPRESS] = compress ? 1 : 0;\n            this.frames[frameIndex + IkConstraintTimeline.STRETCH] = stretch ? 1 : 0;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let frames = this.frames;\n            let constraint: IkConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\n            if (!constraint.active) return;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        constraint.mix = constraint.data.mix;\n                        constraint.softness = constraint.data.softness;\n                        constraint.bendDirection = constraint.data.bendDirection;\n                        constraint.compress = constraint.data.compress;\n                        constraint.stretch = constraint.data.stretch;\n                        return;\n                    case MixBlend.first:\n                        constraint.mix += (constraint.data.mix - constraint.mix) * alpha;\n                        constraint.softness += (constraint.data.softness - constraint.softness) * alpha;\n                        constraint.bendDirection = constraint.data.bendDirection;\n                        constraint.compress = constraint.data.compress;\n                        constraint.stretch = constraint.data.stretch;\n                }\n                return;\n            }\n\n            if (time >= frames[frames.length - IkConstraintTimeline.ENTRIES]) { // Time is after last frame.\n                if (blend == MixBlend.setup) {\n                    constraint.mix = constraint.data.mix + (frames[frames.length + IkConstraintTimeline.PREV_MIX] - constraint.data.mix) * alpha;\n                    constraint.softness = constraint.data.softness\n                        + (frames[frames.length + IkConstraintTimeline.PREV_SOFTNESS] - constraint.data.softness) * alpha;\n                    if (direction == MixDirection.mixOut) {\n                        constraint.bendDirection = constraint.data.bendDirection;\n                        constraint.compress = constraint.data.compress;\n                        constraint.stretch = constraint.data.stretch;\n                    } else {\n                        constraint.bendDirection = frames[frames.length + IkConstraintTimeline.PREV_BEND_DIRECTION]\n                        constraint.compress = frames[frames.length + IkConstraintTimeline.PREV_COMPRESS] != 0;\n                        constraint.stretch = frames[frames.length + IkConstraintTimeline.PREV_STRETCH] != 0;\n                    }\n                } else {\n                    constraint.mix += (frames[frames.length + IkConstraintTimeline.PREV_MIX] - constraint.mix) * alpha;\n                    constraint.softness += (frames[frames.length + IkConstraintTimeline.PREV_SOFTNESS] - constraint.softness) * alpha;\n                    if (direction == MixDirection.mixIn) {\n                        constraint.bendDirection = frames[frames.length + IkConstraintTimeline.PREV_BEND_DIRECTION];\n                        constraint.compress = frames[frames.length + IkConstraintTimeline.PREV_COMPRESS] != 0;\n                        constraint.stretch = frames[frames.length + IkConstraintTimeline.PREV_STRETCH] != 0;\n                    }\n                }\n                return;\n            }\n\n            // Interpolate between the previous frame and the current frame.\n            let frame = Animation.binarySearch(frames, time, IkConstraintTimeline.ENTRIES);\n            let mix = frames[frame + IkConstraintTimeline.PREV_MIX];\n            let softness = frames[frame + IkConstraintTimeline.PREV_SOFTNESS];\n            let frameTime = frames[frame];\n            let percent = this.getCurvePercent(frame / IkConstraintTimeline.ENTRIES - 1,\n                1 - (time - frameTime) / (frames[frame + IkConstraintTimeline.PREV_TIME] - frameTime));\n\n            if (blend == MixBlend.setup) {\n                constraint.mix = constraint.data.mix + (mix + (frames[frame + IkConstraintTimeline.MIX] - mix) * percent - constraint.data.mix) * alpha;\n                constraint.softness = constraint.data.softness\n                    + (softness + (frames[frame + IkConstraintTimeline.SOFTNESS] - softness) * percent - constraint.data.softness) * alpha;\n                if (direction == MixDirection.mixOut) {\n                    constraint.bendDirection = constraint.data.bendDirection;\n                    constraint.compress = constraint.data.compress;\n                    constraint.stretch = constraint.data.stretch;\n                } else {\n                    constraint.bendDirection = frames[frame + IkConstraintTimeline.PREV_BEND_DIRECTION];\n                    constraint.compress = frames[frame + IkConstraintTimeline.PREV_COMPRESS] != 0;\n                    constraint.stretch = frames[frame + IkConstraintTimeline.PREV_STRETCH] != 0;\n                }\n            } else {\n                constraint.mix += (mix + (frames[frame + IkConstraintTimeline.MIX] - mix) * percent - constraint.mix) * alpha;\n                constraint.softness += (softness + (frames[frame + IkConstraintTimeline.SOFTNESS] - softness) * percent - constraint.softness) * alpha;\n                if (direction == MixDirection.mixIn) {\n                    constraint.bendDirection = frames[frame + IkConstraintTimeline.PREV_BEND_DIRECTION];\n                    constraint.compress = frames[frame + IkConstraintTimeline.PREV_COMPRESS] != 0;\n                    constraint.stretch = frames[frame + IkConstraintTimeline.PREV_STRETCH] != 0;\n                }\n            }\n        }\n    }\n\n    /** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},\n     * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}. */\n    export class TransformConstraintTimeline extends CurveTimeline {\n        static ENTRIES = 5;\n        static PREV_TIME = -5; static PREV_ROTATE = -4; static PREV_TRANSLATE = -3; static PREV_SCALE = -2; static PREV_SHEAR = -1;\n        static ROTATE = 1; static TRANSLATE = 2; static SCALE = 3; static SHEAR = 4;\n\n        /** The index of the transform constraint slot in {@link Skeleton#transformConstraints} that will be changed. */\n        transformConstraintIndex: number;\n\n        /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for each key frame. */\n        frames: ArrayLike<number>; // time, rotate mix, translate mix, scale mix, shear mix, ...\n\n        constructor (frameCount: number) {\n            super(frameCount);\n            this.frames = Utils.newFloatArray(frameCount * TransformConstraintTimeline.ENTRIES);\n        }\n\n        getPropertyId () {\n            return (TimelineType.transformConstraint << 24) + this.transformConstraintIndex;\n        }\n\n        /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */\n        setFrame (frameIndex: number, time: number, rotateMix: number, translateMix: number, scaleMix: number, shearMix: number) {\n            frameIndex *= TransformConstraintTimeline.ENTRIES;\n            this.frames[frameIndex] = time;\n            this.frames[frameIndex + TransformConstraintTimeline.ROTATE] = rotateMix;\n            this.frames[frameIndex + TransformConstraintTimeline.TRANSLATE] = translateMix;\n            this.frames[frameIndex + TransformConstraintTimeline.SCALE] = scaleMix;\n            this.frames[frameIndex + TransformConstraintTimeline.SHEAR] = shearMix;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let frames = this.frames;\n\n            let constraint: TransformConstraint = skeleton.transformConstraints[this.transformConstraintIndex];\n            if (!constraint.active) return;\n            if (time < frames[0]) {\n                let data = constraint.data;\n                switch (blend) {\n                    case MixBlend.setup:\n                        constraint.rotateMix = data.rotateMix;\n                        constraint.translateMix = data.translateMix;\n                        constraint.scaleMix = data.scaleMix;\n                        constraint.shearMix = data.shearMix;\n                        return;\n                    case MixBlend.first:\n                        constraint.rotateMix += (data.rotateMix - constraint.rotateMix) * alpha;\n                        constraint.translateMix += (data.translateMix - constraint.translateMix) * alpha;\n                        constraint.scaleMix += (data.scaleMix - constraint.scaleMix) * alpha;\n                        constraint.shearMix += (data.shearMix - constraint.shearMix) * alpha;\n                }\n                return;\n            }\n\n            let rotate = 0, translate = 0, scale = 0, shear = 0;\n            if (time >= frames[frames.length - TransformConstraintTimeline.ENTRIES]) { // Time is after last frame.\n                let i = frames.length;\n                rotate = frames[i + TransformConstraintTimeline.PREV_ROTATE];\n                translate = frames[i + TransformConstraintTimeline.PREV_TRANSLATE];\n                scale = frames[i + TransformConstraintTimeline.PREV_SCALE];\n                shear = frames[i + TransformConstraintTimeline.PREV_SHEAR];\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                let frame = Animation.binarySearch(frames, time, TransformConstraintTimeline.ENTRIES);\n                rotate = frames[frame + TransformConstraintTimeline.PREV_ROTATE];\n                translate = frames[frame + TransformConstraintTimeline.PREV_TRANSLATE];\n                scale = frames[frame + TransformConstraintTimeline.PREV_SCALE];\n                shear = frames[frame + TransformConstraintTimeline.PREV_SHEAR];\n                let frameTime = frames[frame];\n                let percent = this.getCurvePercent(frame / TransformConstraintTimeline.ENTRIES - 1,\n                    1 - (time - frameTime) / (frames[frame + TransformConstraintTimeline.PREV_TIME] - frameTime));\n\n                rotate += (frames[frame + TransformConstraintTimeline.ROTATE] - rotate) * percent;\n                translate += (frames[frame + TransformConstraintTimeline.TRANSLATE] - translate) * percent;\n                scale += (frames[frame + TransformConstraintTimeline.SCALE] - scale) * percent;\n                shear += (frames[frame + TransformConstraintTimeline.SHEAR] - shear) * percent;\n            }\n            if (blend == MixBlend.setup) {\n                let data = constraint.data;\n                constraint.rotateMix = data.rotateMix + (rotate - data.rotateMix) * alpha;\n                constraint.translateMix = data.translateMix + (translate - data.translateMix) * alpha;\n                constraint.scaleMix = data.scaleMix + (scale - data.scaleMix) * alpha;\n                constraint.shearMix = data.shearMix + (shear - data.shearMix) * alpha;\n            } else {\n                constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;\n                constraint.translateMix += (translate - constraint.translateMix) * alpha;\n                constraint.scaleMix += (scale - constraint.scaleMix) * alpha;\n                constraint.shearMix += (shear - constraint.shearMix) * alpha;\n            }\n        }\n    }\n\n    /** Changes a path constraint's {@link PathConstraint#position}. */\n    export class PathConstraintPositionTimeline extends CurveTimeline {\n        static ENTRIES = 2;\n        static PREV_TIME = -2; static PREV_VALUE = -1;\n        static VALUE = 1;\n\n        /** The index of the path constraint slot in {@link Skeleton#pathConstraints} that will be changed. */\n        pathConstraintIndex: number;\n\n        /** The time in seconds and path constraint position for each key frame. */\n        frames: ArrayLike<number>; // time, position, ...\n\n        constructor (frameCount: number) {\n            super(frameCount);\n            this.frames = Utils.newFloatArray(frameCount * PathConstraintPositionTimeline.ENTRIES);\n        }\n\n        getPropertyId () {\n            return (TimelineType.pathConstraintPosition << 24) + this.pathConstraintIndex;\n        }\n\n        /** Sets the time in seconds and path constraint position for the specified key frame. */\n        setFrame (frameIndex: number, time: number, value: number) {\n            frameIndex *= PathConstraintPositionTimeline.ENTRIES;\n            this.frames[frameIndex] = time;\n            this.frames[frameIndex + PathConstraintPositionTimeline.VALUE] = value;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let frames = this.frames;\n            let constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\n            if (!constraint.active) return;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        constraint.position = constraint.data.position;\n                        return;\n                    case MixBlend.first:\n                        constraint.position += (constraint.data.position - constraint.position) * alpha;\n                }\n                return;\n            }\n\n            let position = 0;\n            if (time >= frames[frames.length - PathConstraintPositionTimeline.ENTRIES]) // Time is after last frame.\n                position = frames[frames.length + PathConstraintPositionTimeline.PREV_VALUE];\n            else {\n                // Interpolate between the previous frame and the current frame.\n                let frame = Animation.binarySearch(frames, time, PathConstraintPositionTimeline.ENTRIES);\n                position = frames[frame + PathConstraintPositionTimeline.PREV_VALUE];\n                let frameTime = frames[frame];\n                let percent = this.getCurvePercent(frame / PathConstraintPositionTimeline.ENTRIES - 1,\n                    1 - (time - frameTime) / (frames[frame + PathConstraintPositionTimeline.PREV_TIME] - frameTime));\n\n                position += (frames[frame + PathConstraintPositionTimeline.VALUE] - position) * percent;\n            }\n            if (blend == MixBlend.setup)\n                constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;\n            else\n                constraint.position += (position - constraint.position) * alpha;\n        }\n    }\n\n    /** Changes a path constraint's {@link PathConstraint#spacing}. */\n    export class PathConstraintSpacingTimeline extends PathConstraintPositionTimeline {\n        constructor (frameCount: number) {\n            super(frameCount);\n        }\n\n        getPropertyId () {\n            return (TimelineType.pathConstraintSpacing << 24) + this.pathConstraintIndex;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let frames = this.frames;\n            let constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\n            if (!constraint.active) return;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        constraint.spacing = constraint.data.spacing;\n                        return;\n                    case MixBlend.first:\n                        constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;\n                }\n                return;\n            }\n\n            let spacing = 0;\n            if (time >= frames[frames.length - PathConstraintSpacingTimeline.ENTRIES]) // Time is after last frame.\n                spacing = frames[frames.length + PathConstraintSpacingTimeline.PREV_VALUE];\n            else {\n                // Interpolate between the previous frame and the current frame.\n                let frame = Animation.binarySearch(frames, time, PathConstraintSpacingTimeline.ENTRIES);\n                spacing = frames[frame + PathConstraintSpacingTimeline.PREV_VALUE];\n                let frameTime = frames[frame];\n                let percent = this.getCurvePercent(frame / PathConstraintSpacingTimeline.ENTRIES - 1,\n                    1 - (time - frameTime) / (frames[frame + PathConstraintSpacingTimeline.PREV_TIME] - frameTime));\n\n                spacing += (frames[frame + PathConstraintSpacingTimeline.VALUE] - spacing) * percent;\n            }\n\n            if (blend == MixBlend.setup)\n                constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;\n            else\n                constraint.spacing += (spacing - constraint.spacing) * alpha;\n        }\n    }\n\n    /** Changes a transform constraint's {@link PathConstraint#rotateMix} and\n     * {@link TransformConstraint#translateMix}. */\n    export class PathConstraintMixTimeline extends CurveTimeline {\n        static ENTRIES = 3;\n        static PREV_TIME = -3; static PREV_ROTATE = -2; static PREV_TRANSLATE = -1;\n        static ROTATE = 1; static TRANSLATE = 2;\n\n        /** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\n        pathConstraintIndex: number;\n\n        /** The time in seconds, rotate mix, and translate mix for each key frame. */\n        frames: ArrayLike<number>; // time, rotate mix, translate mix, ...\n\n        constructor (frameCount: number) {\n            super(frameCount);\n            this.frames = Utils.newFloatArray(frameCount * PathConstraintMixTimeline.ENTRIES);\n        }\n\n        getPropertyId () {\n            return (TimelineType.pathConstraintMix << 24) + this.pathConstraintIndex;\n        }\n\n        /** The time in seconds, rotate mix, and translate mix for the specified key frame. */\n        setFrame (frameIndex: number, time: number, rotateMix: number, translateMix: number) {\n            frameIndex *= PathConstraintMixTimeline.ENTRIES;\n            this.frames[frameIndex] = time;\n            this.frames[frameIndex + PathConstraintMixTimeline.ROTATE] = rotateMix;\n            this.frames[frameIndex + PathConstraintMixTimeline.TRANSLATE] = translateMix;\n        }\n\n        apply (skeleton: Skeleton, lastTime: number, time: number, firedEvents: Array<Event>, alpha: number, blend: MixBlend, direction: MixDirection) {\n            let frames = this.frames;\n            let constraint: PathConstraint = skeleton.pathConstraints[this.pathConstraintIndex];\n            if (!constraint.active) return;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        constraint.rotateMix = constraint.data.rotateMix;\n                        constraint.translateMix = constraint.data.translateMix;\n                        return;\n                    case MixBlend.first:\n                        constraint.rotateMix += (constraint.data.rotateMix - constraint.rotateMix) * alpha;\n                        constraint.translateMix += (constraint.data.translateMix - constraint.translateMix) * alpha;\n                }\n                return;\n            }\n\n            let rotate = 0, translate = 0;\n            if (time >= frames[frames.length - PathConstraintMixTimeline.ENTRIES]) { // Time is after last frame.\n                rotate = frames[frames.length + PathConstraintMixTimeline.PREV_ROTATE];\n                translate = frames[frames.length + PathConstraintMixTimeline.PREV_TRANSLATE];\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                let frame = Animation.binarySearch(frames, time, PathConstraintMixTimeline.ENTRIES);\n                rotate = frames[frame + PathConstraintMixTimeline.PREV_ROTATE];\n                translate = frames[frame + PathConstraintMixTimeline.PREV_TRANSLATE];\n                let frameTime = frames[frame];\n                let percent = this.getCurvePercent(frame / PathConstraintMixTimeline.ENTRIES - 1,\n                    1 - (time - frameTime) / (frames[frame + PathConstraintMixTimeline.PREV_TIME] - frameTime));\n\n                rotate += (frames[frame + PathConstraintMixTimeline.ROTATE] - rotate) * percent;\n                translate += (frames[frame + PathConstraintMixTimeline.TRANSLATE] - translate) * percent;\n            }\n\n            if (blend == MixBlend.setup) {\n                constraint.rotateMix = constraint.data.rotateMix + (rotate - constraint.data.rotateMix) * alpha;\n                constraint.translateMix = constraint.data.translateMix + (translate - constraint.data.translateMix) * alpha;\n            } else {\n                constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;\n                constraint.translateMix += (translate - constraint.translateMix) * alpha;\n            }\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    /** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\n     * multiple animations on top of each other (layering).\n     *\n     * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide. */\n    export class AnimationState {\n        static emptyAnimation = new Animation(\"<empty>\", [], 0);\n\n        /** 1. A previously applied timeline has set this property.\n         *\n         * Result: Mix from the current pose to the timeline pose. */\n        static SUBSEQUENT = 0;\n        /** 1. This is the first timeline to set this property.\n         * 2. The next track entry applied after this one does not have a timeline to set this property.\n         *\n         * Result: Mix from the setup pose to the timeline pose. */\n        static FIRST = 1;\n        /** 1. This is the first timeline to set this property.\n         * 2. The next track entry to be applied does have a timeline to set this property.\n         * 3. The next track entry after that one does not have a timeline to set this property.\n         *\n         * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\n         * that key the same property. A subsequent timeline will set this property using a mix. */\n        static HOLD = 2;\n        /** 1. This is the first timeline to set this property.\n         * 2. The next track entry to be applied does have a timeline to set this property.\n         * 3. The next track entry after that one does have a timeline to set this property.\n         * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\n         *\n         * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n         * 2 track entries in a row have a timeline that sets the same property.\n         *\n         * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n         * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n         * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\n         * place. */\n        static HOLD_MIX = 3;\n        /** 1. An attachment timeline in a subsequent track entry sets the attachment for the same slot as this attachment\n         * timeline.\n         *\n         * Result: This attachment timeline will not use MixDirection.out, which would otherwise show the setup mode attachment (or\n         * none if not visible in setup mode). This allows deform timelines to be applied for the subsequent entry to mix from, rather\n         * than mixing from the setup pose. */\n        static NOT_LAST = 4;\n\n        /** The AnimationStateData to look up mix durations. */\n        data: AnimationStateData;\n\n        /** The list of tracks that currently have animations, which may contain null entries. */\n        tracks = new Array<TrackEntry>();\n\n        /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\n         * or faster. Defaults to 1.\n         *\n         * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */\n        timeScale = 1;\n\n        events = new Array<Event>();\n        listeners = new Array<AnimationStateListener>();\n        queue = new EventQueue(this);\n        propertyIDs = new IntSet();\n        animationsChanged = false;\n\n        trackEntryPool = new Pool<TrackEntry>(() => new TrackEntry());\n\n        constructor (data: AnimationStateData) {\n            this.data = data;\n        }\n\n        /** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */\n        update (delta: number) {\n            delta *= this.timeScale;\n            let tracks = this.tracks;\n            for (let i = 0, n = tracks.length; i < n; i++) {\n                let current = tracks[i];\n                if (current == null) continue;\n\n                current.animationLast = current.nextAnimationLast;\n                current.trackLast = current.nextTrackLast;\n\n                let currentDelta = delta * current.timeScale;\n\n                if (current.delay > 0) {\n                    current.delay -= currentDelta;\n                    if (current.delay > 0) continue;\n                    currentDelta = -current.delay;\n                    current.delay = 0;\n                }\n\n                let next = current.next;\n                if (next != null) {\n                    // When the next entry's delay is passed, change to the next entry, preserving leftover time.\n                    let nextTime = current.trackLast - next.delay;\n                    if (nextTime >= 0) {\n                        next.delay = 0;\n                        next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;\n                        current.trackTime += currentDelta;\n                        this.setCurrent(i, next, true);\n                        while (next.mixingFrom != null) {\n                            next.mixTime += delta;\n                            next = next.mixingFrom;\n                        }\n                        continue;\n                    }\n                } else if (current.trackLast >= current.trackEnd && current.mixingFrom == null) {\n                    tracks[i] = null;\n                    this.queue.end(current);\n                    this.disposeNext(current);\n                    continue;\n                }\n                if (current.mixingFrom != null && this.updateMixingFrom(current, delta)) {\n                    // End mixing from entries once all have completed.\n                    let from = current.mixingFrom;\n                    current.mixingFrom = null;\n                    if (from != null) from.mixingTo = null;\n                    while (from != null) {\n                        this.queue.end(from);\n                        from = from.mixingFrom;\n                    }\n                }\n\n                current.trackTime += currentDelta;\n            }\n\n            this.queue.drain();\n        }\n\n        /** Returns true when all mixing from entries are complete. */\n        updateMixingFrom (to: TrackEntry, delta: number): boolean {\n            let from = to.mixingFrom;\n            if (from == null) return true;\n\n            let finished = this.updateMixingFrom(from, delta);\n\n            from.animationLast = from.nextAnimationLast;\n            from.trackLast = from.nextTrackLast;\n\n            // Require mixTime > 0 to ensure the mixing from entry was applied at least once.\n            if (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\n                // Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).\n                if (from.totalAlpha == 0 || to.mixDuration == 0) {\n                    to.mixingFrom = from.mixingFrom;\n                    if (from.mixingFrom != null) from.mixingFrom.mixingTo = to;\n                    to.interruptAlpha = from.interruptAlpha;\n                    this.queue.end(from);\n                }\n                return finished;\n            }\n\n            from.trackTime += delta * from.timeScale;\n            to.mixTime += delta;\n            return false;\n        }\n\n        /** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\n         * animation state can be applied to multiple skeletons to pose them identically.\n         * @returns True if any animations were applied. */\n        apply (skeleton: Skeleton) : boolean {\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            if (this.animationsChanged) this._animationsChanged();\n\n            let events = this.events;\n            let tracks = this.tracks;\n            let applied = false;\n\n            for (let i = 0, n = tracks.length; i < n; i++) {\n                let current = tracks[i];\n                if (current == null || current.delay > 0) continue;\n                applied = true;\n                let blend: MixBlend = i == 0 ? MixBlend.first : current.mixBlend;\n\n                // Apply mixing from entries first.\n                let mix = current.alpha;\n                if (current.mixingFrom != null)\n                    mix *= this.applyMixingFrom(current, skeleton, blend);\n                else if (current.trackTime >= current.trackEnd && current.next == null)\n                    mix = 0;\n\n                // Apply current entry.\n                let animationLast = current.animationLast, animationTime = current.getAnimationTime();\n                let timelineCount = current.animation.timelines.length;\n                let timelines = current.animation.timelines;\n                if ((i == 0 && mix == 1) || blend == MixBlend.add) {\n                    for (let ii = 0; ii < timelineCount; ii++) {\n                        // Fixes issue #302 on IOS9 where mix, blend sometimes became undefined and caused assets\n                        // to sometimes stop rendering when using color correction, as their RGBA values become NaN.\n                        // (https://github.com/pixijs/pixi-spine/issues/302)\n                        Utils.webkit602BugfixHelper(mix, blend);\n                        timelines[ii].apply(skeleton, animationLast, animationTime, events, mix, blend, MixDirection.mixIn);\n                    }\n                } else {\n                    let timelineMode = current.timelineMode;\n\n                    let firstFrame = current.timelinesRotation.length == 0;\n                    if (firstFrame) Utils.setArraySize(current.timelinesRotation, timelineCount << 1, null);\n                    let timelinesRotation = current.timelinesRotation;\n\n                    for (let ii = 0; ii < timelineCount; ii++) {\n                        let timeline = timelines[ii];\n                        let timelineBlend = (timelineMode[ii] & (AnimationState.NOT_LAST - 1)) == AnimationState.SUBSEQUENT ? blend : MixBlend.setup;\n                        if (timeline instanceof RotateTimeline) {\n                            this.applyRotateTimeline(timeline, skeleton, animationTime, mix, timelineBlend, timelinesRotation, ii << 1, firstFrame);\n                        } else {\n                            // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n                            Utils.webkit602BugfixHelper(mix, blend);\n                            timeline.apply(skeleton, animationLast, animationTime, events, mix, timelineBlend, MixDirection.mixIn);\n                        }\n                    }\n                }\n                this.queueEvents(current, animationTime);\n                events.length = 0;\n                current.nextAnimationLast = animationTime;\n                current.nextTrackLast = current.trackTime;\n            }\n\n            this.queue.drain();\n            return applied;\n        }\n\n        applyMixingFrom (to: TrackEntry, skeleton: Skeleton, blend: MixBlend) {\n            let from = to.mixingFrom;\n            if (from.mixingFrom != null) this.applyMixingFrom(from, skeleton, blend);\n\n            let mix = 0;\n            if (to.mixDuration == 0) { // Single frame mix to undo mixingFrom changes.\n                mix = 1;\n                if (blend == MixBlend.first) blend = MixBlend.setup;\n            } else {\n                mix = to.mixTime / to.mixDuration;\n                if (mix > 1) mix = 1;\n                if (blend != MixBlend.first) blend = from.mixBlend;\n            }\n\n            let events = mix < from.eventThreshold ? this.events : null;\n            let attachments = mix < from.attachmentThreshold, drawOrder = mix < from.drawOrderThreshold;\n            let animationLast = from.animationLast, animationTime = from.getAnimationTime();\n            let timelineCount = from.animation.timelines.length;\n            let timelines = from.animation.timelines;\n            let alphaHold = from.alpha * to.interruptAlpha, alphaMix = alphaHold * (1 - mix);\n            if (blend == MixBlend.add) {\n                for (let i = 0; i < timelineCount; i++)\n                    timelines[i].apply(skeleton, animationLast, animationTime, events, alphaMix, blend, MixDirection.mixOut);\n            } else {\n                let timelineMode = from.timelineMode;\n                let timelineHoldMix = from.timelineHoldMix;\n\n                let firstFrame = from.timelinesRotation.length == 0;\n                if (firstFrame) Utils.setArraySize(from.timelinesRotation, timelineCount << 1, null);\n                let timelinesRotation = from.timelinesRotation;\n\n                from.totalAlpha = 0;\n                for (let i = 0; i < timelineCount; i++) {\n                    let timeline = timelines[i];\n                    let direction = MixDirection.mixOut;\n                    let timelineBlend: MixBlend;\n                    let alpha = 0;\n                    switch (timelineMode[i] & (AnimationState.NOT_LAST - 1)) {\n                        case AnimationState.SUBSEQUENT:\n                            timelineBlend = blend;\n                            if (!attachments && timeline instanceof AttachmentTimeline) {\n                                if ((timelineMode[i] & AnimationState.NOT_LAST) == AnimationState.NOT_LAST) continue;\n                                timelineBlend = MixBlend.setup;\n                            }\n                            if (!drawOrder && timeline instanceof DrawOrderTimeline) continue;\n                            alpha = alphaMix;\n                            break;\n                        case AnimationState.FIRST:\n                            timelineBlend = MixBlend.setup;\n                            alpha = alphaMix;\n                            break;\n                        case AnimationState.HOLD:\n                            timelineBlend = MixBlend.setup;\n                            alpha = alphaHold;\n                            break;\n                        default:\n                            timelineBlend = MixBlend.setup;\n                            let holdMix = timelineHoldMix[i];\n                            alpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);\n                            break;\n                    }\n                    from.totalAlpha += alpha;\n                    if (timeline instanceof RotateTimeline)\n                        this.applyRotateTimeline(timeline, skeleton, animationTime, alpha, timelineBlend, timelinesRotation, i << 1, firstFrame);\n                    else {\n                        // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n                        Utils.webkit602BugfixHelper(alpha, blend);\n                        if (timelineBlend == MixBlend.setup) {\n                            if (timeline instanceof AttachmentTimeline) {\n                                if (attachments || (timelineMode[i] & AnimationState.NOT_LAST) == AnimationState.NOT_LAST) direction = MixDirection.mixIn;\n                            } else if (timeline instanceof DrawOrderTimeline) {\n                                if (drawOrder) direction = MixDirection.mixIn;\n                            }\n                        }\n                        timeline.apply(skeleton, animationLast, animationTime, events, alpha, timelineBlend, direction);\n                    }\n                }\n            }\n\n            if (to.mixDuration > 0) this.queueEvents(from, animationTime);\n            this.events.length = 0;\n            from.nextAnimationLast = animationTime;\n            from.nextTrackLast = from.trackTime;\n\n            return mix;\n        }\n\n        applyRotateTimeline (timeline: Timeline, skeleton: Skeleton, time: number, alpha: number, blend: MixBlend,\n                             timelinesRotation: Array<number>, i: number, firstFrame: boolean) {\n\n            if (firstFrame) timelinesRotation[i] = 0;\n\n            if (alpha == 1) {\n                timeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);\n                return;\n            }\n\n            let rotateTimeline = timeline as RotateTimeline;\n            let frames = rotateTimeline.frames;\n            let bone = skeleton.bones[rotateTimeline.boneIndex];\n            if (!bone.active) return;\n            let r1 = 0, r2 = 0;\n            if (time < frames[0]) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bone.rotation = bone.data.rotation;\n                    default:\n                        return;\n                    case MixBlend.first:\n                        r1 = bone.rotation;\n                        r2 = bone.data.rotation;\n                }\n            } else {\n                r1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;\n                if (time >= frames[frames.length - RotateTimeline.ENTRIES]) // Time is after last frame.\n                    r2 = bone.data.rotation + frames[frames.length + RotateTimeline.PREV_ROTATION];\n                else {\n                    // Interpolate between the previous frame and the current frame.\n                    let frame = Animation.binarySearch(frames, time, RotateTimeline.ENTRIES);\n                    let prevRotation = frames[frame + RotateTimeline.PREV_ROTATION];\n                    let frameTime = frames[frame];\n                    let percent = rotateTimeline.getCurvePercent((frame >> 1) - 1,\n                        1 - (time - frameTime) / (frames[frame + RotateTimeline.PREV_TIME] - frameTime));\n\n                    r2 = frames[frame + RotateTimeline.ROTATION] - prevRotation;\n                    r2 -= (16384 - ((16384.499999999996 - r2 / 360) | 0)) * 360;\n                    r2 = prevRotation + r2 * percent + bone.data.rotation;\n                    r2 -= (16384 - ((16384.499999999996 - r2 / 360) | 0)) * 360;\n                }\n            }\n\n            // Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.\n            let total = 0, diff = r2 - r1;\n            diff -= (16384 - ((16384.499999999996 - diff / 360) | 0)) * 360;\n            if (diff == 0) {\n                total = timelinesRotation[i];\n            } else {\n                let lastTotal = 0, lastDiff = 0;\n                if (firstFrame) {\n                    lastTotal = 0;\n                    lastDiff = diff;\n                } else {\n                    lastTotal = timelinesRotation[i]; // Angle and direction of mix, including loops.\n                    lastDiff = timelinesRotation[i + 1]; // Difference between bones.\n                }\n                let current = diff > 0, dir = lastTotal >= 0;\n                // Detect cross at 0 (not 180).\n                if (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {\n                    // A cross after a 360 rotation is a loop.\n                    if (Math.abs(lastTotal) > 180) lastTotal += 360 * MathUtils.signum(lastTotal);\n                    dir = current;\n                }\n                total = diff + lastTotal - lastTotal % 360; // Store loops as part of lastTotal.\n                if (dir != current) total += 360 * MathUtils.signum(lastTotal);\n                timelinesRotation[i] = total;\n            }\n            timelinesRotation[i + 1] = diff;\n            r1 += total * alpha;\n            bone.rotation = r1 - (16384 - ((16384.499999999996 - r1 / 360) | 0)) * 360;\n        }\n\n        queueEvents (entry: TrackEntry, animationTime: number) {\n            let animationStart = entry.animationStart, animationEnd = entry.animationEnd;\n            let duration = animationEnd - animationStart;\n            let trackLastWrapped = entry.trackLast % duration;\n\n            // Queue events before complete.\n            let events = this.events;\n            let i = 0, n = events.length;\n            for (; i < n; i++) {\n                let event = events[i];\n                if (event.time < trackLastWrapped) break;\n                if (event.time > animationEnd) continue; // Discard events outside animation start/end.\n                this.queue.event(entry, event);\n            }\n\n            // Queue complete if completed a loop iteration or the animation.\n            let complete = false;\n            if (entry.loop)\n                complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;\n            else\n                complete = animationTime >= animationEnd && entry.animationLast < animationEnd;\n            if (complete) this.queue.complete(entry);\n\n            // Queue events after complete.\n            for (; i < n; i++) {\n                let event = events[i];\n                if (event.time < animationStart) continue; // Discard events outside animation start/end.\n                this.queue.event(entry, events[i]);\n            }\n        }\n\n        /** Removes all animations from all tracks, leaving skeletons in their current pose.\n         *\n         * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n         * rather than leaving them in their current pose. */\n        clearTracks () {\n            let oldDrainDisabled = this.queue.drainDisabled;\n            this.queue.drainDisabled = true;\n            for (let i = 0, n = this.tracks.length; i < n; i++)\n                this.clearTrack(i);\n            this.tracks.length = 0;\n            this.queue.drainDisabled = oldDrainDisabled;\n            this.queue.drain();\n        }\n\n        /** Removes all animations from the track, leaving skeletons in their current pose.\n         *\n         * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n         * rather than leaving them in their current pose. */\n        clearTrack (trackIndex: number) {\n            if (trackIndex >= this.tracks.length) return;\n            let current = this.tracks[trackIndex];\n            if (current == null) return;\n\n            this.queue.end(current);\n\n            this.disposeNext(current);\n\n            let entry = current;\n            while (true) {\n                let from = entry.mixingFrom;\n                if (from == null) break;\n                this.queue.end(from);\n                entry.mixingFrom = null;\n                entry.mixingTo = null;\n                entry = from;\n            }\n\n            this.tracks[current.trackIndex] = null;\n\n            this.queue.drain();\n        }\n\n        setCurrent (index: number, current: TrackEntry, interrupt: boolean) {\n            let from = this.expandToIndex(index);\n            this.tracks[index] = current;\n\n            if (from != null) {\n                if (interrupt) this.queue.interrupt(from);\n                current.mixingFrom = from;\n                from.mixingTo = current;\n                current.mixTime = 0;\n\n                // Store the interrupted mix percentage.\n                if (from.mixingFrom != null && from.mixDuration > 0)\n                    current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);\n\n                from.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.\n            }\n\n            this.queue.start(current);\n        }\n\n        /** Sets an animation by name.\n         *\n         * {@link #setAnimationWith(}. */\n        setAnimation (trackIndex: number, animationName: string, loop: boolean) {\n            let animation = this.data.skeletonData.findAnimation(animationName);\n            if (animation == null) throw new Error(\"Animation not found: \" + animationName);\n            return this.setAnimationWith(trackIndex, animation, loop);\n        }\n\n        /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\n         * applied to a skeleton, it is replaced (not mixed from).\n         * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n         *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\n         * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n         *         after the {@link AnimationStateListener#dispose()} event occurs. */\n        setAnimationWith (trackIndex: number, animation: Animation, loop: boolean) {\n            if (animation == null) throw new Error(\"animation cannot be null.\");\n            let interrupt = true;\n            let current = this.expandToIndex(trackIndex);\n            if (current != null) {\n                if (current.nextTrackLast == -1) {\n                    // Don't mix from an entry that was never applied.\n                    this.tracks[trackIndex] = current.mixingFrom;\n                    this.queue.interrupt(current);\n                    this.queue.end(current);\n                    this.disposeNext(current);\n                    current = current.mixingFrom;\n                    interrupt = false;\n                } else\n                    this.disposeNext(current);\n            }\n            let entry = this.trackEntry(trackIndex, animation, loop, current);\n            this.setCurrent(trackIndex, entry, interrupt);\n            this.queue.drain();\n            return entry;\n        }\n\n        /** Queues an animation by name.\n         *\n         * See {@link #addAnimationWith()}. */\n        addAnimation (trackIndex: number, animationName: string, loop: boolean, delay: number) {\n            let animation = this.data.skeletonData.findAnimation(animationName);\n            if (animation == null) throw new Error(\"Animation not found: \" + animationName);\n            return this.addAnimationWith(trackIndex, animation, loop, delay);\n        }\n\n        /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\n         * equivalent to calling {@link #setAnimationWith()}.\n         * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n         *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\n         *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\n         *           previous entry is looping, its next loop completion is used instead of its duration.\n         * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n         *         after the {@link AnimationStateListener#dispose()} event occurs. */\n        addAnimationWith (trackIndex: number, animation: Animation, loop: boolean, delay: number) {\n            if (animation == null) throw new Error(\"animation cannot be null.\");\n\n            let last = this.expandToIndex(trackIndex);\n            if (last != null) {\n                while (last.next != null)\n                    last = last.next;\n            }\n\n            let entry = this.trackEntry(trackIndex, animation, loop, last);\n\n            if (last == null) {\n                this.setCurrent(trackIndex, entry, true);\n                this.queue.drain();\n            } else {\n                last.next = entry;\n                if (delay <= 0) {\n                    let duration = last.animationEnd - last.animationStart;\n                    if (duration != 0) {\n                        if (last.loop)\n                            delay += duration * (1 + ((last.trackTime / duration) | 0));\n                        else\n                            delay += Math.max(duration, last.trackTime);\n                        delay -= this.data.getMix(last.animation, animation);\n                    } else\n                        delay = last.trackTime;\n                }\n            }\n\n            entry.delay = delay;\n            return entry;\n        }\n\n        /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n         * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\n         *\n         * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\n         * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\n         * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\n         * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n         * 0 still mixes out over one frame.\n         *\n         * Mixing in is done by first setting an empty animation, then adding an animation using\n         * {@link #addAnimation()} and on the returned track entry, set the\n         * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\n         * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\n         * setup pose value if no lower tracks key the property to the value keyed in the new animation. */\n        setEmptyAnimation (trackIndex: number, mixDuration: number) {\n            let entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation, false);\n            entry.mixDuration = mixDuration;\n            entry.trackEnd = mixDuration;\n            return entry;\n        }\n\n        /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n         * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\n         * {@link #setEmptyAnimation()}.\n         *\n         * See {@link #setEmptyAnimation()}.\n         * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n         *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\n         *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\n         *           loop completion is used instead of its duration.\n         * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n         *         after the {@link AnimationStateListener#dispose()} event occurs. */\n        addEmptyAnimation (trackIndex: number, mixDuration: number, delay: number) {\n            if (delay <= 0) delay -= mixDuration;\n            let entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation, false, delay);\n            entry.mixDuration = mixDuration;\n            entry.trackEnd = mixDuration;\n            return entry;\n        }\n\n        /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\n         * duration. */\n        setEmptyAnimations (mixDuration: number) {\n            let oldDrainDisabled = this.queue.drainDisabled;\n            this.queue.drainDisabled = true;\n            for (let i = 0, n = this.tracks.length; i < n; i++) {\n                let current = this.tracks[i];\n                if (current != null) this.setEmptyAnimation(current.trackIndex, mixDuration);\n            }\n            this.queue.drainDisabled = oldDrainDisabled;\n            this.queue.drain();\n        }\n\n        expandToIndex (index: number) {\n            if (index < this.tracks.length) return this.tracks[index];\n            Utils.ensureArrayCapacity(this.tracks, index + 1, null);\n            this.tracks.length = index + 1;\n            return null;\n        }\n\n        /** @param last May be null. */\n        trackEntry (trackIndex: number, animation: Animation, loop: boolean, last: TrackEntry) {\n            let entry = this.trackEntryPool.obtain();\n            entry.trackIndex = trackIndex;\n            entry.animation = animation;\n            entry.loop = loop;\n            entry.holdPrevious = false;\n\n            entry.eventThreshold = 0;\n            entry.attachmentThreshold = 0;\n            entry.drawOrderThreshold = 0;\n\n            entry.animationStart = 0;\n            entry.animationEnd = animation.duration;\n            entry.animationLast = -1;\n            entry.nextAnimationLast = -1;\n\n            entry.delay = 0;\n            entry.trackTime = 0;\n            entry.trackLast = -1;\n            entry.nextTrackLast = -1;\n            entry.trackEnd = Number.MAX_VALUE;\n            entry.timeScale = 1;\n\n            entry.alpha = 1;\n            entry.interruptAlpha = 1;\n            entry.mixTime = 0;\n            entry.mixDuration = last == null ? 0 : this.data.getMix(last.animation, animation);\n            entry.mixBlend = MixBlend.replace;\n            return entry;\n        }\n\n        disposeNext (entry: TrackEntry) {\n            let next = entry.next;\n            while (next != null) {\n                this.queue.dispose(next);\n                next = next.next;\n            }\n            entry.next = null;\n        }\n\n        _animationsChanged () {\n            this.animationsChanged = false;\n\n            this.propertyIDs.clear();\n\n            for (let i = 0, n = this.tracks.length; i < n; i++) {\n                let entry = this.tracks[i];\n                if (entry == null) continue;\n                while (entry.mixingFrom != null)\n                    entry = entry.mixingFrom;\n\n                do {\n                    if (entry.mixingFrom == null || entry.mixBlend != MixBlend.add) this.computeHold(entry);\n                    entry = entry.mixingTo;\n                } while (entry != null)\n            }\n\n            this.propertyIDs.clear();\n            for (let i = this.tracks.length - 1; i >= 0; i--) {\n                let entry = this.tracks[i];\n                while (entry != null) {\n                    this.computeNotLast(entry);\n                    entry = entry.mixingFrom;\n                }\n            }\n        }\n\n        computeHold (entry: TrackEntry) {\n            let to = entry.mixingTo;\n            let timelines = entry.animation.timelines;\n            let timelinesCount = entry.animation.timelines.length;\n            let timelineMode = Utils.setArraySize(entry.timelineMode, timelinesCount);\n            entry.timelineHoldMix.length = 0;\n            let timelineDipMix = Utils.setArraySize(entry.timelineHoldMix, timelinesCount);\n            let propertyIDs = this.propertyIDs;\n\n            if (to != null && to.holdPrevious) {\n                for (let i = 0; i < timelinesCount; i++) {\n                    propertyIDs.add(timelines[i].getPropertyId());\n                    timelineMode[i] = AnimationState.HOLD;\n                }\n                return;\n            }\n\n            outer:\n                for (let i = 0; i < timelinesCount; i++) {\n                    let timeline = timelines[i];\n                    let id = timeline.getPropertyId();\n                    if (!propertyIDs.add(id))\n                        timelineMode[i] = AnimationState.SUBSEQUENT;\n                    else if (to == null || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline\n                        || timeline instanceof EventTimeline || !to.animation.hasTimeline(id)) {\n                        timelineMode[i] = AnimationState.FIRST;\n                    } else {\n                        for (let next = to.mixingTo; next != null; next = next.mixingTo) {\n                            if (next.animation.hasTimeline(id)) continue;\n                            if (entry.mixDuration > 0) {\n                                timelineMode[i] = AnimationState.HOLD_MIX;\n                                timelineDipMix[i] = next;\n                                continue outer;\n                            }\n                            break;\n                        }\n                        timelineMode[i] = AnimationState.HOLD;\n                    }\n                }\n        }\n\n        computeNotLast (entry: TrackEntry) {\n            let timelines = entry.animation.timelines;\n            let timelinesCount = entry.animation.timelines.length;\n            let timelineMode = entry.timelineMode;\n            let propertyIDs = this.propertyIDs;\n\n            for (let i = 0; i < timelinesCount; i++) {\n                if (timelines[i] instanceof AttachmentTimeline) {\n                    let timeline = timelines[i] as AttachmentTimeline;\n                    if (!propertyIDs.add(timeline.slotIndex)) timelineMode[i] |= AnimationState.NOT_LAST;\n                }\n            }\n        }\n\n        /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */\n        getCurrent (trackIndex: number) {\n            if (trackIndex >= this.tracks.length) return null;\n            return this.tracks[trackIndex];\n        }\n\n        /** Adds a listener to receive events for all track entries. */\n        addListener (listener: AnimationStateListener) {\n            if (listener == null) throw new Error(\"listener cannot be null.\");\n            this.listeners.push(listener);\n        }\n\n        /** Removes the listener added with {@link #addListener()}. */\n        removeListener (listener: AnimationStateListener) {\n            let index = this.listeners.indexOf(listener);\n            if (index >= 0) this.listeners.splice(index, 1);\n        }\n\n        /** Removes all listeners added with {@link #addListener()}. */\n        clearListeners () {\n            this.listeners.length = 0;\n        }\n\n        /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n         * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\n         * are not wanted because new animations are being set. */\n        clearListenerNotifications () {\n            this.queue.clear();\n        }\n\n        //deprecated stuff\n        onComplete: (trackIndex: number, loopCount: number) => any;\n        onEvent: (trackIndex: number, event: Event) => any;\n        onStart: (trackIndex: number) => any;\n        onEnd: (trackIndex: number) => any;\n\n        private static deprecatedWarning1: boolean = false;\n\n        setAnimationByName(trackIndex: number, animationName: string, loop: boolean) {\n            if (!AnimationState.deprecatedWarning1) {\n                AnimationState.deprecatedWarning1 = true;\n                console.warn(\"Spine Deprecation Warning: AnimationState.setAnimationByName is deprecated, please use setAnimation from now on.\");\n            }\n            this.setAnimation(trackIndex, animationName, loop);\n        }\n\n        private static deprecatedWarning2: boolean = false;\n\n        addAnimationByName(trackIndex: number, animationName: string, loop: boolean, delay: number) {\n            if (!AnimationState.deprecatedWarning2) {\n                AnimationState.deprecatedWarning2 = true;\n                console.warn(\"Spine Deprecation Warning: AnimationState.addAnimationByName is deprecated, please use addAnimation from now on.\");\n            }\n            this.addAnimation(trackIndex, animationName, loop, delay);\n        }\n\n        private static deprecatedWarning3: boolean = false;\n\n        hasAnimation(animationName: string): boolean {\n            let animation = this.data.skeletonData.findAnimation(animationName);\n            return animation !== null;\n        }\n\n        hasAnimationByName(animationName: string): boolean {\n            if (!AnimationState.deprecatedWarning3) {\n                AnimationState.deprecatedWarning3 = true;\n                console.warn(\"Spine Deprecation Warning: AnimationState.hasAnimationByName is deprecated, please use hasAnimation from now on.\");\n            }\n            return this.hasAnimation(animationName);\n        }\n    }\n\n    /** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\n     *\n     * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs. */\n    export class TrackEntry {\n        /** The animation to apply for this track entry. */\n        animation: Animation;\n\n        /** The animation queued to start after this animation, or null. `next` makes up a linked list. */\n        next: TrackEntry;\n\n        /** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\n         * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list. */\n        mixingFrom: TrackEntry;\n\n        /** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\n         * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list. */\n        mixingTo: TrackEntry;\n\n        /** The listener for events generated by this track entry, or null.\n         *\n         * A track entry returned from {@link AnimationState#setAnimation()} is already the current animation\n         * for the track, so the track entry listener {@link AnimationStateListener#start()} will not be called. */\n        listener: AnimationStateListener;\n\n        /** The index of the track where this track entry is either current or queued.\n         *\n         * See {@link AnimationState#getCurrent()}. */\n        trackIndex: number;\n\n        /** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n         * duration. */\n        loop: boolean;\n\n        /** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\n         * of being mixed out.\n         *\n         * When mixing between animations that key the same property, if a lower track also keys that property then the value will\n         * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\n         * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation\n         * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\n         * keys the property, only when a higher track also keys the property.\n         *\n         * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the\n         * previous animation. */\n        holdPrevious: boolean;\n\n        /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n         * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\n         * timelines are not applied while this animation is being mixed out. */\n        eventThreshold: number;\n\n        /** When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the\n         * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to\n         * 0, so attachment timelines are not applied while this animation is being mixed out. */\n        attachmentThreshold: number;\n\n        /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n         * `drawOrderThreshold`, draw order timelines are applied while this animation is being mixed out. Defaults to 0,\n         * so draw order timelines are not applied while this animation is being mixed out. */\n        drawOrderThreshold: number;\n\n        /** Seconds when this animation starts, both initially and after looping. Defaults to 0.\n         *\n         * When changing the `animationStart` time, it often makes sense to set {@link #animationLast} to the same\n         * value to prevent timeline keys before the start time from triggering. */\n        animationStart: number;\n\n        /** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\n         * loop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}. */\n        animationEnd: number;\n\n\n        /** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\n         * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and\n         * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\n         * is applied. */\n        animationLast: number;\n\n        nextAnimationLast: number;\n\n        /** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`\n         * postpones incrementing the {@link #trackTime}. When this track entry is queued, `delay` is the time from\n         * the start of the previous animation to when this track entry will become the current track entry (ie when the previous\n         * track entry {@link TrackEntry#trackTime} >= this track entry's `delay`).\n         *\n         * {@link #timeScale} affects the delay. */\n        delay: number;\n\n        /** Current time in seconds this track entry has been the current track entry. The track time determines\n         * {@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting\n         * looping. */\n        trackTime: number;\n\n        trackLast: number; nextTrackLast: number;\n\n        /** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\n         * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\n         * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\n         * properties keyed by the animation are set to the setup pose and the track is cleared.\n         *\n         * It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation\n         * abruptly cease being applied. */\n        trackEnd: number;\n\n        /** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\n         * faster. Defaults to 1.\n         *\n         * {@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to\n         * match the animation speed.\n         *\n         * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n         * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\n         * the time scale is not 1, the delay may need to be adjusted.\n         *\n         * See AnimationState {@link AnimationState#timeScale} for affecting all animations. */\n        timeScale: number;\n\n        /** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\n         * to 1, which overwrites the skeleton's current pose with this animation.\n         *\n         * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\n         * use alpha on track 0 if the skeleton pose is from the last frame render. */\n        alpha: number;\n\n        /** Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\n         * slightly more than `mixDuration` when the mix is complete. */\n        mixTime: number;\n\n        /** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\n         * {@link AnimationStateData#getMix()} based on the animation before this animation (if any).\n         *\n         * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\n         * properties it was animating.\n         *\n         * The `mixDuration` can be set manually rather than use the value from\n         * {@link AnimationStateData#getMix()}. In that case, the `mixDuration` can be set for a new\n         * track entry only before {@link AnimationState#update(float)} is first called.\n         *\n         * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n         * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set\n         * afterward. */\n        mixDuration: number; interruptAlpha: number; totalAlpha: number;\n\n        /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\n         * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\n         * the values from the lower tracks.\n         *\n         * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\n         * called. */\n        mixBlend = MixBlend.replace;\n        timelineMode = new Array<number>();\n        timelineHoldMix = new Array<TrackEntry>();\n        timelinesRotation = new Array<number>();\n\n        reset () {\n            this.next = null;\n            this.mixingFrom = null;\n            this.mixingTo = null;\n            this.animation = null;\n            this.listener = null;\n            this.timelineMode.length = 0;\n            this.timelineHoldMix.length = 0;\n            this.timelinesRotation.length = 0;\n        }\n\n        /** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\n         * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\n         * `animationStart` time. */\n        getAnimationTime () {\n            if (this.loop) {\n                let duration = this.animationEnd - this.animationStart;\n                if (duration == 0) return this.animationStart;\n                return (this.trackTime % duration) + this.animationStart;\n            }\n            return Math.min(this.trackTime + this.animationStart, this.animationEnd);\n        }\n\n        setAnimationLast(animationLast: number) {\n            this.animationLast = animationLast;\n            this.nextAnimationLast = animationLast;\n        }\n\n        /** Returns true if at least one loop has been completed.\n         *\n         * See {@link AnimationStateListener#complete()}. */\n        isComplete () {\n            return this.trackTime >= this.animationEnd - this.animationStart;\n        }\n\n        /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\n         * long way around when using {@link #alpha} and starting animations on other tracks.\n         *\n         * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\n         * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\n         * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\n         * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */\n        resetRotationDirections () {\n            this.timelinesRotation.length = 0;\n        }\n\n        //deprecated stuff\n        onComplete: (trackIndex: number, loopCount: number) => any;\n        onEvent: (trackIndex: number, event: Event) => any;\n        onStart: (trackIndex: number) => any;\n        onEnd: (trackIndex: number) => any;\n\n        private static deprecatedWarning1: Boolean = false;\n        private static deprecatedWarning2: Boolean = false;\n\n        get time() {\n            if (!TrackEntry.deprecatedWarning1) {\n                TrackEntry.deprecatedWarning1 = true;\n                console.warn(\"Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.\");\n            }\n            return this.trackTime;\n        }\n\n        set time(value: number) {\n            if (!TrackEntry.deprecatedWarning1) {\n                TrackEntry.deprecatedWarning1 = true;\n                console.warn(\"Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.\");\n            }\n            this.trackTime = value;\n        }\n\n        get endTime() {\n            if (!TrackEntry.deprecatedWarning2) {\n                TrackEntry.deprecatedWarning2 = true;\n                console.warn(\"Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.\");\n            }\n            return this.trackTime;\n        }\n\n        set endTime(value: number) {\n            if (!TrackEntry.deprecatedWarning2) {\n                TrackEntry.deprecatedWarning2 = true;\n                console.warn(\"Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.\");\n            }\n            this.trackTime = value;\n        }\n\n        loopsCount() {\n            return Math.floor(this.trackTime / this.trackEnd);\n        }\n    }\n\n    export class EventQueue {\n        objects: Array<any> = [];\n        drainDisabled = false;\n        animState: AnimationState;\n\n        constructor(animState: AnimationState) {\n            this.animState = animState;\n        }\n\n        start (entry: TrackEntry) {\n            this.objects.push(EventType.start);\n            this.objects.push(entry);\n            this.animState.animationsChanged = true;\n        }\n\n        interrupt (entry: TrackEntry) {\n            this.objects.push(EventType.interrupt);\n            this.objects.push(entry);\n        }\n\n        end (entry: TrackEntry) {\n            this.objects.push(EventType.end);\n            this.objects.push(entry);\n            this.animState.animationsChanged = true;\n        }\n\n        dispose (entry: TrackEntry) {\n            this.objects.push(EventType.dispose);\n            this.objects.push(entry);\n        }\n\n        complete (entry: TrackEntry) {\n            this.objects.push(EventType.complete);\n            this.objects.push(entry);\n        }\n\n        event (entry: TrackEntry, event: Event) {\n            this.objects.push(EventType.event);\n            this.objects.push(entry);\n            this.objects.push(event);\n        }\n\n        private static deprecatedWarning1: Boolean = false;\n\n        deprecateStuff() {\n            if (!EventQueue.deprecatedWarning1) {\n                EventQueue.deprecatedWarning1 = true;\n                console.warn(\"Spine Deprecation Warning: onComplete, onStart, onEnd, onEvent art deprecated, please use listeners from now on. 'state.addListener({ complete: function(track, event) { } })'\");\n            }\n            return true;\n        }\n\n        drain () {\n            if (this.drainDisabled) return;\n            this.drainDisabled = true;\n\n            let objects = this.objects;\n            let listeners = this.animState.listeners;\n\n            for (let i = 0; i < objects.length; i += 2) {\n                let type = objects[i] as EventType;\n                let entry = objects[i + 1] as TrackEntry;\n                switch (type) {\n                    case EventType.start:\n                        if (entry.listener != null && entry.listener.start) entry.listener.start(entry);\n                        for (let ii = 0; ii < listeners.length; ii++)\n                            if (listeners[ii].start) listeners[ii].start(entry);\n                        //deprecation\n                        entry.onStart && this.deprecateStuff() && entry.onStart(entry.trackIndex);\n                        this.animState.onStart && this.deprecateStuff() && this.deprecateStuff && this.animState.onStart(entry.trackIndex);\n                        break;\n                    case EventType.interrupt:\n                        if (entry.listener != null && entry.listener.interrupt) entry.listener.interrupt(entry);\n                        for (let ii = 0; ii < listeners.length; ii++)\n                            if (listeners[ii].interrupt) listeners[ii].interrupt(entry);\n                        break;\n                    case EventType.end:\n                        if (entry.listener != null && entry.listener.end) entry.listener.end(entry);\n                        for (let ii = 0; ii < listeners.length; ii++)\n                            if (listeners[ii].end) listeners[ii].end(entry);\n                        //deprecation\n                        entry.onEnd && this.deprecateStuff() && entry.onEnd(entry.trackIndex);\n                        this.animState.onEnd && this.deprecateStuff() && this.animState.onEnd(entry.trackIndex);\n                    // Fall through.\n                    case EventType.dispose:\n                        if (entry.listener != null && entry.listener.dispose) entry.listener.dispose(entry);\n                        for (let ii = 0; ii < listeners.length; ii++)\n                            if (listeners[ii].dispose) listeners[ii].dispose(entry);\n                        this.animState.trackEntryPool.free(entry);\n                        break;\n                    case EventType.complete:\n                        if (entry.listener != null && entry.listener.complete) entry.listener.complete(entry);\n                        for (let ii = 0; ii < listeners.length; ii++)\n                            if (listeners[ii].complete) listeners[ii].complete(entry);\n                        //deprecation\n\n                        let count = MathUtils.toInt(entry.loopsCount()) ;\n                        entry.onComplete && this.deprecateStuff() && entry.onComplete(entry.trackIndex, count);\n                        this.animState.onComplete && this.deprecateStuff() && this.animState.onComplete(entry.trackIndex, count);\n                        break;\n                    case EventType.event:\n                        let event = objects[i++ + 2] as Event;\n                        if (entry.listener != null && entry.listener.event) entry.listener.event(entry, event);\n                        for (let ii = 0; ii < listeners.length; ii++)\n                            if (listeners[ii].event) listeners[ii].event(entry, event);\n                        //deprecation\n                        entry.onEvent && this.deprecateStuff() && entry.onEvent(entry.trackIndex, event);\n                        this.animState.onEvent && this.deprecateStuff() && this.animState.onEvent(entry.trackIndex, event);\n                        break;\n                }\n            }\n            this.clear();\n\n            this.drainDisabled = false;\n        }\n\n        clear () {\n            this.objects.length = 0;\n        }\n    }\n\n    export enum EventType {\n        start, interrupt, end, dispose, complete, event\n    }\n\n    export interface AnimationStateListener {\n        /** Invoked when this entry has been set as the current entry. */\n        start? (entry: TrackEntry): void;\n\n        /** Invoked when another entry has replaced this entry as the current entry. This entry may continue being applied for\n         * mixing. */\n        interrupt? (entry: TrackEntry): void;\n\n        /** Invoked when this entry is no longer the current entry and will never be applied again. */\n        end? (entry: TrackEntry): void;\n\n        /** Invoked when this entry will be disposed. This may occur without the entry ever being set as the current entry.\n         * References to the entry should not be kept after dispose is called, as it may be destroyed or reused. */\n        dispose? (entry: TrackEntry): void;\n\n        /** Invoked every time this entry's animation completes a loop. */\n        complete? (entry: TrackEntry): void;\n\n        /** Invoked when this entry's animation triggers an event. */\n        event? (entry: TrackEntry, event: Event): void;\n    }\n\n    export abstract class AnimationStateAdapter implements AnimationStateListener {\n        start (entry: TrackEntry) {\n        }\n\n        interrupt (entry: TrackEntry) {\n        }\n\n        end (entry: TrackEntry) {\n        }\n\n        dispose (entry: TrackEntry) {\n        }\n\n        complete (entry: TrackEntry) {\n        }\n\n        event (entry: TrackEntry, event: Event) {\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class AnimationStateData {\n        skeletonData: SkeletonData;\n        animationToMixTime: Map<number> = {};\n        defaultMix = 0;\n\n        constructor(skeletonData: SkeletonData) {\n            if (skeletonData == null) throw new Error(\"skeletonData cannot be null.\");\n            this.skeletonData = skeletonData;\n        }\n\n        setMix(fromName: string, toName: string, duration: number) {\n            let from = this.skeletonData.findAnimation(fromName);\n            if (from == null) throw new Error(\"Animation not found: \" + fromName);\n            let to = this.skeletonData.findAnimation(toName);\n            if (to == null) throw new Error(\"Animation not found: \" + toName);\n            this.setMixWith(from, to, duration);\n        }\n\n        private static deprecatedWarning1: boolean = false;\n\n        setMixByName(fromName: string, toName: string, duration: number) {\n            if (!AnimationStateData.deprecatedWarning1) {\n                AnimationStateData.deprecatedWarning1 = true;\n                console.warn(\"Deprecation Warning: AnimationStateData.setMixByName is deprecated, please use setMix from now on.\");\n            }\n            this.setMix(fromName, toName, duration);\n        }\n\n        setMixWith(from: Animation, to: Animation, duration: number) {\n            if (from == null) throw new Error(\"from cannot be null.\");\n            if (to == null) throw new Error(\"to cannot be null.\");\n            let key = from.name + \".\" + to.name;\n            this.animationToMixTime[key] = duration;\n        }\n\n        getMix(from: Animation, to: Animation) {\n            let key = from.name + \".\" + to.name;\n            let value = this.animationToMixTime[key];\n            return value === undefined ? this.defaultMix : value;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class AtlasAttachmentLoader implements AttachmentLoader {\n        atlas: TextureAtlas;\n\n        constructor(atlas: TextureAtlas) {\n            this.atlas = atlas;\n        }\n\n        /** @return May be null to not load an attachment. */\n        newRegionAttachment(skin: Skin, name: string, path: string): RegionAttachment {\n            let region = this.atlas.findRegion(path);\n            if (region == null) throw new Error(\"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\");\n            let attachment = new RegionAttachment(name);\n            attachment.region = region;\n            return attachment;\n        }\n\n        /** @return May be null to not load an attachment. */\n        newMeshAttachment(skin: Skin, name: string, path: string): MeshAttachment {\n            let region = this.atlas.findRegion(path);\n            if (region == null) throw new Error(\"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\");\n            let attachment = new MeshAttachment(name);\n            attachment.region = region;\n            return attachment;\n        }\n\n        /** @return May be null to not load an attachment. */\n        newBoundingBoxAttachment(skin: Skin, name: string): BoundingBoxAttachment {\n            return new BoundingBoxAttachment(name);\n        }\n\n        /** @return May be null to not load an attachment */\n        newPathAttachment(skin: Skin, name: string): PathAttachment {\n            return new PathAttachment(name);\n        }\n\n        newPointAttachment(skin: Skin, name: string): PointAttachment {\n            return new PointAttachment(name);\n        }\n\n        newClippingAttachment(skin: Skin, name: string): ClippingAttachment {\n            return new ClippingAttachment(name);\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export enum BlendMode {\n        Normal = 0,\n        Additive = 1,\n        Multiply = 2,\n        Screen = 3\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class Bone implements Updatable {\n        static yDown: boolean = false;\n        //be careful! Spine b,c is c,b in pixi matrix\n        matrix = new PIXI.Matrix();\n\n        get worldX(): number {\n            return this.matrix.tx;\n        }\n\n        get worldY(): number {\n            return this.matrix.ty;\n        }\n\n        data: BoneData;\n        skeleton: Skeleton;\n        parent: Bone;\n        children = new Array<Bone>();\n        x = 0;\n        y = 0;\n        rotation = 0;\n        scaleX = 0;\n        scaleY = 0;\n        shearX = 0;\n        shearY = 0;\n        ax = 0;\n        ay = 0;\n        arotation = 0;\n        ascaleX = 0;\n        ascaleY = 0;\n        ashearX = 0;\n        ashearY = 0;\n        appliedValid = false;\n\n        sorted = false;\n        active = false;\n\n        /** @param parent May be null. */\n        constructor(data: BoneData, skeleton: Skeleton, parent: Bone) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            this.data = data;\n            this.skeleton = skeleton;\n            this.parent = parent;\n            this.setToSetupPose();\n        }\n\n        isActive () {\n            return this.active;\n        }\n\n        /** Same as {@link #updateWorldTransform()}. This method exists for Bone to implement {@link Updatable}. */\n        update() {\n            this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\n        }\n\n        /** Computes the world transform using the parent bone and this bone's local transform. */\n        updateWorldTransform() {\n            this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\n        }\n\n        /** Computes the world transform using the parent bone and the specified local transform. */\n        updateWorldTransformWith(x: number, y: number, rotation: number, scaleX: number, scaleY: number, shearX: number, shearY: number) {\n            this.ax = x;\n            this.ay = y;\n            this.arotation = rotation;\n            this.ascaleX = scaleX;\n            this.ascaleY = scaleY;\n            this.ashearX = shearX;\n            this.ashearY = shearY;\n            this.appliedValid = true;\n\n            let parent = this.parent;\n            let m = this.matrix;\n\n            let sx = this.skeleton.scaleX;\n            let sy = Bone.yDown? -this.skeleton.scaleY : this.skeleton.scaleY;\n\n            if (parent == null) { // Root bone.\n                let skeleton = this.skeleton;\n                let rotationY = rotation + 90 + shearY;\n                m.a = MathUtils.cosDeg(rotation + shearX) * scaleX * sx;\n                m.c = MathUtils.cosDeg(rotationY) * scaleY * sx;\n                m.b = MathUtils.sinDeg(rotation + shearX) * scaleX * sy;\n                m.d = MathUtils.sinDeg(rotationY) * scaleY * sy;\n                m.tx = x * sx + skeleton.x;\n                m.ty = y * sy + skeleton.y;\n                return;\n            }\n\n            let pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;\n            m.tx = pa * x + pb * y + parent.matrix.tx;\n            m.ty = pc * x + pd * y + parent.matrix.ty;\n            switch (this.data.transformMode) {\n                case TransformMode.Normal: {\n                    let rotationY = rotation + 90 + shearY;\n                    let la = MathUtils.cosDeg(rotation + shearX) * scaleX;\n                    let lb = MathUtils.cosDeg(rotationY) * scaleY;\n                    let lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\n                    let ld = MathUtils.sinDeg(rotationY) * scaleY;\n                    m.a = pa * la + pb * lc;\n                    m.c = pa * lb + pb * ld;\n                    m.b = pc * la + pd * lc;\n                    m.d = pc * lb + pd * ld;\n                    return;\n                }\n                case TransformMode.OnlyTranslation: {\n                    let rotationY = rotation + 90 + shearY;\n                    m.a = MathUtils.cosDeg(rotation + shearX) * scaleX;\n                    m.c = MathUtils.cosDeg(rotationY) * scaleY;\n                    m.b = MathUtils.sinDeg(rotation + shearX) * scaleX;\n                    m.d = MathUtils.sinDeg(rotationY) * scaleY;\n                    break;\n                }\n                case TransformMode.NoRotationOrReflection: {\n                    let s = pa * pa + pc * pc;\n                    let prx = 0;\n                    if (s > 0.0001) {\n                        s = Math.abs(pa * pd - pb * pc) / s;\n                        pb = pc * s;\n                        pd = pa * s;\n                        prx = Math.atan2(pc, pa) * MathUtils.radDeg;\n                    } else {\n                        pa = 0;\n                        pc = 0;\n                        prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\n                    }\n                    let rx = rotation + shearX - prx;\n                    let ry = rotation + shearY - prx + 90;\n                    let la = MathUtils.cosDeg(rx) * scaleX;\n                    let lb = MathUtils.cosDeg(ry) * scaleY;\n                    let lc = MathUtils.sinDeg(rx) * scaleX;\n                    let ld = MathUtils.sinDeg(ry) * scaleY;\n                    m.a = pa * la - pb * lc;\n                    m.c = pa * lb - pb * ld;\n                    m.b = pc * la + pd * lc;\n                    m.d = pc * lb + pd * ld;\n                    break;\n                }\n                case TransformMode.NoScale:\n                case TransformMode.NoScaleOrReflection: {\n                    let cos = MathUtils.cosDeg(rotation);\n                    let sin = MathUtils.sinDeg(rotation);\n                    let za = (pa * cos + pb * sin) / sx;\n                    let zc = (pc * cos + pd * sin) / sy;\n                    let s = Math.sqrt(za * za + zc * zc);\n                    if (s > 0.00001) s = 1 / s;\n                    za *= s;\n                    zc *= s;\n                    s = Math.sqrt(za * za + zc * zc);\n                    if (\n                        this.data.transformMode == TransformMode.NoScale\n                        && (pa * pd - pb * pc < 0) != (Bone.yDown?\n                        (this.skeleton.scaleX < 0 != this.skeleton.scaleY > 0) :\n                            (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0))\n                    ) s = -s;\n                    let r = Math.PI / 2 + Math.atan2(zc, za);\n                    let zb = Math.cos(r) * s;\n                    let zd = Math.sin(r) * s;\n                    let la = MathUtils.cosDeg(shearX) * scaleX;\n                    let lb = MathUtils.cosDeg(90 + shearY) * scaleY;\n                    let lc = MathUtils.sinDeg(shearX) * scaleX;\n                    let ld = MathUtils.sinDeg(90 + shearY) * scaleY;\n                    m.a = za * la + zb * lc;\n                    m.c = za * lb + zb * ld;\n                    m.b = zc * la + zd * lc;\n                    m.d = zc * lb + zd * ld;\n                    break;\n                }\n            }\n            m.a *= sx;\n            m.c *= sx;\n            m.b *= sy;\n            m.d *= sy;\n        }\n\n        setToSetupPose() {\n            let data = this.data;\n            this.x = data.x;\n            this.y = data.y;\n            this.rotation = data.rotation;\n            this.scaleX = data.scaleX;\n            this.scaleY = data.scaleY;\n            this.shearX = data.shearX;\n            this.shearY = data.shearY;\n        }\n\n        getWorldRotationX() {\n            return Math.atan2(this.matrix.b, this.matrix.a) * MathUtils.radDeg;\n        }\n\n        getWorldRotationY() {\n            return Math.atan2(this.matrix.d, this.matrix.c) * MathUtils.radDeg;\n        }\n\n        getWorldScaleX() {\n            let m = this.matrix;\n            return Math.sqrt(m.a * m.a + m.c * m.c);\n        }\n\n        getWorldScaleY() {\n            let m = this.matrix;\n            return Math.sqrt(m.b * m.b + m.d * m.d);\n        }\n\n        /** Computes the individual applied transform values from the world transform. This can be useful to perform processing using\n         * the applied transform after the world transform has been modified directly (eg, by a constraint).\n         * <p>\n         * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. */\n        updateAppliedTransform() {\n            this.appliedValid = true;\n            let parent = this.parent;\n            let m = this.matrix;\n            if (parent == null) {\n                this.ax = m.tx;\n                this.ay = m.ty;\n                this.arotation = Math.atan2(m.b, m.a) * MathUtils.radDeg;\n                this.ascaleX = Math.sqrt(m.a * m.a + m.b * m.b);\n                this.ascaleY = Math.sqrt(m.c * m.c + m.d * m.d);\n                this.ashearX = 0;\n                this.ashearY = Math.atan2(m.a * m.c + m.b * m.d, m.a * m.d - m.b * m.c) * MathUtils.radDeg;\n                return;\n            }\n            let pm = parent.matrix;\n            let pid = 1 / (pm.a * pm.d - pm.b * pm.c);\n            let dx = m.tx - pm.tx, dy = m.ty - pm.ty;\n            this.ax = (dx * pm.d * pid - dy * pm.c * pid);\n            this.ay = (dy * pm.a * pid - dx * pm.b * pid);\n            let ia = pid * pm.d;\n            let id = pid * pm.a;\n            let ib = pid * pm.c;\n            let ic = pid * pm.b;\n            let ra = ia * m.a - ib * m.b;\n            let rb = ia * m.c - ib * m.d;\n            let rc = id * m.b - ic * m.a;\n            let rd = id * m.d - ic * m.c;\n            this.ashearX = 0;\n            this.ascaleX = Math.sqrt(ra * ra + rc * rc);\n            if (this.ascaleX > 0.0001) {\n                let det = ra * rd - rb * rc;\n                this.ascaleY = det / this.ascaleX;\n                this.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\n                this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\n            } else {\n                this.ascaleX = 0;\n                this.ascaleY = Math.sqrt(rb * rb + rd * rd);\n                this.ashearY = 0;\n                this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\n            }\n        }\n\n        worldToLocal(world: Vector2) {\n            let m = this.matrix;\n            let a = m.a, b = m.c, c = m.b, d = m.d;\n            let invDet = 1 / (a * d - b * c);\n            let x = world.x - m.tx, y = world.y - m.ty;\n            world.x = (x * d * invDet - y * b * invDet);\n            world.y = (y * a * invDet - x * c * invDet);\n            return world;\n        }\n\n        localToWorld(local: Vector2) {\n            let m = this.matrix;\n            let x = local.x, y = local.y;\n            local.x = x * m.a + y * m.c + m.tx;\n            local.y = x * m.b + y * m.d + m.ty;\n            return local;\n        }\n\n        worldToLocalRotation (worldRotation: number) {\n            let sin = MathUtils.sinDeg(worldRotation), cos = MathUtils.cosDeg(worldRotation);\n            let mat = this.matrix;\n            return Math.atan2(mat.a * sin - mat.b * cos, mat.d * cos - mat.c * sin) * MathUtils.radDeg;\n        }\n\n        localToWorldRotation (localRotation: number) {\n            let sin = MathUtils.sinDeg(localRotation), cos = MathUtils.cosDeg(localRotation);\n            let mat = this.matrix;\n            return Math.atan2(cos * mat.b + sin * mat.d, cos * mat.a + sin * mat.c) * MathUtils.radDeg;\n        }\n\n        rotateWorld (degrees: number) {\n            let mat = this.matrix;\n            let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\n            let cos = MathUtils.cosDeg(degrees), sin = MathUtils.sinDeg(degrees);\n            mat.a = cos * a - sin * c;\n            mat.c = cos * b - sin * d;\n            mat.b = sin * a + cos * c;\n            mat.d = sin * b + cos * d;\n            this.appliedValid = false;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class BoneData {\n        index: number;\n        name: string;\n        parent: BoneData;\n        length: number;\n        x = 0;\n        y = 0;\n        rotation = 0;\n        scaleX = 1;\n        scaleY = 1;\n        shearX = 0;\n        shearY = 0;\n        transformMode = TransformMode.Normal;\n        skinRequired = false;\n\n        color = new Color();\n\n        constructor(index: number, name: string, parent: BoneData) {\n            if (index < 0) throw new Error(\"index must be >= 0.\");\n            if (name == null) throw new Error(\"name cannot be null.\");\n            this.index = index;\n            this.name = name;\n            this.parent = parent;\n        }\n    }\n\n    export enum TransformMode {\n        Normal, OnlyTranslation, NoRotationOrReflection, NoScale, NoScaleOrReflection\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export abstract class ConstraintData {\n        constructor(public name: string, public order: number, public skinRequired: boolean) { }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class Event {\n        data: EventData;\n        intValue: number;\n        floatValue: number;\n        stringValue: string;\n        time: number;\n        volume: number;\n        balance: number;\n\n\n        constructor(time: number, data: EventData) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            this.time = time;\n            this.data = data;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class EventData {\n        name: string;\n        intValue: number;\n        floatValue: number;\n        stringValue: string;\n        audioPath: string;\n        volume: number;\n        balance: number;\n\n        constructor (name: string) {\n            this.name = name;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class IkConstraint implements Updatable {\n        data: IkConstraintData;\n        bones: Array<Bone>;\n        target: Bone;\n        bendDirection = 0;\n        compress = false;\n        stretch = false;\n        mix = 1;\n        softness = 0;\n        active = false;\n\n        constructor (data: IkConstraintData, skeleton: Skeleton) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            this.data = data;\n            this.mix = data.mix;\n            this.softness = data.softness;\n            this.bendDirection = data.bendDirection;\n            this.compress = data.compress;\n            this.stretch = data.stretch;\n\n            this.bones = new Array<Bone>();\n            for (let i = 0; i < data.bones.length; i++)\n                this.bones.push(skeleton.findBone(data.bones[i].name));\n            this.target = skeleton.findBone(data.target.name);\n        }\n\n        isActive () {\n            return this.active;\n        }\n\n        apply () {\n            this.update();\n        }\n\n        update () {\n            let target = this.target;\n            let bones = this.bones;\n            switch (bones.length) {\n                case 1:\n                    this.apply1(bones[0], target.worldX, target.worldY, this.compress, this.stretch, this.data.uniform, this.mix);\n                    break;\n                case 2:\n                    this.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.stretch, this.softness, this.mix);\n                    break;\n            }\n        }\n\n        /** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n         * coordinate system. */\n        apply1 (bone: Bone, targetX: number, targetY: number, compress: boolean, stretch: boolean, uniform: boolean, alpha: number) {\n            if (!bone.appliedValid) bone.updateAppliedTransform();\n            let p = bone.parent.matrix;\n\n\n            let pa = p.a, pb = p.c, pc = p.b, pd = p.d;\n            let rotationIK = -bone.ashearX - bone.arotation, tx = 0, ty = 0;\n\n            switch(bone.data.transformMode) {\n                case TransformMode.OnlyTranslation:\n                    tx = targetX - bone.worldX;\n                    ty = targetY - bone.worldY;\n                    break;\n                case TransformMode.NoRotationOrReflection:\n                    rotationIK += Math.atan2(pc, pa) * MathUtils.radDeg;\n                    let ps = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);\n                    pb = -pc * ps;\n                    pd = pa * ps;\n                // Fall through\n                default:\n                    let x = targetX - p.tx, y = targetY - p.ty;\n                    let d = pa * pd - pb * pc;\n                    tx = (x * pd - y * pb) / d - bone.ax;\n                    ty = (y * pa - x * pc) / d - bone.ay;\n            }\n            rotationIK += Math.atan2(ty, tx) * MathUtils.radDeg;\n\n            if (bone.ascaleX < 0) rotationIK += 180;\n            if (rotationIK > 180)\n                rotationIK -= 360;\n            else if (rotationIK < -180) rotationIK += 360;\n            let sx = bone.ascaleX, sy = bone.ascaleY;\n            if (compress || stretch) {\n                switch (bone.data.transformMode) {\n                    case TransformMode.NoScale:\n                    case TransformMode.NoScaleOrReflection:\n                        tx = targetX - bone.worldX;\n                        ty = targetY - bone.worldY;\n                }\n                let b = bone.data.length * sx, dd = Math.sqrt(tx * tx + ty * ty);\n                if ((compress && dd < b) || (stretch && dd > b) && b > 0.0001) {\n                    let s = (dd / b - 1) * alpha + 1;\n                    sx *= s;\n                    if (uniform) sy *= s;\n                }\n            }\n            bone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX,\n                bone.ashearY);\n        }\n\n        /** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n         * target is specified in the world coordinate system.\n         * @param child A direct descendant of the parent bone. */\n        apply2 (parent: Bone, child: Bone, targetX: number, targetY: number, bendDir: number, stretch: boolean, softness: number, alpha: number) {\n            if (alpha == 0) {\n                child.updateWorldTransform();\n                return;\n            }\n            if (!parent.appliedValid) parent.updateAppliedTransform();\n            if (!child.appliedValid) child.updateAppliedTransform();\n            let px = parent.ax, py = parent.ay, psx = parent.ascaleX, sx = psx, psy = parent.ascaleY, csx = child.ascaleX;\n            let pmat = parent.matrix;\n            let os1 = 0, os2 = 0, s2 = 0;\n            if (psx < 0) {\n                psx = -psx;\n                os1 = 180;\n                s2 = -1;\n            } else {\n                os1 = 0;\n                s2 = 1;\n            }\n            if (psy < 0) {\n                psy = -psy;\n                s2 = -s2;\n            }\n            if (csx < 0) {\n                csx = -csx;\n                os2 = 180;\n            } else\n                os2 = 0;\n            let cx = child.ax, cy = 0, cwx = 0, cwy = 0, a = pmat.a, b = pmat.c, c = pmat.b, d = pmat.d;\n            let u = Math.abs(psx - psy) <= 0.0001;\n            if (!u) {\n                cy = 0;\n                cwx = a * cx + pmat.tx;\n                cwy = c * cx + pmat.ty;\n            } else {\n                cy = child.ay;\n                cwx = a * cx + b * cy + pmat.tx;\n                cwy = c * cx + d * cy + pmat.ty;\n            }\n            let pp = parent.parent.matrix;\n            a = pp.a;\n            b = pp.c;\n            c = pp.b;\n            d = pp.d;\n            let id = 1 / (a * d - b * c), x = cwx - pp.tx, y = cwy - pp.ty;\n            let dx = (x * d - y * b) * id - px, dy = (y * a - x * c) * id - py;\n            let l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\n            if (l1 < 0.0001) {\n                this.apply1(parent, targetX, targetY, false, stretch, false, alpha);\n                child.updateWorldTransformWith(cx, cy, 0, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n                return;\n            }\n            x = targetX - pp.tx;\n            y = targetY - pp.ty;\n            let tx = (x * d - y * b) * id - px, ty = (y * a - x * c) * id - py;\n            let dd = tx * tx + ty * ty;\n            if (softness != 0) {\n                softness *= psx * (csx + 1) / 2;\n                let td = Math.sqrt(dd), sd = td - l1 - l2 * psx + softness;\n                if (sd > 0) {\n                    let p = Math.min(1, sd / (softness * 2)) - 1;\n                    p = (sd - softness * (1 - p * p)) / td;\n                    tx -= p * tx;\n                    ty -= p * ty;\n                    dd = tx * tx + ty * ty;\n                }\n            }\n            outer:\n                if (u) {\n                    l2 *= psx;\n                    let cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n                    if (cos < -1)\n                        cos = -1;\n                    else if (cos > 1) {\n                        cos = 1;\n                        if (stretch) sx *= (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;\n                    }\n                    a2 = Math.acos(cos) * bendDir;\n                    a = l1 + l2 * cos;\n                    b = l2 * Math.sin(a2);\n                    a1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);\n                } else {\n                    a = psx * l2;\n                    b = psy * l2;\n                    let aa = a * a, bb = b * b, ta = Math.atan2(ty, tx);\n                    c = bb * l1 * l1 + aa * dd - aa * bb;\n                    let c1 = -2 * bb * l1, c2 = bb - aa;\n                    d = c1 * c1 - 4 * c2 * c;\n                    if (d >= 0) {\n                        let q = Math.sqrt(d);\n                        if (c1 < 0) q = -q;\n                        q = -(c1 + q) / 2;\n                        let r0 = q / c2, r1 = c / q;\n                        let r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\n                        if (r * r <= dd) {\n                            y = Math.sqrt(dd - r * r) * bendDir;\n                            a1 = ta - Math.atan2(y, r);\n                            a2 = Math.atan2(y / psy, (r - l1) / psx);\n                            break outer;\n                        }\n                    }\n                    let minAngle = MathUtils.PI, minX = l1 - a, minDist = minX * minX, minY = 0;\n                    let maxAngle = 0, maxX = l1 + a, maxDist = maxX * maxX, maxY = 0;\n                    c = -a * l1 / (aa - bb);\n                    if (c >= -1 && c <= 1) {\n                        c = Math.acos(c);\n                        x = a * Math.cos(c) + l1;\n                        y = b * Math.sin(c);\n                        d = x * x + y * y;\n                        if (d < minDist) {\n                            minAngle = c;\n                            minDist = d;\n                            minX = x;\n                            minY = y;\n                        }\n                        if (d > maxDist) {\n                            maxAngle = c;\n                            maxDist = d;\n                            maxX = x;\n                            maxY = y;\n                        }\n                    }\n                    if (dd <= (minDist + maxDist) / 2) {\n                        a1 = ta - Math.atan2(minY * bendDir, minX);\n                        a2 = minAngle * bendDir;\n                    } else {\n                        a1 = ta - Math.atan2(maxY * bendDir, maxX);\n                        a2 = maxAngle * bendDir;\n                    }\n                }\n            let os = Math.atan2(cy, cx) * s2;\n            let rotation = parent.arotation;\n            a1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;\n            if (a1 > 180)\n                a1 -= 360;\n            else if (a1 < -180) a1 += 360;\n            parent.updateWorldTransformWith(px, py, rotation + a1 * alpha, sx, parent.ascaleY, 0, 0);\n            rotation = child.arotation;\n            a2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;\n            if (a2 > 180)\n                a2 -= 360;\n            else if (a2 < -180) a2 += 360;\n            child.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class IkConstraintData extends ConstraintData {\n        bones = new Array<BoneData>();\n        target: BoneData;\n        bendDirection = 1;\n        compress = false;\n        stretch = false;\n        uniform = false;\n        mix = 1;\n        softness = 0;\n\n        constructor (name: string) {\n            super(name, 0, false);\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class PathConstraint implements Updatable {\n        static NONE = -1; static BEFORE = -2; static AFTER = -3;\n        static epsilon = 0.00001;\n\n        data: PathConstraintData;\n        bones: Array<Bone>;\n        target: Slot;\n        position = 0; spacing = 0; rotateMix = 0; translateMix = 0;\n\n        spaces = new Array<number>(); positions = new Array<number>();\n        world = new Array<number>(); curves = new Array<number>(); lengths = new Array<number>();\n        segments = new Array<number>();\n\n        active = false;\n\n        constructor (data: PathConstraintData, skeleton: Skeleton) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            this.data = data;\n            this.bones = new Array<Bone>();\n            for (let i = 0, n = data.bones.length; i < n; i++)\n                this.bones.push(skeleton.findBone(data.bones[i].name));\n            this.target = skeleton.findSlot(data.target.name);\n            this.position = data.position;\n            this.spacing = data.spacing;\n            this.rotateMix = data.rotateMix;\n            this.translateMix = data.translateMix;\n        }\n\n        isActive () {\n            return this.active;\n        }\n\n        apply () {\n            this.update();\n        }\n\n        update () {\n            let attachment = this.target.getAttachment();\n            if (!(attachment instanceof PathAttachment)) return;\n\n            let rotateMix = this.rotateMix, translateMix = this.translateMix;\n            let translate = translateMix > 0, rotate = rotateMix > 0;\n            if (!translate && !rotate) return;\n\n            let data = this.data;\n            let spacingMode = data.spacingMode;\n            let lengthSpacing = spacingMode == SpacingMode.Length;\n            let rotateMode = data.rotateMode;\n            let tangents = rotateMode == RotateMode.Tangent, scale = rotateMode == RotateMode.ChainScale;\n            let boneCount = this.bones.length, spacesCount = tangents ? boneCount : boneCount + 1;\n            let bones = this.bones;\n            let spaces = Utils.setArraySize(this.spaces, spacesCount), lengths: Array<number> = null;\n            let spacing = this.spacing;\n            if (scale || lengthSpacing) {\n                if (scale) lengths = Utils.setArraySize(this.lengths, boneCount);\n                for (let i = 0, n = spacesCount - 1; i < n;) {\n                    let bone = bones[i];\n                    let setupLength = bone.data.length;\n                    if (setupLength < PathConstraint.epsilon) {\n                        if (scale) lengths[i] = 0;\n                        spaces[++i] = 0;\n                    } else {\n                        let x = setupLength * bone.matrix.a, y = setupLength * bone.matrix.b;\n                        let length = Math.sqrt(x * x + y * y);\n                        if (scale) lengths[i] = length;\n                        spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;\n                    }\n                }\n            } else {\n                for (let i = 1; i < spacesCount; i++)\n                    spaces[i] = spacing;\n            }\n\n            let positions = this.computeWorldPositions(<PathAttachment>attachment, spacesCount, tangents,\n                data.positionMode == PositionMode.Percent, spacingMode == SpacingMode.Percent);\n            let boneX = positions[0], boneY = positions[1], offsetRotation = data.offsetRotation;\n            let tip = false;\n            if (offsetRotation == 0)\n                tip = rotateMode == RotateMode.Chain;\n            else {\n                tip = false;\n                let p = this.target.bone.matrix;\n                offsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\n            }\n            for (let i = 0, p = 3; i < boneCount; i++, p += 3) {\n                let bone = bones[i];\n                let mat = bone.matrix;\n                mat.tx += (boneX - mat.tx) * translateMix;\n                mat.ty += (boneY - mat.ty) * translateMix;\n                let x = positions[p], y = positions[p + 1], dx = x - boneX, dy = y - boneY;\n                if (scale) {\n                    let length = lengths[i];\n                    if (length != 0) {\n                        let s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * rotateMix + 1;\n                        mat.a *= s;\n                        mat.b *= s;\n                    }\n                }\n                boneX = x;\n                boneY = y;\n                if (rotate) {\n                    let a = mat.a, b = mat.c, c = mat.b, d = mat.d, r = 0, cos = 0, sin = 0;\n                    if (tangents)\n                        r = positions[p - 1];\n                    else if (spaces[i + 1] == 0)\n                        r = positions[p + 2];\n                    else\n                        r = Math.atan2(dy, dx);\n                    r -= Math.atan2(c, a);\n                    if (tip) {\n                        cos = Math.cos(r);\n                        sin = Math.sin(r);\n                        let length = bone.data.length;\n                        boneX += (length * (cos * a - sin * c) - dx) * rotateMix;\n                        boneY += (length * (sin * a + cos * c) - dy) * rotateMix;\n                    } else {\n                        r += offsetRotation;\n                    }\n                    if (r > MathUtils.PI)\n                        r -= MathUtils.PI2;\n                    else if (r < -MathUtils.PI) //\n                        r += MathUtils.PI2;\n                    r *= rotateMix;\n                    cos = Math.cos(r);\n                    sin = Math.sin(r);\n                    mat.a = cos * a - sin * c;\n                    mat.c = cos * b - sin * d;\n                    mat.b = sin * a + cos * c;\n                    mat.d = sin * b + cos * d;\n                }\n                bone.appliedValid = false;\n            }\n        }\n\n        computeWorldPositions (path: PathAttachment, spacesCount: number, tangents: boolean, percentPosition: boolean,\n                               percentSpacing: boolean) {\n            let target = this.target;\n            let position = this.position;\n            let spaces = this.spaces, out = Utils.setArraySize(this.positions, spacesCount * 3 + 2), world: Array<number> = null;\n            let closed = path.closed;\n            let verticesLength = path.worldVerticesLength, curveCount = verticesLength / 6, prevCurve = PathConstraint.NONE;\n\n            if (!path.constantSpeed) {\n                let lengths = path.lengths;\n                curveCount -= closed ? 1 : 2;\n                let pathLength = lengths[curveCount];\n                if (percentPosition) position *= pathLength;\n                if (percentSpacing) {\n                    for (let i = 0; i < spacesCount; i++)\n                        spaces[i] *= pathLength;\n                }\n                world = Utils.setArraySize(this.world, 8);\n                for (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\n                    let space = spaces[i];\n                    position += space;\n                    let p = position;\n\n                    if (closed) {\n                        p %= pathLength;\n                        if (p < 0) p += pathLength;\n                        curve = 0;\n                    } else if (p < 0) {\n                        if (prevCurve != PathConstraint.BEFORE) {\n                            prevCurve = PathConstraint.BEFORE;\n                            path.computeWorldVertices(target, 2, 4, world, 0, 2);\n                        }\n                        this.addBeforePosition(p, world, 0, out, o);\n                        continue;\n                    } else if (p > pathLength) {\n                        if (prevCurve != PathConstraint.AFTER) {\n                            prevCurve = PathConstraint.AFTER;\n                            path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);\n                        }\n                        this.addAfterPosition(p - pathLength, world, 0, out, o);\n                        continue;\n                    }\n\n                    // Determine curve containing position.\n                    for (;; curve++) {\n                        let length = lengths[curve];\n                        if (p > length) continue;\n                        if (curve == 0)\n                            p /= length;\n                        else {\n                            let prev = lengths[curve - 1];\n                            p = (p - prev) / (length - prev);\n                        }\n                        break;\n                    }\n                    if (curve != prevCurve) {\n                        prevCurve = curve;\n                        if (closed && curve == curveCount) {\n                            path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);\n                            path.computeWorldVertices(target, 0, 4, world, 4, 2);\n                        } else\n                            path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);\n                    }\n                    this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o,\n                        tangents || (i > 0 && space == 0));\n                }\n                return out;\n            }\n\n            // World vertices.\n            if (closed) {\n                verticesLength += 2;\n                world = Utils.setArraySize(this.world, verticesLength);\n                path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);\n                path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);\n                world[verticesLength - 2] = world[0];\n                world[verticesLength - 1] = world[1];\n            } else {\n                curveCount--;\n                verticesLength -= 4;\n                world = Utils.setArraySize(this.world, verticesLength);\n                path.computeWorldVertices(target, 2, verticesLength, world, 0, 2);\n            }\n\n            // Curve lengths.\n            let curves = Utils.setArraySize(this.curves, curveCount);\n            let pathLength = 0;\n            let x1 = world[0], y1 = world[1], cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, x2 = 0, y2 = 0;\n            let tmpx = 0, tmpy = 0, dddfx = 0, dddfy = 0, ddfx = 0, ddfy = 0, dfx = 0, dfy = 0;\n            for (let i = 0, w = 2; i < curveCount; i++, w += 6) {\n                cx1 = world[w];\n                cy1 = world[w + 1];\n                cx2 = world[w + 2];\n                cy2 = world[w + 3];\n                x2 = world[w + 4];\n                y2 = world[w + 5];\n                tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\n                tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\n                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\n                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\n                ddfx = tmpx * 2 + dddfx;\n                ddfy = tmpy * 2 + dddfy;\n                dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\n                dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\n                pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                dfx += ddfx;\n                dfy += ddfy;\n                ddfx += dddfx;\n                ddfy += dddfy;\n                pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                dfx += ddfx;\n                dfy += ddfy;\n                pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                dfx += ddfx + dddfx;\n                dfy += ddfy + dddfy;\n                pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                curves[i] = pathLength;\n                x1 = x2;\n                y1 = y2;\n            }\n            if (percentPosition) position *= pathLength;\n            if (percentSpacing) {\n                for (let i = 0; i < spacesCount; i++)\n                    spaces[i] *= pathLength;\n            }\n\n            let segments = this.segments;\n            let curveLength = 0;\n            for (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\n                let space = spaces[i];\n                position += space;\n                let p = position;\n\n                if (closed) {\n                    p %= pathLength;\n                    if (p < 0) p += pathLength;\n                    curve = 0;\n                } else if (p < 0) {\n                    this.addBeforePosition(p, world, 0, out, o);\n                    continue;\n                } else if (p > pathLength) {\n                    this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\n                    continue;\n                }\n\n                // Determine curve containing position.\n                for (;; curve++) {\n                    let length = curves[curve];\n                    if (p > length) continue;\n                    if (curve == 0)\n                        p /= length;\n                    else {\n                        let prev = curves[curve - 1];\n                        p = (p - prev) / (length - prev);\n                    }\n                    break;\n                }\n\n                // Curve segment lengths.\n                if (curve != prevCurve) {\n                    prevCurve = curve;\n                    let ii = curve * 6;\n                    x1 = world[ii];\n                    y1 = world[ii + 1];\n                    cx1 = world[ii + 2];\n                    cy1 = world[ii + 3];\n                    cx2 = world[ii + 4];\n                    cy2 = world[ii + 5];\n                    x2 = world[ii + 6];\n                    y2 = world[ii + 7];\n                    tmpx = (x1 - cx1 * 2 + cx2) * 0.03;\n                    tmpy = (y1 - cy1 * 2 + cy2) * 0.03;\n                    dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\n                    dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\n                    ddfx = tmpx * 2 + dddfx;\n                    ddfy = tmpy * 2 + dddfy;\n                    dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\n                    dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\n                    curveLength = Math.sqrt(dfx * dfx + dfy * dfy);\n                    segments[0] = curveLength;\n                    for (ii = 1; ii < 8; ii++) {\n                        dfx += ddfx;\n                        dfy += ddfy;\n                        ddfx += dddfx;\n                        ddfy += dddfy;\n                        curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                        segments[ii] = curveLength;\n                    }\n                    dfx += ddfx;\n                    dfy += ddfy;\n                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                    segments[8] = curveLength;\n                    dfx += ddfx + dddfx;\n                    dfy += ddfy + dddfy;\n                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                    segments[9] = curveLength;\n                    segment = 0;\n                }\n\n                // Weight by segment length.\n                p *= curveLength;\n                for (;; segment++) {\n                    let length = segments[segment];\n                    if (p > length) continue;\n                    if (segment == 0)\n                        p /= length;\n                    else {\n                        let prev = segments[segment - 1];\n                        p = segment + (p - prev) / (length - prev);\n                    }\n                    break;\n                }\n                this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));\n            }\n            return out;\n        }\n\n        addBeforePosition (p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\n            let x1 = temp[i], y1 = temp[i + 1], dx = temp[i + 2] - x1, dy = temp[i + 3] - y1, r = Math.atan2(dy, dx);\n            out[o] = x1 + p * Math.cos(r);\n            out[o + 1] = y1 + p * Math.sin(r);\n            out[o + 2] = r;\n        }\n\n        addAfterPosition (p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\n            let x1 = temp[i + 2], y1 = temp[i + 3], dx = x1 - temp[i], dy = y1 - temp[i + 1], r = Math.atan2(dy, dx);\n            out[o] = x1 + p * Math.cos(r);\n            out[o + 1] = y1 + p * Math.sin(r);\n            out[o + 2] = r;\n        }\n\n        addCurvePosition (p: number, x1: number, y1: number, cx1: number, cy1: number, cx2: number, cy2: number, x2: number, y2: number,\n                          out: Array<number>, o: number, tangents: boolean) {\n            if (p == 0 || isNaN(p)) p = 0.0001;\n            let tt = p * p, ttt = tt * p, u = 1 - p, uu = u * u, uuu = uu * u;\n            let ut = u * p, ut3 = ut * 3, uut3 = u * ut3, utt3 = ut3 * p;\n            let x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\n            out[o] = x;\n            out[o + 1] = y;\n            if (tangents) out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class PathConstraintData extends ConstraintData {\n        bones = new Array<BoneData>();\n        target: SlotData;\n        positionMode: PositionMode;\n        spacingMode: SpacingMode;\n        rotateMode: RotateMode;\n        offsetRotation: number;\n        position: number; spacing: number; rotateMix: number; translateMix: number;\n\n        constructor (name: string) {\n            super(name, 0, false);\n        }\n    }\n\n    export enum PositionMode {\n        Fixed, Percent\n    }\n\n    export enum SpacingMode {\n        Length, Fixed, Percent\n    }\n\n    export enum RotateMode {\n        Tangent, Chain, ChainScale\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class Skeleton {\n        data: SkeletonData;\n        bones: Array<Bone>;\n        slots: Array<Slot>;\n        drawOrder: Array<Slot>;\n        ikConstraints: Array<IkConstraint>;\n        transformConstraints: Array<TransformConstraint>;\n        pathConstraints: Array<PathConstraint>;\n        _updateCache = new Array<Updatable>();\n        updateCacheReset = new Array<Updatable>();\n        skin: Skin;\n        color: Color;\n        time = 0;\n        scaleX = 1; scaleY = 1;\n        x = 0; y = 0;\n\n        constructor (data: SkeletonData) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            this.data = data;\n\n            this.bones = new Array<Bone>();\n            for (let i = 0; i < data.bones.length; i++) {\n                let boneData = data.bones[i];\n                let bone: Bone;\n                if (boneData.parent == null)\n                    bone = new Bone(boneData, this, null);\n                else {\n                    let parent = this.bones[boneData.parent.index];\n                    bone = new Bone(boneData, this, parent);\n                    parent.children.push(bone);\n                }\n                this.bones.push(bone);\n            }\n\n            this.slots = new Array<Slot>();\n            this.drawOrder = new Array<Slot>();\n            for (let i = 0; i < data.slots.length; i++) {\n                let slotData = data.slots[i];\n                let bone = this.bones[slotData.boneData.index];\n                let slot = new Slot(slotData, bone);\n                this.slots.push(slot);\n                this.drawOrder.push(slot);\n            }\n\n            this.ikConstraints = new Array<IkConstraint>();\n            for (let i = 0; i < data.ikConstraints.length; i++) {\n                let ikConstraintData = data.ikConstraints[i];\n                this.ikConstraints.push(new IkConstraint(ikConstraintData, this));\n            }\n\n            this.transformConstraints = new Array<TransformConstraint>();\n            for (let i = 0; i < data.transformConstraints.length; i++) {\n                let transformConstraintData = data.transformConstraints[i];\n                this.transformConstraints.push(new TransformConstraint(transformConstraintData, this));\n            }\n\n            this.pathConstraints = new Array<PathConstraint>();\n            for (let i = 0; i < data.pathConstraints.length; i++) {\n                let pathConstraintData = data.pathConstraints[i];\n                this.pathConstraints.push(new PathConstraint(pathConstraintData, this));\n            }\n\n            this.color = new Color(1, 1, 1, 1);\n            this.updateCache();\n        }\n\n        updateCache () {\n            let updateCache = this._updateCache;\n            updateCache.length = 0;\n            this.updateCacheReset.length = 0;\n\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                bone.sorted = bone.data.skinRequired;\n                bone.active = !bone.sorted;\n            }\n\n            if (this.skin != null) {\n                let skinBones = this.skin.bones;\n                for (let i = 0, n = this.skin.bones.length; i < n; i++) {\n                    let bone = this.bones[skinBones[i].index];\n                    do {\n                        bone.sorted = false;\n                        bone.active = true;\n                        bone = bone.parent;\n                    } while (bone != null);\n                }\n            }\n\n            // IK first, lowest hierarchy depth first.\n            let ikConstraints = this.ikConstraints;\n            let transformConstraints = this.transformConstraints;\n            let pathConstraints = this.pathConstraints;\n            let ikCount = ikConstraints.length, transformCount = transformConstraints.length, pathCount = pathConstraints.length;\n            let constraintCount = ikCount + transformCount + pathCount;\n\n            outer:\n                for (let i = 0; i < constraintCount; i++) {\n                    for (let ii = 0; ii < ikCount; ii++) {\n                        let constraint = ikConstraints[ii];\n                        if (constraint.data.order == i) {\n                            this.sortIkConstraint(constraint);\n                            continue outer;\n                        }\n                    }\n                    for (let ii = 0; ii < transformCount; ii++) {\n                        let constraint = transformConstraints[ii];\n                        if (constraint.data.order == i) {\n                            this.sortTransformConstraint(constraint);\n                            continue outer;\n                        }\n                    }\n                    for (let ii = 0; ii < pathCount; ii++) {\n                        let constraint = pathConstraints[ii];\n                        if (constraint.data.order == i) {\n                            this.sortPathConstraint(constraint);\n                            continue outer;\n                        }\n                    }\n                }\n\n            for (let i = 0, n = bones.length; i < n; i++)\n                this.sortBone(bones[i]);\n        }\n\n        sortIkConstraint (constraint: IkConstraint) {\n            constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true)));\n            if (!constraint.active) return;\n\n            let target = constraint.target;\n            this.sortBone(target);\n\n            let constrained = constraint.bones;\n            let parent = constrained[0];\n            this.sortBone(parent);\n\n            if (constrained.length > 1) {\n                let child = constrained[constrained.length - 1];\n                if (!(this._updateCache.indexOf(child) > -1)) this.updateCacheReset.push(child);\n            }\n\n            this._updateCache.push(constraint);\n\n            this.sortReset(parent.children);\n            constrained[constrained.length - 1].sorted = true;\n        }\n\n        sortPathConstraint (constraint: PathConstraint) {\n            constraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || (this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true)));\n            if (!constraint.active) return;\n\n            let slot = constraint.target;\n            let slotIndex = slot.data.index;\n            let slotBone = slot.bone;\n            if (this.skin != null) this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);\n            if (this.data.defaultSkin != null && this.data.defaultSkin != this.skin)\n                this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);\n            for (let i = 0, n = this.data.skins.length; i < n; i++)\n                this.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);\n\n            let attachment = slot.getAttachment();\n            if (attachment instanceof PathAttachment) this.sortPathConstraintAttachmentWith(attachment, slotBone);\n\n            let constrained = constraint.bones;\n            let boneCount = constrained.length;\n            for (let i = 0; i < boneCount; i++)\n                this.sortBone(constrained[i]);\n\n            this._updateCache.push(constraint);\n\n            for (let i = 0; i < boneCount; i++)\n                this.sortReset(constrained[i].children);\n            for (let i = 0; i < boneCount; i++)\n                constrained[i].sorted = true;\n        }\n\n        sortTransformConstraint (constraint: TransformConstraint) {\n            constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true)));\n            if (!constraint.active) return;\n\n            this.sortBone(constraint.target);\n\n            let constrained = constraint.bones;\n            let boneCount = constrained.length;\n            if (constraint.data.local) {\n                for (let i = 0; i < boneCount; i++) {\n                    let child = constrained[i];\n                    this.sortBone(child.parent);\n                    if (!(this._updateCache.indexOf(child) > -1)) this.updateCacheReset.push(child);\n                }\n            } else {\n                for (let i = 0; i < boneCount; i++) {\n                    this.sortBone(constrained[i]);\n                }\n            }\n\n            this._updateCache.push(constraint);\n\n            for (let ii = 0; ii < boneCount; ii++)\n                this.sortReset(constrained[ii].children);\n            for (let ii = 0; ii < boneCount; ii++)\n                constrained[ii].sorted = true;\n        }\n\n        sortPathConstraintAttachment (skin: Skin, slotIndex: number, slotBone: Bone) {\n            let attachments = skin.attachments[slotIndex];\n            if (!attachments) return;\n            for (let key in attachments) {\n                this.sortPathConstraintAttachmentWith(attachments[key], slotBone);\n            }\n        }\n\n        sortPathConstraintAttachmentWith (attachment: Attachment, slotBone: Bone) {\n            if (!(attachment instanceof PathAttachment)) return;\n            let pathBones = (<PathAttachment>attachment).bones;\n            if (pathBones == null)\n                this.sortBone(slotBone);\n            else {\n                let bones = this.bones;\n                let i = 0;\n                while (i < pathBones.length) {\n                    let boneCount = pathBones[i++];\n                    for (let n = i + boneCount; i < n; i++) {\n                        let boneIndex = pathBones[i];\n                        this.sortBone(bones[boneIndex]);\n                    }\n                }\n            }\n        }\n\n        sortBone (bone: Bone) {\n            if (bone.sorted) return;\n            let parent = bone.parent;\n            if (parent != null) this.sortBone(parent);\n            bone.sorted = true;\n            this._updateCache.push(bone);\n        }\n\n        sortReset (bones: Array<Bone>) {\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                if (!bone.active) continue;\n                if (bone.sorted) this.sortReset(bone.children);\n                bone.sorted = false;\n            }\n        }\n\n        /** Updates the world transform for each bone and applies constraints. */\n        updateWorldTransform () {\n            let updateCacheReset = this.updateCacheReset;\n            for (let i = 0, n = updateCacheReset.length; i < n; i++) {\n                let bone = updateCacheReset[i] as Bone;\n                bone.ax = bone.x;\n                bone.ay = bone.y;\n                bone.arotation = bone.rotation;\n                bone.ascaleX = bone.scaleX;\n                bone.ascaleY = bone.scaleY;\n                bone.ashearX = bone.shearX;\n                bone.ashearY = bone.shearY;\n                bone.appliedValid = true;\n            }\n            let updateCache = this._updateCache;\n            for (let i = 0, n = updateCache.length; i < n; i++)\n                updateCache[i].update();\n        }\n\n        /** Sets the bones, constraints, and slots to their setup pose values. */\n        setToSetupPose () {\n            this.setBonesToSetupPose();\n            this.setSlotsToSetupPose();\n        }\n\n        /** Sets the bones and constraints to their setup pose values. */\n        setBonesToSetupPose () {\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++)\n                bones[i].setToSetupPose();\n\n            let ikConstraints = this.ikConstraints;\n            for (let i = 0, n = ikConstraints.length; i < n; i++) {\n                let constraint = ikConstraints[i];\n                constraint.mix = constraint.data.mix;\n                constraint.softness = constraint.data.softness;\n                constraint.bendDirection = constraint.data.bendDirection;\n                constraint.compress = constraint.data.compress;\n                constraint.stretch = constraint.data.stretch;\n            }\n\n            let transformConstraints = this.transformConstraints;\n            for (let i = 0, n = transformConstraints.length; i < n; i++) {\n                let constraint = transformConstraints[i];\n                let data = constraint.data;\n                constraint.rotateMix = data.rotateMix;\n                constraint.translateMix = data.translateMix;\n                constraint.scaleMix = data.scaleMix;\n                constraint.shearMix = data.shearMix;\n            }\n\n            let pathConstraints = this.pathConstraints;\n            for (let i = 0, n = pathConstraints.length; i < n; i++) {\n                let constraint = pathConstraints[i];\n                let data = constraint.data;\n                constraint.position = data.position;\n                constraint.spacing = data.spacing;\n                constraint.rotateMix = data.rotateMix;\n                constraint.translateMix = data.translateMix;\n            }\n        }\n\n        setSlotsToSetupPose () {\n            let slots = this.slots;\n            Utils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);\n            for (let i = 0, n = slots.length; i < n; i++)\n                slots[i].setToSetupPose();\n        }\n\n        /** @return May return null. */\n        getRootBone () {\n            if (this.bones.length == 0) return null;\n            return this.bones[0];\n        }\n\n        /** @return May be null. */\n        findBone (boneName: string) {\n            if (boneName == null) throw new Error(\"boneName cannot be null.\");\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                if (bone.data.name == boneName) return bone;\n            }\n            return null;\n        }\n\n        /** @return -1 if the bone was not found. */\n        findBoneIndex (boneName: string) {\n            if (boneName == null) throw new Error(\"boneName cannot be null.\");\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++)\n                if (bones[i].data.name == boneName) return i;\n            return -1;\n        }\n\n        /** @return May be null. */\n        findSlot (slotName: string) {\n            if (slotName == null) throw new Error(\"slotName cannot be null.\");\n            let slots = this.slots;\n            for (let i = 0, n = slots.length; i < n; i++) {\n                let slot = slots[i];\n                if (slot.data.name == slotName) return slot;\n            }\n            return null;\n        }\n\n        /** @return -1 if the bone was not found. */\n        findSlotIndex (slotName: string) {\n            if (slotName == null) throw new Error(\"slotName cannot be null.\");\n            let slots = this.slots;\n            for (let i = 0, n = slots.length; i < n; i++)\n                if (slots[i].data.name == slotName) return i;\n            return -1;\n        }\n\n        /** Sets a skin by name.\n         * @see #setSkin(Skin) */\n        setSkinByName (skinName: string) {\n            let skin = this.data.findSkin(skinName);\n            if (skin == null) throw new Error(\"Skin not found: \" + skinName);\n            this.setSkin(skin);\n        }\n\n        /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\n         * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\n         * old skin, each slot's setup mode attachment is attached from the new skin.\n         * @param newSkin May be null. */\n        setSkin (newSkin: Skin) {\n            if (newSkin == this.skin) return;\n            if (newSkin != null) {\n                if (this.skin != null)\n                    newSkin.attachAll(this, this.skin);\n                else {\n                    let slots = this.slots;\n                    for (let i = 0, n = slots.length; i < n; i++) {\n                        let slot = slots[i];\n                        let name = slot.data.attachmentName;\n                        if (name != null) {\n                            let attachment: Attachment = newSkin.getAttachment(i, name);\n                            if (attachment != null) slot.setAttachment(attachment);\n                        }\n                    }\n                }\n            }\n            this.skin = newSkin;\n            this.updateCache();\n        }\n\n        /** @return May be null. */\n        getAttachmentByName (slotName: string, attachmentName: string): Attachment {\n            return this.getAttachment(this.data.findSlotIndex(slotName), attachmentName);\n        }\n\n        /** @return May be null. */\n        getAttachment (slotIndex: number, attachmentName: string): Attachment {\n            if (attachmentName == null) throw new Error(\"attachmentName cannot be null.\");\n            if (this.skin != null) {\n                let attachment: Attachment = this.skin.getAttachment(slotIndex, attachmentName);\n                if (attachment != null) return attachment;\n            }\n            if (this.data.defaultSkin != null) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n            return null;\n        }\n\n        /** @param attachmentName May be null. */\n        setAttachment (slotName: string, attachmentName?: string) {\n            if (slotName == null) throw new Error(\"slotName cannot be null.\");\n            let slots = this.slots;\n            for (let i = 0, n = slots.length; i < n; i++) {\n                let slot = slots[i];\n                if (slot.data.name == slotName) {\n                    let attachment: Attachment = null;\n                    if (attachmentName != null) {\n                        attachment = this.getAttachment(i, attachmentName);\n                        if (attachment == null)\n                            throw new Error(\"Attachment not found: \" + attachmentName + \", for slot: \" + slotName);\n                    }\n                    slot.setAttachment(attachment);\n                    return;\n                }\n            }\n            throw new Error(\"Slot not found: \" + slotName);\n        }\n\n        /** @return May be null. */\n        findIkConstraint (constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let ikConstraints = this.ikConstraints;\n            for (let i = 0, n = ikConstraints.length; i < n; i++) {\n                let ikConstraint = ikConstraints[i];\n                if (ikConstraint.data.name == constraintName) return ikConstraint;\n            }\n            return null;\n        }\n\n        /** @return May be null. */\n        findTransformConstraint (constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let transformConstraints = this.transformConstraints;\n            for (let i = 0, n = transformConstraints.length; i < n; i++) {\n                let constraint = transformConstraints[i];\n                if (constraint.data.name == constraintName) return constraint;\n            }\n            return null;\n        }\n\n        /** @return May be null. */\n        findPathConstraint (constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let pathConstraints = this.pathConstraints;\n            for (let i = 0, n = pathConstraints.length; i < n; i++) {\n                let constraint = pathConstraints[i];\n                if (constraint.data.name == constraintName) return constraint;\n            }\n            return null;\n        }\n\n        /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n         * @param offset The distance from the skeleton origin to the bottom left corner of the AABB.\n         * @param size The width and height of the AABB.\n         * @param temp Working memory */\n        getBounds (offset: Vector2, size: Vector2, temp: Array<number> = new Array<number>(2)) {\n            if (offset == null) throw new Error(\"offset cannot be null.\");\n            if (size == null) throw new Error(\"size cannot be null.\");\n            let drawOrder = this.drawOrder;\n            let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n            for (let i = 0, n = drawOrder.length; i < n; i++) {\n                let slot = drawOrder[i];\n                if (!slot.bone.active) continue;\n                let verticesLength = 0;\n                let vertices: ArrayLike<number> = null;\n                let attachment = slot.getAttachment();\n                if (attachment instanceof RegionAttachment) {\n                    verticesLength = 8;\n                    vertices = Utils.setArraySize(temp, verticesLength, 0);\n                    (<RegionAttachment>attachment).computeWorldVertices(slot.bone, vertices, 0, 2);\n                } else if (attachment instanceof MeshAttachment) {\n                    let mesh = (<MeshAttachment>attachment);\n                    verticesLength = mesh.worldVerticesLength;\n                    vertices = Utils.setArraySize(temp, verticesLength, 0);\n                    mesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);\n                }\n                if (vertices != null) {\n                    for (let ii = 0, nn = vertices.length; ii < nn; ii += 2) {\n                        let x = vertices[ii], y = vertices[ii + 1];\n                        minX = Math.min(minX, x);\n                        minY = Math.min(minY, y);\n                        maxX = Math.max(maxX, x);\n                        maxY = Math.max(maxY, y);\n                    }\n                }\n            }\n            offset.set(minX, minY);\n            size.set(maxX - minX, maxY - minY);\n        }\n\n        update (delta: number) {\n            this.time += delta;\n        }\n\n        get flipX(): boolean {\n            return this.scaleX == -1;\n        }\n\n        set flipX(value: boolean) {\n            if (!Skeleton.deprecatedWarning1) {\n                Skeleton.deprecatedWarning1 = true;\n                console.warn(\"Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY\");\n            }\n            this.scaleX = value ? 1.0 : -1.0;\n        }\n\n        get flipY(): boolean {\n            return this.scaleY == -1;\n        }\n\n        set flipY(value: boolean) {\n            if (!Skeleton.deprecatedWarning1) {\n                Skeleton.deprecatedWarning1 = true;\n                console.warn(\"Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY\");\n            }\n            this.scaleY = value ? 1.0 : -1.0;\n        }\n\n        private static deprecatedWarning1: boolean = false;\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated May 1, 2019. Replaces all prior versions.\n *\n * Copyright (c) 2013-2019, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN\n * NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS\n * INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n\texport class SkeletonBinary {\n\t\tstatic AttachmentTypeValues = [ 0 /*AttachmentType.Region*/, 1/*AttachmentType.BoundingBox*/, 2/*AttachmentType.Mesh*/, 3/*AttachmentType.LinkedMesh*/, 4/*AttachmentType.Path*/, 5/*AttachmentType.Point*/, 6/*AttachmentType.Clipping*/ ];\n\t\tstatic TransformModeValues = [TransformMode.Normal, TransformMode.OnlyTranslation, TransformMode.NoRotationOrReflection, TransformMode.NoScale, TransformMode.NoScaleOrReflection];\n\t\tstatic PositionModeValues = [ PositionMode.Fixed, PositionMode.Percent ];\n\t\tstatic SpacingModeValues = [ SpacingMode.Length, SpacingMode.Fixed, SpacingMode.Percent];\n\t\tstatic RotateModeValues = [ RotateMode.Tangent, RotateMode.Chain, RotateMode.ChainScale ];\n\t\tstatic BlendModeValues = [ BlendMode.Normal, BlendMode.Additive, BlendMode.Multiply, BlendMode.Screen];\n\n\t\tstatic BONE_ROTATE = 0;\n\t\tstatic BONE_TRANSLATE = 1;\n\t\tstatic BONE_SCALE = 2;\n\t\tstatic BONE_SHEAR = 3;\n\n\t\tstatic SLOT_ATTACHMENT = 0;\n\t\tstatic SLOT_COLOR = 1;\n\t\tstatic SLOT_TWO_COLOR = 2;\n\n\t\tstatic PATH_POSITION = 0;\n\t\tstatic PATH_SPACING = 1;\n\t\tstatic PATH_MIX = 2;\n\n\t\tstatic CURVE_LINEAR = 0;\n\t\tstatic CURVE_STEPPED = 1;\n\t\tstatic CURVE_BEZIER = 2;\n\n\t\tattachmentLoader: AttachmentLoader;\n\t\tscale = 1;\n\t\tprivate linkedMeshes = new Array<LinkedMesh>();\n\n\t\tconstructor (attachmentLoader: AttachmentLoader) {\n\t\t\tthis.attachmentLoader = attachmentLoader;\n\t\t}\n\n\t\treadSkeletonData (binary: Uint8Array): SkeletonData {\n\t\t\tlet scale = this.scale;\n\n\t\t\tlet skeletonData = new SkeletonData();\n\t\t\tskeletonData.name = \"\"; // BOZO\n\n\t\t\tlet input = new BinaryInput(binary);\n\n\t\t\tskeletonData.hash = input.readString();\n\t\t\tskeletonData.version = input.readString();\n            if (skeletonData.version === '3.8.75')\n            {\n                let error = `Unsupported skeleton data, 3.8.75 is deprecated, please export with a newer version of Spine.`;\n                console.error(error);\n            }\n\t\t\tskeletonData.x = input.readFloat();\n\t\t\tskeletonData.y = input.readFloat();\n\t\t\tskeletonData.width = input.readFloat();\n\t\t\tskeletonData.height = input.readFloat();\n\n\t\t\tlet nonessential = input.readBoolean();\n\t\t\tif (nonessential) {\n\t\t\t\tskeletonData.fps = input.readFloat();\n\n\t\t\t\tskeletonData.imagesPath = input.readString();\n\t\t\t\tskeletonData.audioPath = input.readString();\n\t\t\t}\n\n\t\t\tlet n = 0;\n\t\t\t// Strings.\n\t\t\tn = input.readInt(true)\n\t\t\tfor (let i = 0; i < n; i++)\n\t\t\t\tinput.strings.push(input.readString());\n\n\t\t\t// Bones.\n\t\t\tn = input.readInt(true)\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tlet name = input.readString();\n\t\t\t\tlet parent = i == 0 ? null : skeletonData.bones[input.readInt(true)];\n\t\t\t\tlet data = new BoneData(i, name, parent);\n\t\t\t\tdata.rotation = input.readFloat();\n\t\t\t\tdata.x = input.readFloat() * scale;\n\t\t\t\tdata.y = input.readFloat() * scale;\n\t\t\t\tdata.scaleX = input.readFloat();\n\t\t\t\tdata.scaleY = input.readFloat();\n\t\t\t\tdata.shearX = input.readFloat();\n\t\t\t\tdata.shearY = input.readFloat();\n\t\t\t\tdata.length = input.readFloat() * scale;\n\t\t\t\tdata.transformMode = SkeletonBinary.TransformModeValues[input.readInt(true)];\n\t\t\t\tdata.skinRequired = input.readBoolean();\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(data.color, input.readInt32());\n\t\t\t\tskeletonData.bones.push(data);\n\t\t\t}\n\n\t\t\t// Slots.\n\t\t\tn = input.readInt(true);\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tlet slotName = input.readString();\n\t\t\t\tlet boneData = skeletonData.bones[input.readInt(true)];\n\t\t\t\tlet data = new SlotData(i, slotName, boneData);\n\t\t\t\tColor.rgba8888ToColor(data.color, input.readInt32());\n\n\t\t\t\tlet darkColor = input.readInt32();\n\t\t\t\tif (darkColor != -1) Color.rgb888ToColor(data.darkColor = new Color(), darkColor);\n\n\t\t\t\tdata.attachmentName = input.readStringRef();\n\t\t\t\tdata.blendMode = SkeletonBinary.BlendModeValues[input.readInt(true)];\n\t\t\t\tskeletonData.slots.push(data);\n\t\t\t}\n\n\t\t\t// IK constraints.\n\t\t\tn = input.readInt(true);\n\t\t\tfor (let i = 0, nn; i < n; i++) {\n\t\t\t\tlet data = new IkConstraintData(input.readString());\n\t\t\t\tdata.order = input.readInt(true);\n\t\t\t\tdata.skinRequired = input.readBoolean();\n\t\t\t\tnn = input.readInt(true);\n\t\t\t\tfor (let ii = 0; ii < nn; ii++)\n\t\t\t\t\tdata.bones.push(skeletonData.bones[input.readInt(true)]);\n\t\t\t\tdata.target = skeletonData.bones[input.readInt(true)];\n\t\t\t\tdata.mix = input.readFloat();\n\t\t\t\tdata.softness = input.readFloat() * scale;\n\t\t\t\tdata.bendDirection = input.readByte();\n\t\t\t\tdata.compress = input.readBoolean();\n\t\t\t\tdata.stretch = input.readBoolean();\n\t\t\t\tdata.uniform = input.readBoolean();\n\t\t\t\tskeletonData.ikConstraints.push(data);\n\t\t\t}\n\n\t\t\t// Transform constraints.\n\t\t\tn = input.readInt(true);\n\t\t\tfor (let i = 0, nn; i < n; i++) {\n\t\t\t\tlet data = new TransformConstraintData(input.readString());\n\t\t\t\tdata.order = input.readInt(true);\n\t\t\t\tdata.skinRequired = input.readBoolean();\n\t\t\t\tnn = input.readInt(true);\n\t\t\t\tfor (let ii = 0; ii < nn; ii++)\n\t\t\t\t\tdata.bones.push(skeletonData.bones[input.readInt(true)]);\n\t\t\t\tdata.target = skeletonData.bones[input.readInt(true)];\n\t\t\t\tdata.local = input.readBoolean();\n\t\t\t\tdata.relative = input.readBoolean();\n\t\t\t\tdata.offsetRotation = input.readFloat();\n\t\t\t\tdata.offsetX = input.readFloat() * scale;\n\t\t\t\tdata.offsetY = input.readFloat() * scale;\n\t\t\t\tdata.offsetScaleX = input.readFloat();\n\t\t\t\tdata.offsetScaleY = input.readFloat();\n\t\t\t\tdata.offsetShearY = input.readFloat();\n\t\t\t\tdata.rotateMix = input.readFloat();\n\t\t\t\tdata.translateMix = input.readFloat();\n\t\t\t\tdata.scaleMix = input.readFloat();\n\t\t\t\tdata.shearMix = input.readFloat();\n\t\t\t\tskeletonData.transformConstraints.push(data);\n\t\t\t}\n\n\t\t\t// Path constraints.\n\t\t\tn = input.readInt(true);\n\t\t\tfor (let i = 0, nn; i < n; i++) {\n\t\t\t\tlet data = new PathConstraintData(input.readString());\n\t\t\t\tdata.order = input.readInt(true);\n\t\t\t\tdata.skinRequired = input.readBoolean();\n\t\t\t\tnn = input.readInt(true);\n\t\t\t\tfor (let ii = 0; ii < nn; ii++)\n\t\t\t\t\tdata.bones.push(skeletonData.bones[input.readInt(true)]);\n\t\t\t\tdata.target = skeletonData.slots[input.readInt(true)];\n\t\t\t\tdata.positionMode = SkeletonBinary.PositionModeValues[input.readInt(true)];\n\t\t\t\tdata.spacingMode = SkeletonBinary.SpacingModeValues[input.readInt(true)];\n\t\t\t\tdata.rotateMode = SkeletonBinary.RotateModeValues[input.readInt(true)];\n\t\t\t\tdata.offsetRotation = input.readFloat();\n\t\t\t\tdata.position = input.readFloat();\n\t\t\t\tif (data.positionMode == PositionMode.Fixed) data.position *= scale;\n\t\t\t\tdata.spacing = input.readFloat();\n\t\t\t\tif (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\n\t\t\t\tdata.rotateMix = input.readFloat();\n\t\t\t\tdata.translateMix = input.readFloat();\n\t\t\t\tskeletonData.pathConstraints.push(data);\n\t\t\t}\n\n\t\t\t// Default skin.\n\t\t\tlet defaultSkin = this.readSkin(input, skeletonData, true, nonessential);\n\t\t\tif (defaultSkin != null) {\n\t\t\t\tskeletonData.defaultSkin = defaultSkin;\n\t\t\t\tskeletonData.skins.push(defaultSkin);\n\t\t\t}\n\n\t\t\t// Skins.\n\t\t\t{\n\t\t\t\tlet i = skeletonData.skins.length;\n\t\t\t\tUtils.setArraySize(skeletonData.skins, n = i + input.readInt(true));\n\t\t\t\tfor (; i < n; i++)\n\t\t\t\t\tskeletonData.skins[i] = this.readSkin(input, skeletonData, false, nonessential);\n\t\t\t}\n\n\t\t\t// Linked meshes.\n\t\t\tn = this.linkedMeshes.length;\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tlet linkedMesh = this.linkedMeshes[i];\n\t\t\t\tlet skin = linkedMesh.skin == null ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n\t\t\t\tif (skin == null) throw new Error(\"Skin not found: \" + linkedMesh.skin);\n\t\t\t\tlet parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n\t\t\t\tif (parent == null) throw new Error(\"Parent mesh not found: \" + linkedMesh.parent);\n\t\t\t\tlinkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? parent as VertexAttachment : linkedMesh.mesh;\n\t\t\t\tlinkedMesh.mesh.setParentMesh(parent as MeshAttachment);\n\t\t\t\t// linkedMesh.mesh.updateUVs();\n\t\t\t}\n\t\t\tthis.linkedMeshes.length = 0;\n\n\t\t\t// Events.\n\t\t\tn = input.readInt(true);\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tlet data = new EventData(input.readStringRef());\n\t\t\t\tdata.intValue = input.readInt(false);\n\t\t\t\tdata.floatValue = input.readFloat();\n\t\t\t\tdata.stringValue = input.readString();\n\t\t\t\tdata.audioPath = input.readString();\n\t\t\t\tif (data.audioPath != null) {\n\t\t\t\t\tdata.volume = input.readFloat();\n\t\t\t\t\tdata.balance = input.readFloat();\n\t\t\t\t}\n\t\t\t\tskeletonData.events.push(data);\n\t\t\t}\n\n\t\t\t// Animations.\n\t\t\tn = input.readInt(true);\n\t\t\tfor (let i = 0; i < n; i++)\n\t\t\t\tskeletonData.animations.push(this.readAnimation(input, input.readString(), skeletonData));\n\t\t\treturn skeletonData;\n\t\t}\n\n\t\tprivate readSkin (input: BinaryInput, skeletonData: SkeletonData, defaultSkin: boolean, nonessential: boolean): Skin {\n            let skin = null;\n            let slotCount = 0;\n\n            if (defaultSkin) {\n                slotCount = input.readInt(true)\n                if (slotCount == 0) return null;\n                skin = new Skin(\"default\");\n            } else {\n                skin = new Skin(input.readStringRef());\n                skin.bones.length = input.readInt(true);\n                for (let i = 0, n = skin.bones.length; i < n; i++)\n                    skin.bones[i] = skeletonData.bones[input.readInt(true)];\n\n                for (let i = 0, n = input.readInt(true); i < n; i++)\n                    skin.constraints.push(skeletonData.ikConstraints[input.readInt(true)]);\n                for (let i = 0, n = input.readInt(true); i < n; i++)\n                    skin.constraints.push(skeletonData.transformConstraints[input.readInt(true)]);\n                for (let i = 0, n = input.readInt(true); i < n; i++)\n                    skin.constraints.push(skeletonData.pathConstraints[input.readInt(true)]);\n\n                slotCount = input.readInt(true);\n            }\n\n            for (let i = 0; i < slotCount; i++) {\n                let slotIndex = input.readInt(true);\n                for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                    let name = input.readStringRef();\n                    let attachment = this.readAttachment(input, skeletonData, skin, slotIndex, name, nonessential);\n                    if (attachment != null) skin.setAttachment(slotIndex, name, attachment);\n                }\n            }\n            return skin;\n\t\t}\n\n\t\tprivate readAttachment(input: BinaryInput, skeletonData: SkeletonData, skin: Skin, slotIndex: number, attachmentName: string, nonessential: boolean): Attachment {\n\t\t\tlet scale = this.scale;\n\n\t\t\tlet name = input.readStringRef();\n\t\t\tif (name == null) name = attachmentName;\n\n\t\t\tlet typeIndex = input.readByte();\n\t\t\tlet type = SkeletonBinary.AttachmentTypeValues[typeIndex];\n\t\t\tswitch (type) {\n\t\t\tcase AttachmentType.Region: {\n\t\t\t\tlet path = input.readStringRef();\n\t\t\t\tlet rotation = input.readFloat();\n\t\t\t\tlet x = input.readFloat();\n\t\t\t\tlet y = input.readFloat();\n\t\t\t\tlet scaleX = input.readFloat();\n\t\t\t\tlet scaleY = input.readFloat();\n\t\t\t\tlet width = input.readFloat();\n\t\t\t\tlet height = input.readFloat();\n\t\t\t\tlet color = input.readInt32();\n\n\t\t\t\tif (path == null) path = name;\n\t\t\t\tlet region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n\t\t\t\tif (region == null) return null;\n\t\t\t\tregion.path = path;\n\t\t\t\tregion.x = x * scale;\n\t\t\t\tregion.y = y * scale;\n\t\t\t\tregion.scaleX = scaleX;\n\t\t\t\tregion.scaleY = scaleY;\n\t\t\t\tregion.rotation = rotation;\n\t\t\t\tregion.width = width * scale;\n\t\t\t\tregion.height = height * scale;\n\t\t\t\tColor.rgba8888ToColor(region.color, color);\n\t\t\t\t// region.updateOffset();\n\t\t\t\treturn region;\n\t\t\t}\n\t\t\tcase AttachmentType.BoundingBox: {\n\t\t\t\tlet vertexCount = input.readInt(true);\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\n\n\t\t\t\tlet box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n\t\t\t\tif (box == null) return null;\n\t\t\t\tbox.worldVerticesLength = vertexCount << 1;\n\t\t\t\tbox.vertices = vertices.vertices;\n\t\t\t\tbox.bones = vertices.bones;\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(box.color, color);\n\t\t\t\treturn box;\n\t\t\t}\n\t\t\tcase AttachmentType.Mesh: {\n\t\t\t\tlet path = input.readStringRef();\n\t\t\t\tlet color = input.readInt32();\n\t\t\t\tlet vertexCount = input.readInt(true);\n\t\t\t\tlet uvs = this.readFloatArray(input, vertexCount << 1, 1);\n\t\t\t\tlet triangles = this.readShortArray(input);\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\n\t\t\t\tlet hullLength = input.readInt(true);\n\t\t\t\tlet edges = null;\n\t\t\t\tlet width = 0, height = 0;\n\t\t\t\tif (nonessential) {\n\t\t\t\t\tedges = this.readShortArray(input);\n\t\t\t\t\twidth = input.readFloat();\n\t\t\t\t\theight = input.readFloat();\n\t\t\t\t}\n\n\t\t\t\tif (path == null) path = name;\n\t\t\t\tlet mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n\t\t\t\tif (mesh == null) return null;\n\t\t\t\tmesh.path = path;\n\t\t\t\tColor.rgba8888ToColor(mesh.color, color);\n\t\t\t\tmesh.bones = vertices.bones;\n\t\t\t\tmesh.vertices = vertices.vertices;\n\t\t\t\tmesh.worldVerticesLength = vertexCount << 1;\n\t\t\t\tmesh.triangles = triangles;\n\t\t\t\tmesh.regionUVs = new Float32Array(uvs);\n\t\t\t\t// mesh.updateUVs();\n\t\t\t\tmesh.hullLength = hullLength << 1;\n\t\t\t\tif (nonessential) {\n\t\t\t\t\tmesh.edges = edges;\n\t\t\t\t\tmesh.width = width * scale;\n\t\t\t\t\tmesh.height = height * scale;\n\t\t\t\t}\n\t\t\t\treturn mesh;\n\t\t\t}\n\t\t\tcase AttachmentType.LinkedMesh: {\n\t\t\t\tlet path = input.readStringRef();\n\t\t\t\tlet color = input.readInt32();\n\t\t\t\tlet skinName = input.readStringRef();\n\t\t\t\tlet parent = input.readStringRef();\n\t\t\t\tlet inheritDeform = input.readBoolean();\n\t\t\t\tlet width = 0, height = 0;\n\t\t\t\tif (nonessential) {\n\t\t\t\t\twidth = input.readFloat();\n\t\t\t\t\theight = input.readFloat();\n\t\t\t\t}\n\n\t\t\t\tif (path == null) path = name;\n\t\t\t\tlet mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n\t\t\t\tif (mesh == null) return null;\n\t\t\t\tmesh.path = path;\n\t\t\t\tColor.rgba8888ToColor(mesh.color, color);\n\t\t\t\tif (nonessential) {\n\t\t\t\t\tmesh.width = width * scale;\n\t\t\t\t\tmesh.height = height * scale;\n\t\t\t\t}\n\t\t\t\tthis.linkedMeshes.push(new LinkedMesh(mesh, skinName, slotIndex, parent, inheritDeform));\n\t\t\t\treturn mesh;\n\t\t\t}\n\t\t\tcase AttachmentType.Path: {\n\t\t\t\tlet closed = input.readBoolean();\n\t\t\t\tlet constantSpeed = input.readBoolean();\n\t\t\t\tlet vertexCount = input.readInt(true);\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\n\t\t\t\tlet lengths = Utils.newArray(vertexCount / 3, 0);\n\t\t\t\tfor (let i = 0, n = lengths.length; i < n; i++)\n\t\t\t\t\tlengths[i] = input.readFloat() * scale;\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\n\n\t\t\t\tlet path = this.attachmentLoader.newPathAttachment(skin, name);\n\t\t\t\tif (path == null) return null;\n\t\t\t\tpath.closed = closed;\n\t\t\t\tpath.constantSpeed = constantSpeed;\n\t\t\t\tpath.worldVerticesLength = vertexCount << 1;\n\t\t\t\tpath.vertices = vertices.vertices;\n\t\t\t\tpath.bones = vertices.bones;\n\t\t\t\tpath.lengths = lengths;\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(path.color, color);\n\t\t\t\treturn path;\n\t\t\t}\n\t\t\tcase AttachmentType.Point: {\n\t\t\t\tlet rotation = input.readFloat();\n\t\t\t\tlet x = input.readFloat();\n\t\t\t\tlet y = input.readFloat();\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\n\n\t\t\t\tlet point = this.attachmentLoader.newPointAttachment(skin, name);\n\t\t\t\tif (point == null) return null;\n\t\t\t\tpoint.x = x * scale;\n\t\t\t\tpoint.y = y * scale;\n\t\t\t\tpoint.rotation = rotation;\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(point.color, color);\n\t\t\t\treturn point;\n\t\t\t}\n\t\t\tcase AttachmentType.Clipping: {\n\t\t\t\tlet endSlotIndex = input.readInt(true);\n\t\t\t\tlet vertexCount = input.readInt(true);\n\t\t\t\tlet vertices = this.readVertices(input, vertexCount);\n\t\t\t\tlet color = nonessential ? input.readInt32() : 0;\n\n\t\t\t\tlet clip = this.attachmentLoader.newClippingAttachment(skin, name);\n\t\t\t\tif (clip == null) return null;\n\t\t\t\tclip.endSlot = skeletonData.slots[endSlotIndex];\n\t\t\t\tclip.worldVerticesLength = vertexCount << 1;\n\t\t\t\tclip.vertices = vertices.vertices;\n\t\t\t\tclip.bones = vertices.bones;\n\t\t\t\tif (nonessential) Color.rgba8888ToColor(clip.color, color);\n\t\t\t\treturn clip;\n\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate readVertices (input: BinaryInput, vertexCount: number): Vertices {\n\t\t\tlet verticesLength = vertexCount << 1;\n\t\t\tlet vertices = new Vertices();\n\t\t\tlet scale = this.scale;\n\t\t\tif (!input.readBoolean()) {\n\t\t\t\tvertices.vertices = this.readFloatArray(input, verticesLength, scale);\n\t\t\t\treturn vertices;\n\t\t\t}\n\t\t\tlet weights = new Array<number>();\n\t\t\tlet bonesArray = new Array<number>();\n\t\t\tfor (let i = 0; i < vertexCount; i++) {\n\t\t\t\tlet boneCount = input.readInt(true);\n\t\t\t\tbonesArray.push(boneCount);\n\t\t\t\tfor (let ii = 0; ii < boneCount; ii++) {\n\t\t\t\t\tbonesArray.push(input.readInt(true));\n\t\t\t\t\tweights.push(input.readFloat() * scale);\n\t\t\t\t\tweights.push(input.readFloat() * scale);\n\t\t\t\t\tweights.push(input.readFloat());\n\t\t\t\t}\n\t\t\t}\n\t\t\tvertices.vertices = Utils.toFloatArray(weights);\n\t\t\tvertices.bones = bonesArray;\n\t\t\treturn vertices;\n\t\t}\n\n\t\tprivate readFloatArray (input: BinaryInput, n: number, scale: number): number[] {\n\t\t\tlet array = new Array<number>(n);\n\t\t\tif (scale == 1) {\n\t\t\t\tfor (let i = 0; i < n; i++)\n\t\t\t\t\tarray[i] = input.readFloat();\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < n; i++)\n\t\t\t\t\tarray[i] = input.readFloat() * scale;\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\n\t\tprivate readShortArray (input: BinaryInput): number[] {\n\t\t\tlet n = input.readInt(true);\n\t\t\tlet array = new Array<number>(n);\n\t\t\tfor (let i = 0; i < n; i++)\n\t\t\t\tarray[i] = input.readShort();\n\t\t\treturn array;\n\t\t}\n\n\t\tprivate readAnimation (input: BinaryInput, name: string, skeletonData: SkeletonData): Animation {\n\t\t\tlet timelines = new Array<Timeline>();\n\t\t\tlet scale = this.scale;\n\t\t\tlet duration = 0;\n\t\t\tlet tempColor1 = new Color();\n\t\t\tlet tempColor2 = new Color();\n\n\t\t\t// Slot timelines.\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\t\tlet slotIndex = input.readInt(true);\n\t\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n\t\t\t\t\tlet timelineType = input.readByte();\n\t\t\t\t\tlet frameCount = input.readInt(true);\n\t\t\t\t\tswitch (timelineType) {\n\t\t\t\t\tcase SkeletonBinary.SLOT_ATTACHMENT: {\n\t\t\t\t\t\tlet timeline = new AttachmentTimeline(frameCount);\n\t\t\t\t\t\ttimeline.slotIndex = slotIndex;\n\t\t\t\t\t\tfor (let frameIndex = 0; frameIndex < frameCount; frameIndex++)\n\t\t\t\t\t\t\ttimeline.setFrame(frameIndex, input.readFloat(), input.readStringRef());\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tduration = Math.max(duration, timeline.frames[frameCount - 1]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase SkeletonBinary.SLOT_COLOR: {\n\t\t\t\t\t\tlet timeline = new ColorTimeline(frameCount);\n\t\t\t\t\t\ttimeline.slotIndex = slotIndex;\n\t\t\t\t\t\tfor (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n\t\t\t\t\t\t\tlet time = input.readFloat();\n\t\t\t\t\t\t\tColor.rgba8888ToColor(tempColor1, input.readInt32());\n\t\t\t\t\t\t\ttimeline.setFrame(frameIndex, time, tempColor1.r, tempColor1.g, tempColor1.b, tempColor1.a);\n\t\t\t\t\t\t\tif (frameIndex < frameCount - 1) this.readCurve(input, frameIndex, timeline);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tduration = Math.max(duration, timeline.frames[(frameCount - 1) * ColorTimeline.ENTRIES]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase SkeletonBinary.SLOT_TWO_COLOR: {\n\t\t\t\t\t\tlet timeline = new TwoColorTimeline(frameCount);\n\t\t\t\t\t\ttimeline.slotIndex = slotIndex;\n\t\t\t\t\t\tfor (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n\t\t\t\t\t\t\tlet time = input.readFloat();\n\t\t\t\t\t\t\tColor.rgba8888ToColor(tempColor1, input.readInt32());\n\t\t\t\t\t\t\tColor.rgb888ToColor(tempColor2, input.readInt32());\n\t\t\t\t\t\t\ttimeline.setFrame(frameIndex, time, tempColor1.r, tempColor1.g, tempColor1.b, tempColor1.a, tempColor2.r,\n\t\t\t\t\t\t\t\ttempColor2.g, tempColor2.b);\n\t\t\t\t\t\t\tif (frameIndex < frameCount - 1) this.readCurve(input, frameIndex, timeline);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tduration = Math.max(duration, timeline.frames[(frameCount - 1) * TwoColorTimeline.ENTRIES]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Bone timelines.\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\t\tlet boneIndex = input.readInt(true);\n\t\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n\t\t\t\t\tlet timelineType = input.readByte();\n\t\t\t\t\tlet frameCount = input.readInt(true);\n\t\t\t\t\tswitch (timelineType) {\n\t\t\t\t\tcase SkeletonBinary.BONE_ROTATE: {\n\t\t\t\t\t\tlet timeline = new RotateTimeline(frameCount);\n\t\t\t\t\t\ttimeline.boneIndex = boneIndex;\n\t\t\t\t\t\tfor (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frameIndex, input.readFloat(), input.readFloat());\n\t\t\t\t\t\t\tif (frameIndex < frameCount - 1) this.readCurve(input, frameIndex, timeline);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tduration = Math.max(duration, timeline.frames[(frameCount - 1) * RotateTimeline.ENTRIES]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase SkeletonBinary.BONE_TRANSLATE:\n\t\t\t\t\tcase SkeletonBinary.BONE_SCALE:\n\t\t\t\t\tcase SkeletonBinary.BONE_SHEAR: {\n\t\t\t\t\t\tlet timeline;\n\t\t\t\t\t\tlet timelineScale = 1;\n\t\t\t\t\t\tif (timelineType == SkeletonBinary.BONE_SCALE)\n\t\t\t\t\t\t\ttimeline = new ScaleTimeline(frameCount);\n\t\t\t\t\t\telse if (timelineType == SkeletonBinary.BONE_SHEAR)\n\t\t\t\t\t\t\ttimeline = new ShearTimeline(frameCount);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttimeline = new TranslateTimeline(frameCount);\n\t\t\t\t\t\t\ttimelineScale = scale;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimeline.boneIndex = boneIndex;\n\t\t\t\t\t\tfor (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frameIndex, input.readFloat(), input.readFloat() * timelineScale,\n\t\t\t\t\t\t\t\tinput.readFloat() * timelineScale);\n\t\t\t\t\t\t\tif (frameIndex < frameCount - 1) this.readCurve(input, frameIndex, timeline);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tduration = Math.max(duration, timeline.frames[(frameCount - 1) * TranslateTimeline.ENTRIES]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// IK constraint timelines.\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\t\tlet index = input.readInt(true);\n\t\t\t\tlet frameCount = input.readInt(true);\n\t\t\t\tlet timeline = new IkConstraintTimeline(frameCount);\n\t\t\t\ttimeline.ikConstraintIndex = index;\n\t\t\t\tfor (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n\t\t\t\t\ttimeline.setFrame(frameIndex, input.readFloat(), input.readFloat(), input.readFloat() * scale, input.readByte(), input.readBoolean(),\n\t\t\t\t\t\tinput.readBoolean());\n\t\t\t\t\tif (frameIndex < frameCount - 1) this.readCurve(input, frameIndex, timeline);\n\t\t\t\t}\n\t\t\t\ttimelines.push(timeline);\n\t\t\t\tduration = Math.max(duration, timeline.frames[(frameCount - 1) * IkConstraintTimeline.ENTRIES]);\n\t\t\t}\n\n\t\t\t// Transform constraint timelines.\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\t\tlet index = input.readInt(true);\n\t\t\t\tlet frameCount = input.readInt(true);\n\t\t\t\tlet timeline = new TransformConstraintTimeline(frameCount);\n\t\t\t\ttimeline.transformConstraintIndex = index;\n\t\t\t\tfor (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n\t\t\t\t\ttimeline.setFrame(frameIndex, input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat(),\n\t\t\t\t\t\tinput.readFloat());\n\t\t\t\t\tif (frameIndex < frameCount - 1) this.readCurve(input, frameIndex, timeline);\n\t\t\t\t}\n\t\t\t\ttimelines.push(timeline);\n\t\t\t\tduration = Math.max(duration, timeline.frames[(frameCount - 1) * TransformConstraintTimeline.ENTRIES]);\n\t\t\t}\n\n\t\t\t// Path constraint timelines.\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\t\tlet index = input.readInt(true);\n\t\t\t\tlet data = skeletonData.pathConstraints[index];\n\t\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n\t\t\t\t\tlet timelineType = input.readByte();\n\t\t\t\t\tlet frameCount = input.readInt(true);\n\t\t\t\t\tswitch (timelineType) {\n\t\t\t\t\tcase SkeletonBinary.PATH_POSITION:\n\t\t\t\t\tcase SkeletonBinary.PATH_SPACING: {\n\t\t\t\t\t\tlet timeline;\n\t\t\t\t\t\tlet timelineScale = 1;\n\t\t\t\t\t\tif (timelineType == SkeletonBinary.PATH_SPACING) {\n\t\t\t\t\t\t\ttimeline = new PathConstraintSpacingTimeline(frameCount);\n\t\t\t\t\t\t\tif (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) timelineScale = scale;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttimeline = new PathConstraintPositionTimeline(frameCount);\n\t\t\t\t\t\t\tif (data.positionMode == PositionMode.Fixed) timelineScale = scale;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimeline.pathConstraintIndex = index;\n\t\t\t\t\t\tfor (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frameIndex, input.readFloat(), input.readFloat() * timelineScale);\n\t\t\t\t\t\t\tif (frameIndex < frameCount - 1) this.readCurve(input, frameIndex, timeline);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tduration = Math.max(duration, timeline.frames[(frameCount - 1) * PathConstraintPositionTimeline.ENTRIES]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase SkeletonBinary.PATH_MIX: {\n\t\t\t\t\t\tlet timeline = new PathConstraintMixTimeline(frameCount);\n\t\t\t\t\t\ttimeline.pathConstraintIndex = index;\n\t\t\t\t\t\tfor (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n\t\t\t\t\t\t\ttimeline.setFrame(frameIndex, input.readFloat(), input.readFloat(), input.readFloat());\n\t\t\t\t\t\t\tif (frameIndex < frameCount - 1) this.readCurve(input, frameIndex, timeline);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tduration = Math.max(duration, timeline.frames[(frameCount - 1) * PathConstraintMixTimeline.ENTRIES]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Deform timelines.\n\t\t\tfor (let i = 0, n = input.readInt(true); i < n; i++) {\n\t\t\t\tlet skin = skeletonData.skins[input.readInt(true)];\n\t\t\t\tfor (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n\t\t\t\t\tlet slotIndex = input.readInt(true);\n\t\t\t\t\tfor (let iii = 0, nnn = input.readInt(true); iii < nnn; iii++) {\n\t\t\t\t\t\tlet attachment = skin.getAttachment(slotIndex, input.readStringRef()) as VertexAttachment;\n\t\t\t\t\t\tlet weighted = attachment.bones != null;\n\t\t\t\t\t\tlet vertices = attachment.vertices;\n\t\t\t\t\t\tlet deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n\n\t\t\t\t\t\tlet frameCount = input.readInt(true);\n\t\t\t\t\t\tlet timeline = new DeformTimeline(frameCount);\n\t\t\t\t\t\ttimeline.slotIndex = slotIndex;\n\t\t\t\t\t\ttimeline.attachment = attachment;\n\n\t\t\t\t\t\tfor (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n\t\t\t\t\t\t\tlet time = input.readFloat();\n\t\t\t\t\t\t\tlet deform;\n\t\t\t\t\t\t\tlet end = input.readInt(true);\n\t\t\t\t\t\t\tif (end == 0)\n\t\t\t\t\t\t\t\tdeform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tdeform = Utils.newFloatArray(deformLength);\n\t\t\t\t\t\t\t\tlet start = input.readInt(true);\n\t\t\t\t\t\t\t\tend += start;\n\t\t\t\t\t\t\t\tif (scale == 1) {\n\t\t\t\t\t\t\t\t\tfor (let v = start; v < end; v++)\n\t\t\t\t\t\t\t\t\t\tdeform[v] = input.readFloat();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfor (let v = start; v < end; v++)\n\t\t\t\t\t\t\t\t\t\tdeform[v] = input.readFloat() * scale;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!weighted) {\n\t\t\t\t\t\t\t\t\tfor (let v = 0, vn = deform.length; v < vn; v++)\n\t\t\t\t\t\t\t\t\t\tdeform[v] += vertices[v];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttimeline.setFrame(frameIndex, time, deform);\n\t\t\t\t\t\t\tif (frameIndex < frameCount - 1) this.readCurve(input, frameIndex, timeline);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimelines.push(timeline);\n\t\t\t\t\t\tduration = Math.max(duration, timeline.frames[frameCount - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Draw order timeline.\n\t\t\tlet drawOrderCount = input.readInt(true);\n\t\t\tif (drawOrderCount > 0) {\n\t\t\t\tlet timeline = new DrawOrderTimeline(drawOrderCount);\n\t\t\t\tlet slotCount = skeletonData.slots.length;\n\t\t\t\tfor (let i = 0; i < drawOrderCount; i++) {\n\t\t\t\t\tlet time = input.readFloat();\n\t\t\t\t\tlet offsetCount = input.readInt(true);\n\t\t\t\t\tlet drawOrder = Utils.newArray(slotCount, 0);\n\t\t\t\t\tfor (let ii = slotCount - 1; ii >= 0; ii--)\n\t\t\t\t\t\tdrawOrder[ii] = -1;\n\t\t\t\t\tlet unchanged = Utils.newArray(slotCount - offsetCount, 0);\n\t\t\t\t\tlet originalIndex = 0, unchangedIndex = 0;\n\t\t\t\t\tfor (let ii = 0; ii < offsetCount; ii++) {\n\t\t\t\t\t\tlet slotIndex = input.readInt(true);\n\t\t\t\t\t\t// Collect unchanged items.\n\t\t\t\t\t\twhile (originalIndex != slotIndex)\n\t\t\t\t\t\t\tunchanged[unchangedIndex++] = originalIndex++;\n\t\t\t\t\t\t// Set changed items.\n\t\t\t\t\t\tdrawOrder[originalIndex + input.readInt(true)] = originalIndex++;\n\t\t\t\t\t}\n\t\t\t\t\t// Collect remaining unchanged items.\n\t\t\t\t\twhile (originalIndex < slotCount)\n\t\t\t\t\t\tunchanged[unchangedIndex++] = originalIndex++;\n\t\t\t\t\t// Fill in unchanged items.\n\t\t\t\t\tfor (let ii = slotCount - 1; ii >= 0; ii--)\n\t\t\t\t\t\tif (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\n\t\t\t\t\ttimeline.setFrame(i, time, drawOrder);\n\t\t\t\t}\n\t\t\t\ttimelines.push(timeline);\n\t\t\t\tduration = Math.max(duration, timeline.frames[drawOrderCount - 1]);\n\t\t\t}\n\n\t\t\t// Event timeline.\n\t\t\tlet eventCount = input.readInt(true);\n\t\t\tif (eventCount > 0) {\n\t\t\t\tlet timeline = new EventTimeline(eventCount);\n\t\t\t\tfor (let i = 0; i < eventCount; i++) {\n\t\t\t\t\tlet time = input.readFloat();\n\t\t\t\t\tlet eventData = skeletonData.events[input.readInt(true)];\n\t\t\t\t\tlet event = new Event(time, eventData);\n\t\t\t\t\tevent.intValue = input.readInt(false);\n\t\t\t\t\tevent.floatValue = input.readFloat();\n\t\t\t\t\tevent.stringValue = input.readBoolean() ? input.readString() : eventData.stringValue;\n\t\t\t\t\tif (event.data.audioPath != null) {\n\t\t\t\t\t\tevent.volume = input.readFloat();\n\t\t\t\t\t\tevent.balance = input.readFloat();\n\t\t\t\t\t}\n\t\t\t\t\ttimeline.setFrame(i, event);\n\t\t\t\t}\n\t\t\t\ttimelines.push(timeline);\n\t\t\t\tduration = Math.max(duration, timeline.frames[eventCount - 1]);\n\t\t\t}\n\n\t\t\treturn new Animation(name, timelines, duration);\n\t\t}\n\n\t\tprivate readCurve (input: BinaryInput, frameIndex: number, timeline: CurveTimeline) {\n\t\t\tswitch (input.readByte()) {\n\t\t\tcase SkeletonBinary.CURVE_STEPPED:\n\t\t\t\ttimeline.setStepped(frameIndex);\n\t\t\t\tbreak;\n\t\t\tcase SkeletonBinary.CURVE_BEZIER:\n\t\t\t\tthis.setCurve(timeline, frameIndex, input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tsetCurve (timeline: CurveTimeline, frameIndex: number, cx1: number, cy1: number, cx2: number, cy2: number) {\n\t\t\ttimeline.setCurve(frameIndex, cx1, cy1, cx2, cy2);\n\t\t}\n\t}\n\n\tclass BinaryInput {\n\t\tconstructor(data: Uint8Array, public strings = new Array<string>(), private index: number = 0, private buffer = new DataView(data.buffer)) { \n\n\t\t}\n\n\t\treadByte(): number {\n\t\t\treturn this.buffer.getInt8(this.index++);\n\t\t}\n\n\t\treadShort(): number {\n\t\t\tlet value = this.buffer.getInt16(this.index);\n\t\t\tthis.index += 2;\n\t\t\treturn value;\n\t\t}\n\n\t\treadInt32(): number {\n\t\t\t let value = this.buffer.getInt32(this.index)\n\t\t\t this.index += 4;\n\t\t\t return value;\n\t\t}\n\n\t\treadInt(optimizePositive: boolean) {\n\t\t\tlet b = this.readByte();\n\t\t\tlet result = b & 0x7F;\n\t\t\tif ((b & 0x80) != 0) {\n\t\t\t\tb = this.readByte();\n\t\t\t\tresult |= (b & 0x7F) << 7;\n\t\t\t\tif ((b & 0x80) != 0) {\n\t\t\t\t\tb = this.readByte();\n\t\t\t\t\tresult |= (b & 0x7F) << 14;\n\t\t\t\t\tif ((b & 0x80) != 0) {\n\t\t\t\t\t\tb = this.readByte();\n\t\t\t\t\t\tresult |= (b & 0x7F) << 21;\n\t\t\t\t\t\tif ((b & 0x80) != 0) {\n\t\t\t\t\t\t\tb = this.readByte();\n\t\t\t\t\t\t\tresult |= (b & 0x7F) << 28;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn optimizePositive ? result : ((result >>> 1) ^ -(result & 1));\n\t\t}\n\n\t\treadStringRef (): string {\n\t\t\tlet index = this.readInt(true);\n\t\t\treturn index == 0 ? null : this.strings[index - 1];\n\t\t}\n\n\t\treadString (): string {\n\t\t\tlet byteCount = this.readInt(true);\n\t\t\tswitch (byteCount) {\n\t\t\tcase 0:\n\t\t\t\treturn null;\n\t\t\tcase 1:\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tbyteCount--;\n\t\t\tlet chars = \"\";\n\t\t\tlet charCount = 0;\n\t\t\tfor (let i = 0; i < byteCount;) {\n\t\t\t\tlet b = this.readByte();\n\t\t\t\tswitch (b >> 4) {\n\t\t\t\tcase 12:\n\t\t\t\tcase 13:\n\t\t\t\t\tchars += String.fromCharCode(((b & 0x1F) << 6 | this.readByte() & 0x3F));\n\t\t\t\t\ti += 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 14:\n\t\t\t\t\tchars += String.fromCharCode(((b & 0x0F) << 12 | (this.readByte() & 0x3F) << 6 | this.readByte() & 0x3F));\n\t\t\t\t\ti += 3;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tchars += String.fromCharCode(b);\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn chars;\n\t\t}\n\n\t\treadFloat (): number {\n\t\t\tlet value = this.buffer.getFloat32(this.index);\n\t\t\tthis.index += 4;\n\t\t\treturn value;\n\t\t}\n\n\t\treadBoolean (): boolean {\n\t\t\treturn this.readByte() != 0;\n\t\t}\n\t}\n\n\tclass LinkedMesh {\n\t\tparent: string; skin: string;\n\t\tslotIndex: number;\n\t\tmesh: MeshAttachment;\n\t\tinheritDeform: boolean;\n\n\t\tconstructor (mesh: MeshAttachment, skin: string, slotIndex: number, parent: string, inheritDeform: boolean) {\n\t\t\tthis.mesh = mesh;\n\t\t\tthis.skin = skin;\n\t\t\tthis.slotIndex = slotIndex;\n\t\t\tthis.parent = parent;\n\t\t\tthis.inheritDeform = inheritDeform;\n\t\t}\n\t}\n\n\tclass Vertices {\n\t\tconstructor(public bones: Array<number> = null, public vertices: Array<number> | Float32Array = null) { }\n\t}\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class SkeletonBounds {\n        minX = 0; minY = 0; maxX = 0; maxY = 0;\n        boundingBoxes = new Array<BoundingBoxAttachment>();\n        polygons = new Array<ArrayLike<number>>();\n        private polygonPool = new Pool<ArrayLike<number>>(() => {\n            return Utils.newFloatArray(16);\n        });\n\n        update (skeleton: Skeleton, updateAabb: boolean) {\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            let boundingBoxes = this.boundingBoxes;\n            let polygons = this.polygons;\n            let polygonPool = this.polygonPool;\n            let slots = skeleton.slots;\n            let slotCount = slots.length;\n\n            boundingBoxes.length = 0;\n            polygonPool.freeAll(polygons);\n            polygons.length = 0;\n\n            for (let i = 0; i < slotCount; i++) {\n                let slot = slots[i];\n                if (!slot.bone.active) continue;\n                let attachment = slot.getAttachment();\n                if (attachment instanceof BoundingBoxAttachment) {\n                    let boundingBox = attachment as BoundingBoxAttachment;\n                    boundingBoxes.push(boundingBox);\n\n                    let polygon = polygonPool.obtain();\n                    if (polygon.length != boundingBox.worldVerticesLength) {\n                        polygon = Utils.newFloatArray(boundingBox.worldVerticesLength);\n                    }\n                    polygons.push(polygon);\n                    boundingBox.computeWorldVertices(slot, 0, boundingBox.worldVerticesLength, polygon, 0, 2);\n                }\n            }\n\n            if (updateAabb) {\n                this.aabbCompute();\n            } else {\n                this.minX = Number.POSITIVE_INFINITY;\n                this.minY = Number.POSITIVE_INFINITY;\n                this.maxX = Number.NEGATIVE_INFINITY;\n                this.maxY = Number.NEGATIVE_INFINITY;\n            }\n        }\n\n        aabbCompute () {\n            let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n            let polygons = this.polygons;\n            for (let i = 0, n = polygons.length; i < n; i++) {\n                let polygon = polygons[i];\n                let vertices = polygon;\n                for (let ii = 0, nn = polygon.length; ii < nn; ii += 2) {\n                    let x = vertices[ii];\n                    let y = vertices[ii + 1];\n                    minX = Math.min(minX, x);\n                    minY = Math.min(minY, y);\n                    maxX = Math.max(maxX, x);\n                    maxY = Math.max(maxY, y);\n                }\n            }\n            this.minX = minX;\n            this.minY = minY;\n            this.maxX = maxX;\n            this.maxY = maxY;\n        }\n\n        /** Returns true if the axis aligned bounding box contains the point. */\n        aabbContainsPoint (x: number, y: number) {\n            return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\n        }\n\n        /** Returns true if the axis aligned bounding box intersects the line segment. */\n        aabbIntersectsSegment (x1: number, y1: number, x2: number, y2: number) {\n            let minX = this.minX;\n            let minY = this.minY;\n            let maxX = this.maxX;\n            let maxY = this.maxY;\n            if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\n                return false;\n            let m = (y2 - y1) / (x2 - x1);\n            let y = m * (minX - x1) + y1;\n            if (y > minY && y < maxY) return true;\n            y = m * (maxX - x1) + y1;\n            if (y > minY && y < maxY) return true;\n            let x = (minY - y1) / m + x1;\n            if (x > minX && x < maxX) return true;\n            x = (maxY - y1) / m + x1;\n            if (x > minX && x < maxX) return true;\n            return false;\n        }\n\n        /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\n        aabbIntersectsSkeleton (bounds: SkeletonBounds) {\n            return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\n        }\n\n        /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\n         * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\n        containsPoint (x: number, y: number): BoundingBoxAttachment {\n            let polygons = this.polygons;\n            for (let i = 0, n = polygons.length; i < n; i++)\n                if (this.containsPointPolygon(polygons[i], x, y)) return this.boundingBoxes[i];\n            return null;\n        }\n\n        /** Returns true if the polygon contains the point. */\n        containsPointPolygon (polygon: ArrayLike<number>, x: number, y: number) {\n            let vertices = polygon;\n            let nn = polygon.length;\n\n            let prevIndex = nn - 2;\n            let inside = false;\n            for (let ii = 0; ii < nn; ii += 2) {\n                let vertexY = vertices[ii + 1];\n                let prevY = vertices[prevIndex + 1];\n                if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) {\n                    let vertexX = vertices[ii];\n                    if (vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x) inside = !inside;\n                }\n                prevIndex = ii;\n            }\n            return inside;\n        }\n\n        /** Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\n         * is usually more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns\n         * true. */\n        intersectsSegment (x1: number, y1: number, x2: number, y2: number) {\n            let polygons = this.polygons;\n            for (let i = 0, n = polygons.length; i < n; i++)\n                if (this.intersectsSegmentPolygon(polygons[i], x1, y1, x2, y2)) return this.boundingBoxes[i];\n            return null;\n        }\n\n        /** Returns true if the polygon contains any part of the line segment. */\n        intersectsSegmentPolygon (polygon: ArrayLike<number>, x1: number, y1: number, x2: number, y2: number) {\n            let vertices = polygon;\n            let nn = polygon.length;\n\n            let width12 = x1 - x2, height12 = y1 - y2;\n            let det1 = x1 * y2 - y1 * x2;\n            let x3 = vertices[nn - 2], y3 = vertices[nn - 1];\n            for (let ii = 0; ii < nn; ii += 2) {\n                let x4 = vertices[ii], y4 = vertices[ii + 1];\n                let det2 = x3 * y4 - y3 * x4;\n                let width34 = x3 - x4, height34 = y3 - y4;\n                let det3 = width12 * height34 - height12 * width34;\n                let x = (det1 * width34 - width12 * det2) / det3;\n                if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {\n                    let y = (det1 * height34 - height12 * det2) / det3;\n                    if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\n                }\n                x3 = x4;\n                y3 = y4;\n            }\n            return false;\n        }\n\n        /** Returns the polygon for the specified bounding box, or null. */\n        getPolygon (boundingBox: BoundingBoxAttachment) {\n            if (boundingBox == null) throw new Error(\"boundingBox cannot be null.\");\n            let index = this.boundingBoxes.indexOf(boundingBox);\n            return index == -1 ? null : this.polygons[index];\n        }\n\n        getWidth () {\n            return this.maxX - this.minX;\n        }\n\n        getHeight () {\n            return this.maxY - this.minY;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n\texport class SkeletonClipping {\n\t\tprivate triangulator = new Triangulator();\n\t\tprivate clippingPolygon = new Array<number>();\n\t\tprivate clipOutput = new Array<number>();\n\t\tclippedVertices = new Array<number>();\n\t\tclippedTriangles = new Array<number>();\n\t\tprivate scratch = new Array<number>();\n\n\t\tprivate clipAttachment: ClippingAttachment;\n\t\tprivate clippingPolygons: Array<Array<number>>;\n\n\t\tclipStart (slot: Slot, clip: ClippingAttachment): number {\n\t\t\tif (this.clipAttachment != null) return 0;\n\t\t\tthis.clipAttachment = clip;\n\n\t\t\tlet n = clip.worldVerticesLength;\n\t\t\tlet vertices = Utils.setArraySize(this.clippingPolygon, n);\n\t\t\tclip.computeWorldVertices(slot, 0, n, vertices, 0, 2);\n\t\t\tlet clippingPolygon = this.clippingPolygon;\n\t\t\tSkeletonClipping.makeClockwise(clippingPolygon);\n\t\t\tlet clippingPolygons = this.clippingPolygons = this.triangulator.decompose(clippingPolygon, this.triangulator.triangulate(clippingPolygon));\n\t\t\tfor (let i = 0, n = clippingPolygons.length; i < n; i++) {\n\t\t\t\tlet polygon = clippingPolygons[i];\n\t\t\t\tSkeletonClipping.makeClockwise(polygon);\n\t\t\t\tpolygon.push(polygon[0]);\n\t\t\t\tpolygon.push(polygon[1]);\n\t\t\t}\n\n\t\t\treturn clippingPolygons.length;\n\t\t}\n\n\t\tclipEndWithSlot (slot: Slot) {\n\t\t\tif (this.clipAttachment != null && this.clipAttachment.endSlot == slot.data) this.clipEnd();\n\t\t}\n\n\t\tclipEnd () {\n\t\t\tif (this.clipAttachment == null) return;\n\t\t\tthis.clipAttachment = null;\n\t\t\tthis.clippingPolygons = null;\n\t\t\tthis.clippedVertices.length = 0;\n\t\t\tthis.clippedTriangles.length = 0;\n\t\t\tthis.clippingPolygon.length = 0;\n\t\t}\n\n\t\tisClipping (): boolean {\n\t\t\treturn this.clipAttachment != null;\n\t\t}\n\n\t\tclipTriangles (vertices: ArrayLike<number>, verticesLength: number, triangles: ArrayLike<number>, trianglesLength: number, uvs: ArrayLike<number>,\n\t\t\tlight: Color, dark: Color, twoColor: boolean) {\n\n\t\t\tlet clipOutput = this.clipOutput, clippedVertices = this.clippedVertices;\n\t\t\tlet clippedTriangles = this.clippedTriangles;\n\t\t\tlet polygons = this.clippingPolygons;\n\t\t\tlet polygonsCount = this.clippingPolygons.length;\n\t\t\tlet vertexSize = twoColor ? 12 : 8;\n\n\t\t\tlet index = 0;\n\t\t\tclippedVertices.length = 0;\n\t\t\tclippedTriangles.length = 0;\n\t\t\touter:\n\t\t\tfor (let i = 0; i < trianglesLength; i += 3) {\n\t\t\t\tlet vertexOffset = triangles[i] << 1;\n\t\t\t\tlet x1 = vertices[vertexOffset], y1 = vertices[vertexOffset + 1];\n\t\t\t\tlet u1 = uvs[vertexOffset], v1 = uvs[vertexOffset + 1];\n\n\t\t\t\tvertexOffset = triangles[i + 1] << 1;\n\t\t\t\tlet x2 = vertices[vertexOffset], y2 = vertices[vertexOffset + 1];\n\t\t\t\tlet u2 = uvs[vertexOffset], v2 = uvs[vertexOffset + 1];\n\n\t\t\t\tvertexOffset = triangles[i + 2] << 1;\n\t\t\t\tlet x3 = vertices[vertexOffset], y3 = vertices[vertexOffset + 1];\n\t\t\t\tlet u3 = uvs[vertexOffset], v3 = uvs[vertexOffset + 1];\n\n\t\t\t\tfor (let p = 0; p < polygonsCount; p++) {\n\t\t\t\t\tlet s = clippedVertices.length;\n\t\t\t\t\tif (this.clip(x1, y1, x2, y2, x3, y3, polygons[p], clipOutput)) {\n\t\t\t\t\t\tlet clipOutputLength = clipOutput.length;\n\t\t\t\t\t\tif (clipOutputLength == 0) continue;\n\t\t\t\t\t\tlet d0 = y2 - y3, d1 = x3 - x2, d2 = x1 - x3, d4 = y3 - y1;\n\t\t\t\t\t\tlet d = 1 / (d0 * d2 + d1 * (y1 - y3));\n\n\t\t\t\t\t\tlet clipOutputCount = clipOutputLength >> 1;\n\t\t\t\t\t\tlet clipOutputItems = this.clipOutput;\n\t\t\t\t\t\tlet clippedVerticesItems = Utils.setArraySize(clippedVertices, s + clipOutputCount * vertexSize);\n\t\t\t\t\t\tfor (let ii = 0; ii < clipOutputLength; ii += 2) {\n\t\t\t\t\t\t\tlet x = clipOutputItems[ii], y = clipOutputItems[ii + 1];\n\t\t\t\t\t\t\tclippedVerticesItems[s] = x;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 1] = y;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 2] = light.r;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 3] = light.g;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 4] = light.b;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 5] = light.a;\n\t\t\t\t\t\t\tlet c0 = x - x3, c1 = y - y3;\n\t\t\t\t\t\t\tlet a = (d0 * c0 + d1 * c1) * d;\n\t\t\t\t\t\t\tlet b = (d4 * c0 + d2 * c1) * d;\n\t\t\t\t\t\t\tlet c = 1 - a - b;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 6] = u1 * a + u2 * b + u3 * c;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 7] = v1 * a + v2 * b + v3 * c;\n\t\t\t\t\t\t\tif (twoColor) {\n\t\t\t\t\t\t\t\tclippedVerticesItems[s + 8] = dark.r;\n\t\t\t\t\t\t\t\tclippedVerticesItems[s + 9] = dark.g;\n\t\t\t\t\t\t\t\tclippedVerticesItems[s + 10] = dark.b;\n\t\t\t\t\t\t\t\tclippedVerticesItems[s + 11] = dark.a;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ts += vertexSize;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ts = clippedTriangles.length;\n\t\t\t\t\t\tlet clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3 * (clipOutputCount - 2));\n\t\t\t\t\t\tclipOutputCount--;\n\t\t\t\t\t\tfor (let ii = 1; ii < clipOutputCount; ii++) {\n\t\t\t\t\t\t\tclippedTrianglesItems[s] = index;\n\t\t\t\t\t\t\tclippedTrianglesItems[s + 1] = (index + ii);\n\t\t\t\t\t\t\tclippedTrianglesItems[s + 2] = (index + ii + 1);\n\t\t\t\t\t\t\ts += 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tindex += clipOutputCount + 1;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet clippedVerticesItems = Utils.setArraySize(clippedVertices, s + 3 * vertexSize);\n\t\t\t\t\t\tclippedVerticesItems[s] = x1;\n\t\t\t\t\t\tclippedVerticesItems[s + 1] = y1;\n\t\t\t\t\t\tclippedVerticesItems[s + 2] = light.r;\n\t\t\t\t\t\tclippedVerticesItems[s + 3] = light.g;\n\t\t\t\t\t\tclippedVerticesItems[s + 4] = light.b;\n\t\t\t\t\t\tclippedVerticesItems[s + 5] = light.a;\n\t\t\t\t\t\tif (!twoColor) {\n\t\t\t\t\t\t\tclippedVerticesItems[s + 6] = u1;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 7] = v1;\n\n\t\t\t\t\t\t\tclippedVerticesItems[s + 8] = x2;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 9] = y2;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 10] = light.r;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 11] = light.g;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 12] = light.b;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 13] = light.a;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 14] = u2;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 15] = v2;\n\n\t\t\t\t\t\t\tclippedVerticesItems[s + 16] = x3;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 17] = y3;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 18] = light.r;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 19] = light.g;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 20] = light.b;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 21] = light.a;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 22] = u3;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 23] = v3;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclippedVerticesItems[s + 6] = u1;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 7] = v1;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 8] = dark.r;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 9] = dark.g;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 10] = dark.b;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 11] = dark.a;\n\n\t\t\t\t\t\t\tclippedVerticesItems[s + 12] = x2;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 13] = y2;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 14] = light.r;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 15] = light.g;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 16] = light.b;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 17] = light.a;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 18] = u2;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 19] = v2;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 20] = dark.r;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 21] = dark.g;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 22] = dark.b;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 23] = dark.a;\n\n\t\t\t\t\t\t\tclippedVerticesItems[s + 24] = x3;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 25] = y3;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 26] = light.r;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 27] = light.g;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 28] = light.b;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 29] = light.a;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 30] = u3;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 31] = v3;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 32] = dark.r;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 33] = dark.g;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 34] = dark.b;\n\t\t\t\t\t\t\tclippedVerticesItems[s + 35] = dark.a;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ts = clippedTriangles.length;\n\t\t\t\t\t\tlet clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3);\n\t\t\t\t\t\tclippedTrianglesItems[s] = index;\n\t\t\t\t\t\tclippedTrianglesItems[s + 1] = (index + 1);\n\t\t\t\t\t\tclippedTrianglesItems[s + 2] = (index + 2);\n\t\t\t\t\t\tindex += 3;\n\t\t\t\t\t\tcontinue outer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/** Clips the input triangle against the convex, clockwise clipping area. If the triangle lies entirely within the clipping\n\t\t * area, false is returned. The clipping area must duplicate the first vertex at the end of the vertices list. */\n\t\tclip (x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, clippingArea: Array<number>, output: Array<number>) {\n\t\t\tlet originalOutput = output;\n\t\t\tlet clipped = false;\n\n\t\t\t// Avoid copy at the end.\n\t\t\tlet input: Array<number> = null;\n\t\t\tif (clippingArea.length % 4 >= 2) {\n\t\t\t\tinput = output;\n\t\t\t\toutput = this.scratch;\n\t\t\t} else\n\t\t\t\tinput = this.scratch;\n\n\t\t\tinput.length = 0;\n\t\t\tinput.push(x1);\n\t\t\tinput.push(y1);\n\t\t\tinput.push(x2);\n\t\t\tinput.push(y2);\n\t\t\tinput.push(x3);\n\t\t\tinput.push(y3);\n\t\t\tinput.push(x1);\n\t\t\tinput.push(y1);\n\t\t\toutput.length = 0;\n\n\t\t\tlet clippingVertices = clippingArea;\n\t\t\tlet clippingVerticesLast = clippingArea.length - 4;\n\t\t\tfor (let i = 0;; i += 2) {\n\t\t\t\tlet edgeX = clippingVertices[i], edgeY = clippingVertices[i + 1];\n\t\t\t\tlet edgeX2 = clippingVertices[i + 2], edgeY2 = clippingVertices[i + 3];\n\t\t\t\tlet deltaX = edgeX - edgeX2, deltaY = edgeY - edgeY2;\n\n\t\t\t\tlet inputVertices = input;\n\t\t\t\tlet inputVerticesLength = input.length - 2, outputStart = output.length;\n\t\t\t\tfor (let ii = 0; ii < inputVerticesLength; ii += 2) {\n\t\t\t\t\tlet inputX = inputVertices[ii], inputY = inputVertices[ii + 1];\n\t\t\t\t\tlet inputX2 = inputVertices[ii + 2], inputY2 = inputVertices[ii + 3];\n\t\t\t\t\tlet side2 = deltaX * (inputY2 - edgeY2) - deltaY * (inputX2 - edgeX2) > 0;\n\t\t\t\t\tif (deltaX * (inputY - edgeY2) - deltaY * (inputX - edgeX2) > 0) {\n\t\t\t\t\t\tif (side2) { // v1 inside, v2 inside\n\t\t\t\t\t\t\toutput.push(inputX2);\n\t\t\t\t\t\t\toutput.push(inputY2);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// v1 inside, v2 outside\n\t\t\t\t\t\tlet c0 = inputY2 - inputY, c2 = inputX2 - inputX;\n\t\t\t\t\t\tlet ua = (c2 * (edgeY - inputY) - c0 * (edgeX - inputX)) / (c0 * (edgeX2 - edgeX) - c2 * (edgeY2 - edgeY));\n\t\t\t\t\t\toutput.push(edgeX + (edgeX2 - edgeX) * ua);\n\t\t\t\t\t\toutput.push(edgeY + (edgeY2 - edgeY) * ua);\n\t\t\t\t\t} else if (side2) { // v1 outside, v2 inside\n\t\t\t\t\t\tlet c0 = inputY2 - inputY, c2 = inputX2 - inputX;\n\t\t\t\t\t\tlet ua = (c2 * (edgeY - inputY) - c0 * (edgeX - inputX)) / (c0 * (edgeX2 - edgeX) - c2 * (edgeY2 - edgeY));\n\t\t\t\t\t\toutput.push(edgeX + (edgeX2 - edgeX) * ua);\n\t\t\t\t\t\toutput.push(edgeY + (edgeY2 - edgeY) * ua);\n\t\t\t\t\t\toutput.push(inputX2);\n\t\t\t\t\t\toutput.push(inputY2);\n\t\t\t\t\t}\n\t\t\t\t\tclipped = true;\n\t\t\t\t}\n\n\t\t\t\tif (outputStart == output.length) { // All edges outside.\n\t\t\t\t\toriginalOutput.length = 0;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\toutput.push(output[0]);\n\t\t\t\toutput.push(output[1]);\n\n\t\t\t\tif (i == clippingVerticesLast) break;\n\t\t\t\tlet temp = output;\n\t\t\t\toutput = input;\n\t\t\t\toutput.length = 0;\n\t\t\t\tinput = temp;\n\t\t\t}\n\n\t\t\tif (originalOutput != output) {\n\t\t\t\toriginalOutput.length = 0;\n\t\t\t\tfor (let i = 0, n = output.length - 2; i < n; i++)\n\t\t\t\t\toriginalOutput[i] = output[i];\n\t\t\t} else\n\t\t\t\toriginalOutput.length = originalOutput.length - 2;\n\n\t\t\treturn clipped;\n\t\t}\n\n\t\tpublic static makeClockwise (polygon: ArrayLike<number>) {\n\t\t\tlet vertices = polygon;\n\t\t\tlet verticeslength = polygon.length;\n\n\t\t\tlet area = vertices[verticeslength - 2] * vertices[1] - vertices[0] * vertices[verticeslength - 1], p1x = 0, p1y = 0, p2x = 0, p2y = 0;\n\t\t\tfor (let i = 0, n = verticeslength - 3; i < n; i += 2) {\n\t\t\t\tp1x = vertices[i];\n\t\t\t\tp1y = vertices[i + 1];\n\t\t\t\tp2x = vertices[i + 2];\n\t\t\t\tp2y = vertices[i + 3];\n\t\t\t\tarea += p1x * p2y - p2x * p1y;\n\t\t\t}\n\t\t\tif (area < 0) return;\n\n\t\t\tfor (let i = 0, lastX = verticeslength - 2, n = verticeslength >> 1; i < n; i += 2) {\n\t\t\t\tlet x = vertices[i], y = vertices[i + 1];\n\t\t\t\tlet other = lastX - i;\n\t\t\t\tvertices[i] = vertices[other];\n\t\t\t\tvertices[i + 1] = vertices[other + 1];\n\t\t\t\tvertices[other] = x;\n\t\t\t\tvertices[other + 1] = y;\n\t\t\t}\n\t\t}\n\t}\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class SkeletonData {\n        name: string;\n        bones = new Array<BoneData>(); // Ordered parents first.\n        slots = new Array<SlotData>(); // Setup pose draw order.\n        skins = new Array<Skin>();\n        defaultSkin: Skin;\n        events = new Array<EventData>();\n        animations = new Array<Animation>();\n        ikConstraints = new Array<IkConstraintData>();\n        transformConstraints = new Array<TransformConstraintData>();\n        pathConstraints = new Array<PathConstraintData>();\n        x: number; y: number; width: number; height: number;\n        version: string; hash: string;\n\n        // Nonessential\n        fps = 0;\n        imagesPath: string;\n        audioPath: string;\n\n        findBone (boneName: string) {\n            if (boneName == null) throw new Error(\"boneName cannot be null.\");\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                if (bone.name == boneName) return bone;\n            }\n            return null;\n        }\n\n        findBoneIndex (boneName: string) {\n            if (boneName == null) throw new Error(\"boneName cannot be null.\");\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++)\n                if (bones[i].name == boneName) return i;\n            return -1;\n        }\n\n        findSlot (slotName: string) {\n            if (slotName == null) throw new Error(\"slotName cannot be null.\");\n            let slots = this.slots;\n            for (let i = 0, n = slots.length; i < n; i++) {\n                let slot = slots[i];\n                if (slot.name == slotName) return slot;\n            }\n            return null;\n        }\n\n        findSlotIndex (slotName: string) {\n            if (slotName == null) throw new Error(\"slotName cannot be null.\");\n            let slots = this.slots;\n            for (let i = 0, n = slots.length; i < n; i++)\n                if (slots[i].name == slotName) return i;\n            return -1;\n        }\n\n        findSkin (skinName: string) {\n            if (skinName == null) throw new Error(\"skinName cannot be null.\");\n            let skins = this.skins;\n            for (let i = 0, n = skins.length; i < n; i++) {\n                let skin = skins[i];\n                if (skin.name == skinName) return skin;\n            }\n            return null;\n        }\n\n        findEvent (eventDataName: string) {\n            if (eventDataName == null) throw new Error(\"eventDataName cannot be null.\");\n            let events = this.events;\n            for (let i = 0, n = events.length; i < n; i++) {\n                let event = events[i];\n                if (event.name == eventDataName) return event;\n            }\n            return null;\n        }\n\n        findAnimation (animationName: string) {\n            if (animationName == null) throw new Error(\"animationName cannot be null.\");\n            let animations = this.animations;\n            for (let i = 0, n = animations.length; i < n; i++) {\n                let animation = animations[i];\n                if (animation.name == animationName) return animation;\n            }\n            return null;\n        }\n\n        findIkConstraint (constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let ikConstraints = this.ikConstraints;\n            for (let i = 0, n = ikConstraints.length; i < n; i++) {\n                let constraint = ikConstraints[i];\n                if (constraint.name == constraintName) return constraint;\n            }\n            return null;\n        }\n\n        findTransformConstraint (constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let transformConstraints = this.transformConstraints;\n            for (let i = 0, n = transformConstraints.length; i < n; i++) {\n                let constraint = transformConstraints[i];\n                if (constraint.name == constraintName) return constraint;\n            }\n            return null;\n        }\n\n        findPathConstraint (constraintName: string) {\n            if (constraintName == null) throw new Error(\"constraintName cannot be null.\");\n            let pathConstraints = this.pathConstraints;\n            for (let i = 0, n = pathConstraints.length; i < n; i++) {\n                let constraint = pathConstraints[i];\n                if (constraint.name == constraintName) return constraint;\n            }\n            return null;\n        }\n\n        findPathConstraintIndex (pathConstraintName: string) {\n            if (pathConstraintName == null) throw new Error(\"pathConstraintName cannot be null.\");\n            let pathConstraints = this.pathConstraints;\n            for (let i = 0, n = pathConstraints.length; i < n; i++)\n                if (pathConstraints[i].name == pathConstraintName) return i;\n            return -1;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    /**\n     * pixi-spine gives option to not fail at certain parsing errors\n     * spine-ts fails here\n     */\n    export let FAIL_ON_NON_EXISTING_SKIN = false;\n\n    export class SkeletonJson {\n        attachmentLoader: AttachmentLoader;\n        scale = 1;\n        private linkedMeshes = new Array<LinkedMesh>();\n\n        constructor (attachmentLoader: AttachmentLoader) {\n            this.attachmentLoader = attachmentLoader;\n        }\n\n        readSkeletonData (json: string | any): SkeletonData {\n            let scale = this.scale;\n            let skeletonData = new SkeletonData();\n            let root = typeof(json) === \"string\" ? JSON.parse(json) : json;\n\n            // Skeleton\n            let skeletonMap = root.skeleton;\n            if (skeletonMap != null) {\n                skeletonData.hash = skeletonMap.hash;\n                skeletonData.version = skeletonMap.spine;\n                if (skeletonData.version.substr(0, 3) !== '3.8') {\n                    let error = `PixiJS Spine plugin supports only format for Spine 3.8. Your model has version ${skeletonMap.spine}. Please look in pixi-spine repository README for another branch.`;\n                    console.error(error);\n                }\n                if (skeletonData.version === '3.8.75')\n                {\n                    let error = `Unsupported skeleton data, 3.8.75 is deprecated, please export with a newer version of Spine.`;\n                    console.error(error);\n                }\n                skeletonData.x = skeletonMap.x;\n                skeletonData.y = skeletonMap.y;\n                skeletonData.width = skeletonMap.width;\n                skeletonData.height = skeletonMap.height;\n                skeletonData.fps = skeletonMap.fps;\n                skeletonData.imagesPath = skeletonMap.images;\n            }\n\n            // Bones\n            if (root.bones) {\n                for (let i = 0; i < root.bones.length; i++) {\n                    let boneMap = root.bones[i];\n\n                    let parent: BoneData = null;\n                    let parentName: string = this.getValue(boneMap, \"parent\", null);\n                    if (parentName != null) {\n                        parent = skeletonData.findBone(parentName);\n                        if (parent == null) throw new Error(\"Parent bone not found: \" + parentName);\n                    }\n                    let data = new BoneData(skeletonData.bones.length, boneMap.name, parent);\n                    data.length = this.getValue(boneMap, \"length\", 0) * scale;\n                    data.x = this.getValue(boneMap, \"x\", 0) * scale;\n                    data.y = this.getValue(boneMap, \"y\", 0) * scale;\n                    data.rotation = this.getValue(boneMap, \"rotation\", 0);\n                    data.scaleX = this.getValue(boneMap, \"scaleX\", 1);\n                    data.scaleY = this.getValue(boneMap, \"scaleY\", 1);\n                    data.shearX = this.getValue(boneMap, \"shearX\", 0);\n                    data.shearY = this.getValue(boneMap, \"shearY\", 0);\n                    data.transformMode = SkeletonJson.transformModeFromString(this.getValue(boneMap, \"transform\", \"normal\"));\n                    data.skinRequired = this.getValue(boneMap, \"skin\", false);\n\n                    skeletonData.bones.push(data);\n                }\n            }\n\n            // Slots.\n            if (root.slots) {\n                for (let i = 0; i < root.slots.length; i++) {\n                    let slotMap = root.slots[i];\n                    let slotName: string = slotMap.name;\n                    let boneName: string = slotMap.bone;\n                    let boneData = skeletonData.findBone(boneName);\n                    if (boneData == null) throw new Error(\"Slot bone not found: \" + boneName);\n                    let data = new SlotData(skeletonData.slots.length, slotName, boneData);\n\n                    let color: string = this.getValue(slotMap, \"color\", null);\n                    if (color != null) data.color.setFromString(color);\n\n                    let dark: string = this.getValue(slotMap, \"dark\", null);\n                    if (dark != null) {\n                        data.darkColor = new Color(1, 1, 1, 1);\n                        data.darkColor.setFromString(dark);\n                    }\n\n                    data.attachmentName = this.getValue(slotMap, \"attachment\", null);\n                    data.blendMode = SkeletonJson.blendModeFromString(this.getValue(slotMap, \"blend\", \"normal\"));\n                    skeletonData.slots.push(data);\n                }\n            }\n\n            // IK constraints\n            if (root.ik) {\n                for (let i = 0; i < root.ik.length; i++) {\n                    let constraintMap = root.ik[i];\n                    let data = new IkConstraintData(constraintMap.name);\n                    data.order = this.getValue(constraintMap, \"order\", 0);\n                    data.skinRequired = this.getValue(constraintMap, \"skin\", false);\n\n                    for (let j = 0; j < constraintMap.bones.length; j++) {\n                        let boneName = constraintMap.bones[j];\n                        let bone = skeletonData.findBone(boneName);\n                        if (bone == null) throw new Error(\"IK bone not found: \" + boneName);\n                        data.bones.push(bone);\n                    }\n\n                    let targetName: string = constraintMap.target;\n                    data.target = skeletonData.findBone(targetName);\n                    if (data.target == null) throw new Error(\"IK target bone not found: \" + targetName);\n\n                    data.mix = this.getValue(constraintMap, \"mix\", 1);\n                    data.softness = this.getValue(constraintMap, \"softness\", 0) * scale;\n                    data.bendDirection = this.getValue(constraintMap, \"bendPositive\", true) ? 1 : -1;\n                    data.compress = this.getValue(constraintMap, \"compress\", false);\n                    data.stretch = this.getValue(constraintMap, \"stretch\", false);\n                    data.uniform = this.getValue(constraintMap, \"uniform\", false);\n\n                    skeletonData.ikConstraints.push(data);\n                }\n            }\n\n            // Transform constraints.\n            if (root.transform) {\n                for (let i = 0; i < root.transform.length; i++) {\n                    let constraintMap = root.transform[i];\n                    let data = new TransformConstraintData(constraintMap.name);\n                    data.order = this.getValue(constraintMap, \"order\", 0);\n                    data.skinRequired = this.getValue(constraintMap, \"skin\", false);\n\n                    for (let j = 0; j < constraintMap.bones.length; j++) {\n                        let boneName = constraintMap.bones[j];\n                        let bone = skeletonData.findBone(boneName);\n                        if (bone == null) throw new Error(\"Transform constraint bone not found: \" + boneName);\n                        data.bones.push(bone);\n                    }\n\n                    let targetName: string = constraintMap.target;\n                    data.target = skeletonData.findBone(targetName);\n                    if (data.target == null) throw new Error(\"Transform constraint target bone not found: \" + targetName);\n\n                    data.local = this.getValue(constraintMap, \"local\", false);\n                    data.relative = this.getValue(constraintMap, \"relative\", false);\n                    data.offsetRotation = this.getValue(constraintMap, \"rotation\", 0);\n                    data.offsetX = this.getValue(constraintMap, \"x\", 0) * scale;\n                    data.offsetY = this.getValue(constraintMap, \"y\", 0) * scale;\n                    data.offsetScaleX = this.getValue(constraintMap, \"scaleX\", 0);\n                    data.offsetScaleY = this.getValue(constraintMap, \"scaleY\", 0);\n                    data.offsetShearY = this.getValue(constraintMap, \"shearY\", 0);\n\n                    data.rotateMix = this.getValue(constraintMap, \"rotateMix\", 1);\n                    data.translateMix = this.getValue(constraintMap, \"translateMix\", 1);\n                    data.scaleMix = this.getValue(constraintMap, \"scaleMix\", 1);\n                    data.shearMix = this.getValue(constraintMap, \"shearMix\", 1);\n\n                    skeletonData.transformConstraints.push(data);\n                }\n            }\n\n            // Path constraints.\n            if (root.path) {\n                for (let i = 0; i < root.path.length; i++) {\n                    let constraintMap = root.path[i];\n                    let data = new PathConstraintData(constraintMap.name);\n                    data.order = this.getValue(constraintMap, \"order\", 0);\n                    data.skinRequired = this.getValue(constraintMap, \"skin\", false);\n\n                    for (let j = 0; j < constraintMap.bones.length; j++) {\n                        let boneName = constraintMap.bones[j];\n                        let bone = skeletonData.findBone(boneName);\n                        if (bone == null) throw new Error(\"Transform constraint bone not found: \" + boneName);\n                        data.bones.push(bone);\n                    }\n\n                    let targetName: string = constraintMap.target;\n                    data.target = skeletonData.findSlot(targetName);\n                    if (data.target == null) throw new Error(\"Path target slot not found: \" + targetName);\n\n                    data.positionMode = SkeletonJson.positionModeFromString(this.getValue(constraintMap, \"positionMode\", \"percent\"));\n                    data.spacingMode = SkeletonJson.spacingModeFromString(this.getValue(constraintMap, \"spacingMode\", \"length\"));\n                    data.rotateMode = SkeletonJson.rotateModeFromString(this.getValue(constraintMap, \"rotateMode\", \"tangent\"));\n                    data.offsetRotation = this.getValue(constraintMap, \"rotation\", 0);\n                    data.position = this.getValue(constraintMap, \"position\", 0);\n                    if (data.positionMode == PositionMode.Fixed) data.position *= scale;\n                    data.spacing = this.getValue(constraintMap, \"spacing\", 0);\n                    if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\n                    data.rotateMix = this.getValue(constraintMap, \"rotateMix\", 1);\n                    data.translateMix = this.getValue(constraintMap, \"translateMix\", 1);\n\n                    skeletonData.pathConstraints.push(data);\n                }\n            }\n\n            // Skins.\n            if (root.skins) {\n                for (let i = 0; i < root.skins.length; i++) {\n                    let skinMap = root.skins[i]\n                    let skin = new Skin(skinMap.name);\n\n                    if (skinMap.bones) {\n                        for (let ii = 0; ii < skinMap.bones.length; ii++) {\n                            let bone = skeletonData.findBone(skinMap.bones[ii]);\n                            if (bone == null) throw new Error(\"Skin bone not found: \" + skinMap.bones[i]);\n                            skin.bones.push(bone);\n                        }\n                    }\n\n                    if (skinMap.ik) {\n                        for (let ii = 0; ii < skinMap.ik.length; ii++) {\n                            let constraint = skeletonData.findIkConstraint(skinMap.ik[ii]);\n                            if (constraint == null) throw new Error(\"Skin IK constraint not found: \" + skinMap.ik[i]);\n                            skin.constraints.push(constraint);\n                        }\n                    }\n\n                    if (skinMap.transform) {\n                        for (let ii = 0; ii < skinMap.transform.length; ii++) {\n                            let constraint = skeletonData.findTransformConstraint(skinMap.transform[ii]);\n                            if (constraint == null) throw new Error(\"Skin transform constraint not found: \" + skinMap.transform[i]);\n                            skin.constraints.push(constraint);\n                        }\n                    }\n\n                    if (skinMap.path) {\n                        for (let ii = 0; ii < skinMap.path.length; ii++) {\n                            let constraint = skeletonData.findPathConstraint(skinMap.path[ii]);\n                            if (constraint == null) throw new Error(\"Skin path constraint not found: \" + skinMap.path[i]);\n                            skin.constraints.push(constraint);\n                        }\n                    }\n\n                    for (let slotName in skinMap.attachments) {\n                        let slot = skeletonData.findSlot(slotName);\n                        if (slot == null) throw new Error(\"Slot not found: \" + slotName);\n                        let slotMap = skinMap.attachments[slotName];\n                        for (let entryName in slotMap) {\n                            let attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);\n                            if (attachment != null) skin.setAttachment(slot.index, entryName, attachment);\n                        }\n                    }\n                    skeletonData.skins.push(skin);\n                    if (skin.name == \"default\") skeletonData.defaultSkin = skin;\n                }\n            }\n\n            // Linked meshes.\n            for (let i = 0, n = this.linkedMeshes.length; i < n; i++) {\n                let linkedMesh = this.linkedMeshes[i];\n                let skin = linkedMesh.skin == null ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n                if (skin == null) throw new Error(\"Skin not found: \" + linkedMesh.skin);\n                let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n                if (parent == null) throw new Error(\"Parent mesh not found: \" + linkedMesh.parent);\n                linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? <VertexAttachment>parent : <VertexAttachment>linkedMesh.mesh;\n                linkedMesh.mesh.setParentMesh(<MeshAttachment> parent);\n                // linkedMesh.mesh.updateUVs();\n            }\n            this.linkedMeshes.length = 0;\n\n            // Events.\n            if (root.events) {\n                for (let eventName in root.events) {\n                    let eventMap = root.events[eventName];\n                    let data = new EventData(eventName);\n                    data.intValue = this.getValue(eventMap, \"int\", 0);\n                    data.floatValue = this.getValue(eventMap, \"float\", 0);\n                    data.stringValue = this.getValue(eventMap, \"string\", \"\");\n                    data.audioPath = this.getValue(eventMap, \"audio\", null);\n                    if (data.audioPath != null) {\n                        data.volume = this.getValue(eventMap, \"volume\", 1);\n                        data.balance = this.getValue(eventMap, \"balance\", 0);\n                    }\n                    skeletonData.events.push(data);\n                }\n            }\n\n            // Animations.\n            if (root.animations) {\n                for (let animationName in root.animations) {\n                    let animationMap = root.animations[animationName];\n                    this.readAnimation(animationMap, animationName, skeletonData);\n                }\n            }\n\n            return skeletonData;\n        }\n\n        readAttachment (map: any, skin: Skin, slotIndex: number, name: string, skeletonData: SkeletonData): Attachment {\n            let scale = this.scale;\n            name = this.getValue(map, \"name\", name);\n\n            let type = this.getValue(map, \"type\", \"region\");\n\n            switch (type) {\n                case \"region\": {\n                    let path = this.getValue(map, \"path\", name);\n                    let region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n                    if (region == null) return null;\n                    region.path = path;\n                    region.x = this.getValue(map, \"x\", 0) * scale;\n                    region.y = this.getValue(map, \"y\", 0) * scale;\n                    region.scaleX = this.getValue(map, \"scaleX\", 1);\n                    region.scaleY = this.getValue(map, \"scaleY\", 1);\n                    region.rotation = this.getValue(map, \"rotation\", 0);\n                    region.width = map.width * scale;\n                    region.height = map.height * scale;\n\n                    let color: string = this.getValue(map, \"color\", null);\n                    if (color != null) region.color.setFromString(color);\n\n                    // region.updateOffset();\n                    return region;\n                }\n                case \"boundingbox\": {\n                    let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n                    if (box == null) return null;\n                    this.readVertices(map, box, map.vertexCount << 1);\n                    let color: string = this.getValue(map, \"color\", null);\n                    if (color != null) box.color.setFromString(color);\n                    return box;\n                }\n                case \"mesh\":\n                case \"linkedmesh\": {\n                    let path = this.getValue(map, \"path\", name);\n                    let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n                    if (mesh == null) return null;\n                    mesh.path = path;\n\n                    let color = this.getValue(map, \"color\", null);\n                    if (color != null) mesh.color.setFromString(color);\n\n                    mesh.width = this.getValue(map, \"width\", 0) * scale;\n                    mesh.height = this.getValue(map, \"height\", 0) * scale;\n\n                    let parent: string = this.getValue(map, \"parent\", null);\n                    if (parent != null) {\n                        this.linkedMeshes.push(new LinkedMesh(mesh, <string> this.getValue(map, \"skin\", null), slotIndex, parent, this.getValue(map, \"deform\", true)));\n                        return mesh;\n                    }\n\n                    let uvs: Array<number> = map.uvs;\n                    this.readVertices(map, mesh, uvs.length);\n                    mesh.triangles = map.triangles;\n                    mesh.regionUVs = new Float32Array(uvs);\n                    // mesh.updateUVs();\n\n                    mesh.edges = this.getValue(map, \"edges\", null);\n                    mesh.hullLength = this.getValue(map, \"hull\", 0) * 2;\n                    return mesh;\n                }\n                case \"path\": {\n                    let path = this.attachmentLoader.newPathAttachment(skin, name);\n                    if (path == null) return null;\n                    path.closed = this.getValue(map, \"closed\", false);\n                    path.constantSpeed = this.getValue(map, \"constantSpeed\", true);\n\n                    let vertexCount = map.vertexCount;\n                    this.readVertices(map, path, vertexCount << 1);\n\n                    let lengths: Array<number> = Utils.newArray(vertexCount / 3, 0);\n                    for (let i = 0; i < map.lengths.length; i++)\n                        lengths[i] = map.lengths[i] * scale;\n                    path.lengths = lengths;\n\n                    let color: string = this.getValue(map, \"color\", null);\n                    if (color != null) path.color.setFromString(color);\n                    return path;\n                }\n                case \"point\": {\n                    let point = this.attachmentLoader.newPointAttachment(skin, name);\n                    if (point == null) return null;\n                    point.x = this.getValue(map, \"x\", 0) * scale;\n                    point.y = this.getValue(map, \"y\", 0) * scale;\n                    point.rotation = this.getValue(map, \"rotation\", 0);\n\n                    let color = this.getValue(map, \"color\", null);\n                    if (color != null) point.color.setFromString(color);\n                    return point;\n                }\n                case \"clipping\": {\n                    let clip = this.attachmentLoader.newClippingAttachment(skin, name);\n                    if (clip == null) return null;\n\n                    let end = this.getValue(map, \"end\", null);\n                    if (end != null) {\n                        let slot = skeletonData.findSlot(end);\n                        if (slot == null) throw new Error(\"Clipping end slot not found: \" + end);\n                        clip.endSlot = slot;\n                    }\n\n                    let vertexCount = map.vertexCount;\n                    this.readVertices(map, clip, vertexCount << 1);\n\n                    let color: string = this.getValue(map, \"color\", null);\n                    if (color != null) clip.color.setFromString(color);\n                    return clip;\n                }\n            }\n            return null;\n        }\n\n        readVertices (map: any, attachment: VertexAttachment, verticesLength: number) {\n            let scale = this.scale;\n            attachment.worldVerticesLength = verticesLength;\n            let vertices: Array<number> = map.vertices;\n            if (verticesLength == vertices.length) {\n                let scaledVertices = Utils.toFloatArray(vertices);\n                if (scale != 1) {\n                    for (let i = 0, n = vertices.length; i < n; i++)\n                        scaledVertices[i] *= scale;\n                }\n                attachment.vertices = scaledVertices;\n                return;\n            }\n            let weights = new Array<number>();\n            let bones = new Array<number>();\n            for (let i = 0, n = vertices.length; i < n;) {\n                let boneCount = vertices[i++];\n                bones.push(boneCount);\n                for (let nn = i + boneCount * 4; i < nn; i += 4) {\n                    bones.push(vertices[i]);\n                    weights.push(vertices[i + 1] * scale);\n                    weights.push(vertices[i + 2] * scale);\n                    weights.push(vertices[i + 3]);\n                }\n            }\n            attachment.bones = bones;\n            attachment.vertices = Utils.toFloatArray(weights);\n        }\n\n        readAnimation (map: any, name: string, skeletonData: SkeletonData) {\n            let scale = this.scale;\n            let timelines = new Array<Timeline>();\n            let duration = 0;\n\n            // Slot timelines.\n            if (map.slots) {\n                for (let slotName in map.slots) {\n                    let slotMap = map.slots[slotName];\n                    let slotIndex = skeletonData.findSlotIndex(slotName);\n                    if (slotIndex == -1) throw new Error(\"Slot not found: \" + slotName);\n                    for (let timelineName in slotMap) {\n                        let timelineMap = slotMap[timelineName];\n                        if (timelineName == \"attachment\") {\n                            let timeline = new AttachmentTimeline(timelineMap.length);\n                            timeline.slotIndex = slotIndex;\n\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                timeline.setFrame(frameIndex++, this.getValue(valueMap, \"time\", 0), valueMap.name);\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n                        } else if (timelineName == \"color\") {\n                            let timeline = new ColorTimeline(timelineMap.length);\n                            timeline.slotIndex = slotIndex;\n\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                let color = new Color();\n                                color.setFromString(valueMap.color || \"ffffffff\");\n                                timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), color.r, color.g, color.b, color.a);\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * ColorTimeline.ENTRIES]);\n\n                        } else if (timelineName == \"twoColor\") {\n                            let timeline = new TwoColorTimeline(timelineMap.length);\n                            timeline.slotIndex = slotIndex;\n\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                let light = new Color();\n                                let dark = new Color();\n                                light.setFromString(valueMap.light);\n                                dark.setFromString(valueMap.dark);\n                                timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), light.r, light.g, light.b, light.a, dark.r, dark.g, dark.b);\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * TwoColorTimeline.ENTRIES]);\n\n                        } else\n                            throw new Error(\"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\");\n                    }\n                }\n            }\n\n            // Bone timelines.\n            if (map.bones) {\n                for (let boneName in map.bones) {\n                    let boneMap = map.bones[boneName];\n                    let boneIndex = skeletonData.findBoneIndex(boneName);\n                    if (boneIndex == -1) throw new Error(\"Bone not found: \" + boneName);\n                    for (let timelineName in boneMap) {\n                        let timelineMap = boneMap[timelineName];\n                        if (timelineName === \"rotate\") {\n                            let timeline = new RotateTimeline(timelineMap.length);\n                            timeline.boneIndex = boneIndex;\n\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), this.getValue(valueMap, \"angle\", 0));\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * RotateTimeline.ENTRIES]);\n\n                        } else if (timelineName === \"translate\" || timelineName === \"scale\" || timelineName === \"shear\") {\n                            let timeline: TranslateTimeline = null;\n                            let timelineScale = 1, defaultValue = 0;\n                            if (timelineName === \"scale\") {\n                                timeline = new ScaleTimeline(timelineMap.length);\n                                defaultValue = 1;\n                            } else if (timelineName === \"shear\")\n                                timeline = new ShearTimeline(timelineMap.length);\n                            else {\n                                timeline = new TranslateTimeline(timelineMap.length);\n                                timelineScale = scale;\n                            }\n                            timeline.boneIndex = boneIndex;\n\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                let x = this.getValue(valueMap, \"x\", defaultValue), y = this.getValue(valueMap, \"y\", defaultValue);\n                                timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), x * timelineScale, y * timelineScale);\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * TranslateTimeline.ENTRIES]);\n\n                        } else\n                            throw new Error(\"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneName + \")\");\n                    }\n                }\n            }\n\n            // IK constraint timelines.\n            if (map.ik) {\n                for (let constraintName in map.ik) {\n                    let constraintMap = map.ik[constraintName];\n                    let constraint = skeletonData.findIkConstraint(constraintName);\n                    let timeline = new IkConstraintTimeline(constraintMap.length);\n                    timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(constraint);\n                    let frameIndex = 0;\n                    for (let i = 0; i < constraintMap.length; i++) {\n                        let valueMap = constraintMap[i];\n                        timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), this.getValue(valueMap, \"mix\", 1), this.getValue(valueMap, \"softness\", 0) * scale,\n                            this.getValue(valueMap, \"bendPositive\", true) ? 1 : -1, this.getValue(valueMap, \"compress\", false), this.getValue(valueMap, \"stretch\", false));\n                        this.readCurve(valueMap, timeline, frameIndex);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * IkConstraintTimeline.ENTRIES]);\n                }\n            }\n\n            // Transform constraint timelines.\n            if (map.transform) {\n                for (let constraintName in map.transform) {\n                    let constraintMap = map.transform[constraintName];\n                    let constraint = skeletonData.findTransformConstraint(constraintName);\n                    let timeline = new TransformConstraintTimeline(constraintMap.length);\n                    timeline.transformConstraintIndex = skeletonData.transformConstraints.indexOf(constraint);\n                    let frameIndex = 0;\n                    for (let i = 0; i < constraintMap.length; i++) {\n                        let valueMap = constraintMap[i];\n                        timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), this.getValue(valueMap, \"rotateMix\", 1),\n                            this.getValue(valueMap, \"translateMix\", 1), this.getValue(valueMap, \"scaleMix\", 1), this.getValue(valueMap, \"shearMix\", 1));\n                        this.readCurve(valueMap, timeline, frameIndex);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration,\n                        timeline.frames[(timeline.getFrameCount() - 1) * TransformConstraintTimeline.ENTRIES]);\n                }\n            }\n\n            // Path constraint timelines.\n            if (map.path) {\n                for (let constraintName in map.path) {\n                    let constraintMap = map.path[constraintName];\n                    let index = skeletonData.findPathConstraintIndex(constraintName);\n                    if (index == -1) throw new Error(\"Path constraint not found: \" + constraintName);\n                    let data = skeletonData.pathConstraints[index];\n                    for (let timelineName in constraintMap) {\n                        let timelineMap = constraintMap[timelineName];\n                        if (timelineName === \"position\" || timelineName === \"spacing\") {\n                            let timeline: PathConstraintPositionTimeline = null;\n                            let timelineScale = 1;\n                            if (timelineName === \"spacing\") {\n                                timeline = new PathConstraintSpacingTimeline(timelineMap.length);\n                                if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) timelineScale = scale;\n                            } else {\n                                timeline = new PathConstraintPositionTimeline(timelineMap.length);\n                                if (data.positionMode == PositionMode.Fixed) timelineScale = scale;\n                            }\n                            timeline.pathConstraintIndex = index;\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), this.getValue(valueMap, timelineName, 0) * timelineScale);\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration,\n                                timeline.frames[(timeline.getFrameCount() - 1) * PathConstraintPositionTimeline.ENTRIES]);\n                        } else if (timelineName === \"mix\") {\n                            let timeline = new PathConstraintMixTimeline(timelineMap.length);\n                            timeline.pathConstraintIndex = index;\n                            let frameIndex = 0;\n                            for (let i = 0; i < timelineMap.length; i++) {\n                                let valueMap = timelineMap[i];\n                                timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), this.getValue(valueMap, \"rotateMix\", 1),\n                                    this.getValue(valueMap, \"translateMix\", 1));\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration,\n                                timeline.frames[(timeline.getFrameCount() - 1) * PathConstraintMixTimeline.ENTRIES]);\n                        }\n                    }\n                }\n            }\n\n            // Deform timelines.\n            if (map.deform) {\n                for (let deformName in map.deform) {\n                    let deformMap = map.deform[deformName];\n                    let skin = skeletonData.findSkin(deformName);\n                    if (skin == null) {\n                       if (FAIL_ON_NON_EXISTING_SKIN) {\n                           throw new Error(\"Skin not found: \" + deformName);\n                       } else {\n                           continue;\n                       }\n                    }\n                    for (let slotName in deformMap) {\n                        let slotMap = deformMap[slotName];\n                        let slotIndex = skeletonData.findSlotIndex(slotName);\n                        if (slotIndex == -1) throw new Error(\"Slot not found: \" + slotMap.name);\n                        for (let timelineName in slotMap) {\n                            let timelineMap = slotMap[timelineName];\n                            let attachment = <VertexAttachment>skin.getAttachment(slotIndex, timelineName);\n                            if (attachment == null) throw new Error(\"Deform attachment not found: \" + timelineMap.name);\n                            let weighted = attachment.bones != null;\n                            let vertices = attachment.vertices;\n                            let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n\n                            let timeline = new DeformTimeline(timelineMap.length);\n                            timeline.slotIndex = slotIndex;\n                            timeline.attachment = attachment;\n\n                            let frameIndex = 0;\n                            for (let j = 0; j < timelineMap.length; j++) {\n                                let valueMap = timelineMap[j];\n                                let deform: ArrayLike<number>;\n                                let verticesValue: Array<Number> = this.getValue(valueMap, \"vertices\", null);\n                                if (verticesValue == null)\n                                    deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n                                else {\n                                    deform = Utils.newFloatArray(deformLength);\n                                    let start = <number>this.getValue(valueMap, \"offset\", 0);\n                                    Utils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);\n                                    if (scale != 1) {\n                                        for (let i = start, n = i + verticesValue.length; i < n; i++)\n                                            deform[i] *= scale;\n                                    }\n                                    if (!weighted) {\n                                        for (let i = 0; i < deformLength; i++)\n                                            deform[i] += vertices[i];\n                                    }\n                                }\n\n                                timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), deform);\n                                this.readCurve(valueMap, timeline, frameIndex);\n                                frameIndex++;\n                            }\n                            timelines.push(timeline);\n                            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n                        }\n                    }\n                }\n            }\n\n            // Draw order timeline.\n            let drawOrderNode = map.drawOrder;\n            if (drawOrderNode == null) drawOrderNode = map.draworder;\n            if (drawOrderNode != null) {\n                let timeline = new DrawOrderTimeline(drawOrderNode.length);\n                let slotCount = skeletonData.slots.length;\n                let frameIndex = 0;\n                for (let j = 0; j < drawOrderNode.length; j++) {\n                    let drawOrderMap = drawOrderNode[j];\n                    let drawOrder: Array<number> = null;\n                    let offsets = this.getValue(drawOrderMap, \"offsets\", null);\n                    if (offsets != null) {\n                        drawOrder = Utils.newArray<number>(slotCount, -1);\n                        let unchanged = Utils.newArray<number>(slotCount - offsets.length, 0);\n                        let originalIndex = 0, unchangedIndex = 0;\n                        for (let i = 0; i < offsets.length; i++) {\n                            let offsetMap = offsets[i];\n                            let slotIndex = skeletonData.findSlotIndex(offsetMap.slot);\n                            if (slotIndex == -1) throw new Error(\"Slot not found: \" + offsetMap.slot);\n                            // Collect unchanged items.\n                            while (originalIndex != slotIndex)\n                                unchanged[unchangedIndex++] = originalIndex++;\n                            // Set changed items.\n                            drawOrder[originalIndex + offsetMap.offset] = originalIndex++;\n                        }\n                        // Collect remaining unchanged items.\n                        while (originalIndex < slotCount)\n                            unchanged[unchangedIndex++] = originalIndex++;\n                        // Fill in unchanged items.\n                        for (let i = slotCount - 1; i >= 0; i--)\n                            if (drawOrder[i] == -1) drawOrder[i] = unchanged[--unchangedIndex];\n                    }\n                    timeline.setFrame(frameIndex++, this.getValue(drawOrderMap, \"time\", 0), drawOrder);\n                }\n                timelines.push(timeline);\n                duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n            }\n\n            // Event timeline.\n            if (map.events) {\n                let timeline = new EventTimeline(map.events.length);\n                let frameIndex = 0;\n                for (let i = 0; i < map.events.length; i++) {\n                    let eventMap = map.events[i];\n                    let eventData = skeletonData.findEvent(eventMap.name);\n                    if (eventData == null) throw new Error(\"Event not found: \" + eventMap.name);\n                    let event = new Event(Utils.toSinglePrecision(this.getValue(eventMap, \"time\", 0)), eventData);\n                    event.intValue = this.getValue(eventMap, \"int\", eventData.intValue);\n                    event.floatValue = this.getValue(eventMap, \"float\", eventData.floatValue);\n                    event.stringValue = this.getValue(eventMap, \"string\", eventData.stringValue);\n                    if (event.data.audioPath != null) {\n                        event.volume = this.getValue(eventMap, \"volume\", 1);\n                        event.balance = this.getValue(eventMap, \"balance\", 0);\n                    }\n                    timeline.setFrame(frameIndex++, event);\n                }\n                timelines.push(timeline);\n                duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n            }\n\n            if (isNaN(duration)) {\n                throw new Error(\"Error while parsing animation, duration is NaN\");\n            }\n\n            skeletonData.animations.push(new Animation(name, timelines, duration));\n        }\n\n        readCurve (map: any, timeline: CurveTimeline, frameIndex: number) {\n            if (!map.hasOwnProperty(\"curve\")) return;\n            if (map.curve === \"stepped\")\n                timeline.setStepped(frameIndex);\n            else {\n                let curve: number = map.curve;\n                timeline.setCurve(frameIndex, curve, this.getValue(map, \"c2\", 0), this.getValue(map, \"c3\", 1), this.getValue(map, \"c4\", 1));\n            }\n        }\n\n        getValue (map: any, prop: string, defaultValue: any) {\n            return map[prop] !== undefined ? map[prop] : defaultValue;\n        }\n\n        static blendModeFromString (str: string) {\n            str = str.toLowerCase();\n            if (str == \"normal\") return BlendMode.Normal;\n            if (str == \"additive\") return BlendMode.Additive;\n            if (str == \"multiply\") return BlendMode.Multiply;\n            if (str == \"screen\") return BlendMode.Screen;\n            throw new Error(`Unknown blend mode: ${str}`);\n        }\n\n        static positionModeFromString (str: string) {\n            str = str.toLowerCase();\n            if (str == \"fixed\") return PositionMode.Fixed;\n            if (str == \"percent\") return PositionMode.Percent;\n            throw new Error(`Unknown position mode: ${str}`);\n        }\n\n        static spacingModeFromString (str: string) {\n            str = str.toLowerCase();\n            if (str == \"length\") return SpacingMode.Length;\n            if (str == \"fixed\") return SpacingMode.Fixed;\n            if (str == \"percent\") return SpacingMode.Percent;\n            throw new Error(`Unknown position mode: ${str}`);\n        }\n\n        static rotateModeFromString (str: string) {\n            str = str.toLowerCase();\n            if (str == \"tangent\") return RotateMode.Tangent;\n            if (str == \"chain\") return RotateMode.Chain;\n            if (str == \"chainscale\") return RotateMode.ChainScale;\n            throw new Error(`Unknown rotate mode: ${str}`);\n        }\n\n        static transformModeFromString(str: string) {\n            str = str.toLowerCase();\n            if (str == \"normal\") return TransformMode.Normal;\n            if (str == \"onlytranslation\") return TransformMode.OnlyTranslation;\n            if (str == \"norotationorreflection\") return TransformMode.NoRotationOrReflection;\n            if (str == \"noscale\") return TransformMode.NoScale;\n            if (str == \"noscaleorreflection\") return TransformMode.NoScaleOrReflection;\n            throw new Error(`Unknown transform mode: ${str}`);\n        }\n    }\n\n    class LinkedMesh {\n        parent: string; skin: string;\n        slotIndex: number;\n        mesh: MeshAttachment;\n        inheritDeform: boolean;\n\n        constructor (mesh: MeshAttachment, skin: string, slotIndex: number, parent: string, inheritDeform: boolean) {\n            this.mesh = mesh;\n            this.skin = skin;\n            this.slotIndex = slotIndex;\n            this.parent = parent;\n            this.inheritDeform = inheritDeform;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class SkinEntry {\n        constructor(public slotIndex: number, public name: string, public attachment: Attachment) { }\n    }\n\n    export class Skin {\n        name: string;\n        attachments = new Array<Map<Attachment>>();\n        bones = Array<BoneData>();\n        constraints = new Array<ConstraintData>();\n\n        constructor (name: string) {\n            if (name == null) throw new Error(\"name cannot be null.\");\n            this.name = name;\n        }\n\n        setAttachment (slotIndex: number, name: string, attachment: Attachment) {\n            if (attachment == null) throw new Error(\"attachment cannot be null.\");\n            let attachments = this.attachments;\n            if (slotIndex >= attachments.length) attachments.length = slotIndex + 1;\n            if (!attachments[slotIndex]) attachments[slotIndex] = { };\n            attachments[slotIndex][name] = attachment;\n        }\n\n        addSkin (skin: Skin) {\n            for(let i = 0; i < skin.bones.length; i++) {\n                let bone = skin.bones[i];\n                let contained = false;\n                for (let j = 0; j < this.bones.length; j++) {\n                    if (this.bones[j] == bone) {\n                        contained = true;\n                        break;\n                    }\n                }\n                if (!contained) this.bones.push(bone);\n            }\n\n            for(let i = 0; i < skin.constraints.length; i++) {\n                let constraint = skin.constraints[i];\n                let contained = false;\n                for (let j = 0; j < this.constraints.length; j++) {\n                    if (this.constraints[j] == constraint) {\n                        contained = true;\n                        break;\n                    }\n                }\n                if (!contained) this.constraints.push(constraint);\n            }\n\n            let attachments = skin.getAttachments();\n            for (let i = 0; i < attachments.length; i++) {\n                var attachment = attachments[i];\n                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n            }\n        }\n\n        copySkin (skin: Skin) {\n            for(let i = 0; i < skin.bones.length; i++) {\n                let bone = skin.bones[i];\n                let contained = false;\n                for (let j = 0; j < this.bones.length; j++) {\n                    if (this.bones[j] == bone) {\n                        contained = true;\n                        break;\n                    }\n                }\n                if (!contained) this.bones.push(bone);\n            }\n\n            for(let i = 0; i < skin.constraints.length; i++) {\n                let constraint = skin.constraints[i];\n                let contained = false;\n                for (let j = 0; j < this.constraints.length; j++) {\n                    if (this.constraints[j] == constraint) {\n                        contained = true;\n                        break;\n                    }\n                }\n                if (!contained) this.constraints.push(constraint);\n            }\n\n            let attachments = skin.getAttachments();\n            for (let i = 0; i < attachments.length; i++) {\n                var attachment = attachments[i];\n                if (attachment.attachment == null) continue;\n                if (attachment.attachment instanceof MeshAttachment) {\n                    attachment.attachment = attachment.attachment.newLinkedMesh();\n                    this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n                } else {\n                    attachment.attachment = attachment.attachment.copy();\n                    this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n                }\n            }\n        }\n\n        /** @return May be null. */\n        getAttachment (slotIndex: number, name: string): Attachment {\n            let dictionary = this.attachments[slotIndex];\n            return dictionary ? dictionary[name] : null;\n        }\n\n        removeAttachment (slotIndex: number, name: string) {\n            let dictionary = this.attachments[slotIndex];\n            if (dictionary) dictionary[name] = null;\n        }\n\n        getAttachments (): Array<SkinEntry> {\n            let entries = new Array<SkinEntry>();\n            for (var i = 0; i < this.attachments.length; i++) {\n                let slotAttachments = this.attachments[i];\n                if (slotAttachments) {\n                    for (let name in slotAttachments) {\n                        let attachment = slotAttachments[name];\n                        if (attachment) entries.push(new SkinEntry(i, name, attachment));\n                    }\n                }\n            }\n            return entries;\n        }\n\n        getAttachmentsForSlot (slotIndex: number, attachments: Array<SkinEntry>) {\n            let slotAttachments = this.attachments[slotIndex];\n            if (slotAttachments) {\n                for (let name in slotAttachments) {\n                    let attachment = slotAttachments[name];\n                    if (attachment) attachments.push(new SkinEntry(slotIndex, name, attachment));\n                }\n            }\n        }\n\n        clear () {\n            this.attachments.length = 0;\n            this.bones.length = 0;\n            this.constraints.length = 0;\n        }\n\n        /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */\n        attachAll (skeleton: Skeleton, oldSkin: Skin) {\n            let slotIndex = 0;\n            for (let i = 0; i < skeleton.slots.length; i++) {\n                let slot = skeleton.slots[i];\n                let slotAttachment = slot.getAttachment();\n                if (slotAttachment && slotIndex < oldSkin.attachments.length) {\n                    let dictionary = oldSkin.attachments[slotIndex];\n                    for (let key in dictionary) {\n                        let skinAttachment:Attachment = dictionary[key];\n                        if (slotAttachment == skinAttachment) {\n                            let attachment = this.getAttachment(slotIndex, key);\n                            if (attachment != null) slot.setAttachment(attachment);\n                            break;\n                        }\n                    }\n                }\n                slotIndex++;\n            }\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class Slot {\n        //this is for PIXI\n        currentMesh: any;\n        currentSprite: any;\n        currentGraphics: any;\n        clippingContainer: any;\n\n        meshes: any;\n        currentMeshName: string;\n        sprites: any;\n        currentSpriteName: string;\n\n        blendMode: number;\n        //assign hack region a bit later\n        hackRegion: TextureRegion;\n        hackAttachment: Attachment;\n\n        //this is canon\n        data: SlotData;\n        bone: Bone;\n        color: Color;\n        darkColor: Color;\n        private attachment: Attachment;\n        private attachmentTime: number;\n        deform = new Array<number>();\n\n        constructor (data: SlotData, bone: Bone) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            if (bone == null) throw new Error(\"bone cannot be null.\");\n            this.data = data;\n            this.bone = bone;\n            this.color = new Color();\n            this.darkColor = data.darkColor == null ? null : new Color();\n            this.setToSetupPose();\n\n            this.blendMode = this.data.blendMode;\n        }\n\n        /** @return May be null. */\n        getAttachment (): Attachment {\n            return this.attachment;\n        }\n\n        /** Sets the attachment and if it changed, resets {@link #getAttachmentTime()} and clears {@link #getAttachmentVertices()}.\n         * @param attachment May be null. */\n        setAttachment (attachment: Attachment) {\n            if (this.attachment == attachment) return;\n            this.attachment = attachment;\n            this.attachmentTime = this.bone.skeleton.time;\n            this.deform.length = 0;\n        }\n\n        setAttachmentTime (time: number) {\n            this.attachmentTime = this.bone.skeleton.time - time;\n        }\n\n        /** Returns the time since the attachment was set. */\n        getAttachmentTime (): number {\n            return this.bone.skeleton.time - this.attachmentTime;\n        }\n\n        setToSetupPose () {\n            this.color.setFromColor(this.data.color);\n            if (this.darkColor != null) this.darkColor.setFromColor(this.data.darkColor);\n            if (this.data.attachmentName == null)\n                this.attachment = null;\n            else {\n                this.attachment = null;\n                this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\n            }\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class SlotData {\n        index: number;\n        name: string;\n        boneData: BoneData;\n        color = new Color(1, 1, 1, 1);\n        darkColor: Color;\n        attachmentName: string;\n        blendMode: BlendMode;\n\n        constructor (index: number, name: string, boneData: BoneData) {\n            if (index < 0) throw new Error(\"index must be >= 0.\");\n            if (name == null) throw new Error(\"name cannot be null.\");\n            if (boneData == null) throw new Error(\"boneData cannot be null.\");\n            this.index = index;\n            this.name = name;\n            this.boneData = boneData;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export abstract class Texture {\n        protected _image: HTMLImageElement;\n\n        constructor (image: HTMLImageElement) {\n            this._image = image;\n        }\n\n        getImage (): HTMLImageElement {\n            return this._image;\n        }\n\n        abstract setFilters (minFilter: TextureFilter, magFilter: TextureFilter): void;\n        abstract setWraps (uWrap: TextureWrap, vWrap: TextureWrap): void;\n        abstract dispose (): void;\n\n\n        public static filterFromString (text: string): TextureFilter {\n            switch (text.toLowerCase()) {\n                case \"nearest\": return TextureFilter.Nearest;\n                case \"linear\": return TextureFilter.Linear;\n                case \"mipmap\": return TextureFilter.MipMap;\n                case \"mipmapnearestnearest\": return TextureFilter.MipMapNearestNearest;\n                case \"mipmaplinearnearest\": return TextureFilter.MipMapLinearNearest;\n                case \"mipmapnearestlinear\": return TextureFilter.MipMapNearestLinear;\n                case \"mipmaplinearlinear\": return TextureFilter.MipMapLinearLinear;\n                default: throw new Error(`Unknown texture filter ${text}`);\n            }\n        }\n\n        public static wrapFromString (text: string): TextureWrap {\n            switch (text.toLowerCase()) {\n                case \"mirroredtepeat\": return TextureWrap.MirroredRepeat;\n                case \"clamptoedge\": return TextureWrap.ClampToEdge;\n                case \"repeat\": return TextureWrap.Repeat;\n                default: throw new Error(`Unknown texture wrap ${text}`);\n            }\n        }\n    }\n\n    export enum TextureFilter {\n        Nearest = 9728, // WebGLRenderingContext.NEAREST\n        Linear = 9729, // WebGLRenderingContext.LINEAR\n        MipMap = 9987, // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n        MipMapNearestNearest = 9984, // WebGLRenderingContext.NEAREST_MIPMAP_NEAREST\n        MipMapLinearNearest = 9985, // WebGLRenderingContext.LINEAR_MIPMAP_NEAREST\n        MipMapNearestLinear = 9986, // WebGLRenderingContext.NEAREST_MIPMAP_LINEAR\n        MipMapLinearLinear = 9987 // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n    }\n\n    export enum TextureWrap {\n        MirroredRepeat = 33648, // WebGLRenderingContext.MIRRORED_REPEAT\n        ClampToEdge = 33071, // WebGLRenderingContext.CLAMP_TO_EDGE\n        Repeat = 10497 // WebGLRenderingContext.REPEAT\n    }\n\n    export class TextureRegion {\n        texture: PIXI.Texture;\n\n        //thats for overrides\n        size: PIXI.Rectangle = null;\n\n        get width(): number {\n            const tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                return (tex as any).crop.width;\n            }\n            if (tex.trim) {\n                return tex.trim.width;\n            }\n            return tex.orig.width;\n        }\n\n        get height(): number {\n            const tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                return (tex as any).crop.height;\n            }\n            if (tex.trim) {\n                return tex.trim.height;\n            }\n            return tex.orig.height;\n        }\n\n        get u(): number {\n            return (this.texture as any)._uvs.x0;\n        }\n\n        get v(): number {\n            return (this.texture as any)._uvs.y0;\n        }\n\n        get u2(): number {\n            return (this.texture as any)._uvs.x2;\n        }\n\n        get v2(): number {\n            return (this.texture as any)._uvs.y2;\n        }\n\n        get offsetX(): number {\n            const tex = this.texture;\n            return tex.trim ? tex.trim.x : 0;\n        }\n\n        get offsetY(): number {\n            console.warn(\"Deprecation Warning: @Hackerham: I guess, if you are using PIXI-SPINE ATLAS region.offsetY, you want a texture, right? Use region.texture from now on.\");\n            return this.spineOffsetY;\n        }\n\n        get pixiOffsetY(): number {\n            const tex = this.texture;\n            return tex.trim ? tex.trim.y : 0;\n        }\n\n        get spineOffsetY(): number {\n            let tex = this.texture;\n            return this.originalHeight - this.height - (tex.trim ? tex.trim.y : 0);\n        }\n\n        get originalWidth(): number {\n            let tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                if (tex.trim) {\n                    return tex.trim.width;\n                }\n                return (tex as any).crop.width;\n            }\n            return tex.orig.width;\n        }\n\n        get originalHeight(): number {\n            const tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                if (tex.trim) {\n                    return tex.trim.height;\n                }\n                return (tex as any).crop.height;\n            }\n            return tex.orig.height;\n        }\n\n        get x(): number {\n            return this.texture.frame.x;\n        }\n\n        get y(): number {\n            return this.texture.frame.y;\n        }\n\n        get rotate(): boolean {\n            return this.texture.rotate !== 0;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class TextureAtlas implements Disposable {\n        pages = new Array<TextureAtlasPage>();\n        regions = new Array<TextureAtlasRegion>();\n\n        constructor(atlasText?: string, textureLoader?: (path: string, loaderFunction: (tex: PIXI.BaseTexture) => any) => any, callback?: (obj: TextureAtlas) => any) {\n            if (atlasText) {\n                this.addSpineAtlas(atlasText, textureLoader, callback);\n            }\n        }\n\n        addTexture(name: string, texture: PIXI.Texture) {\n            let pages = this.pages;\n            let page: TextureAtlasPage = null;\n            for (let i = 0; i < pages.length; i++) {\n                if (pages[i].baseTexture === texture.baseTexture) {\n                    page = pages[i];\n                    break;\n                }\n            }\n            if (page === null) {\n                page = new TextureAtlasPage();\n                page.name = 'texturePage';\n                let baseTexture = texture.baseTexture;\n                page.width = baseTexture.realWidth;\n                page.height = baseTexture.realHeight;\n                page.baseTexture = baseTexture;\n                //those fields are not relevant in Pixi\n                page.minFilter = page.magFilter = TextureFilter.Nearest;\n                page.uWrap = TextureWrap.ClampToEdge;\n                page.vWrap = TextureWrap.ClampToEdge;\n                pages.push(page);\n            }\n            let region = new TextureAtlasRegion();\n            region.name = name;\n            region.page = page;\n            region.texture = texture;\n            region.index = -1;\n            this.regions.push(region);\n            return region;\n        }\n\n        addTextureHash(textures: Map<PIXI.Texture>, stripExtension: boolean) {\n            for (let key in textures) {\n                if (textures.hasOwnProperty(key)) {\n                    this.addTexture(stripExtension && key.indexOf('.') !== -1 ? key.substr(0, key.lastIndexOf('.')) : key, textures[key]);\n                }\n            }\n        }\n\n        public addSpineAtlas(atlasText: string, textureLoader: (path: string, loaderFunction: (tex: PIXI.BaseTexture)  => any) => any, callback: (obj: TextureAtlas) => any) {\n            return this.load(atlasText, textureLoader, callback);\n        }\n\n        private load(atlasText: string, textureLoader: (path: string, loaderFunction: (tex: PIXI.BaseTexture) => any) => any, callback: (obj: TextureAtlas) => any) {\n            if (textureLoader == null)\n                throw new Error(\"textureLoader cannot be null.\");\n\n            let reader = new TextureAtlasReader(atlasText);\n            let tuple = new Array<string>(4);\n            let page: TextureAtlasPage = null;\n\n            let iterateParser = () => {\n                while (true) {\n                    let line = reader.readLine();\n                    if (line == null) {\n                        return callback && callback(this);\n                    }\n                    line = line.trim();\n                    if (line.length == 0)\n                        page = null;\n                    else if (!page) {\n                        page = new TextureAtlasPage();\n                        page.name = line;\n\n                        if (reader.readTuple(tuple) == 2) { // size is only optional for an atlas packed with an old TexturePacker.\n                            page.width = parseInt(tuple[0]);\n                            page.height = parseInt(tuple[1]);\n                            reader.readTuple(tuple);\n                        }\n                        // page.format = Format[tuple[0]]; we don't need format in WebGL\n\n                        reader.readTuple(tuple);\n                        page.minFilter = Texture.filterFromString(tuple[0]);\n                        page.magFilter = Texture.filterFromString(tuple[1]);\n\n                        let direction = reader.readValue();\n                        page.uWrap = TextureWrap.ClampToEdge;\n                        page.vWrap = TextureWrap.ClampToEdge;\n                        if (direction == \"x\")\n                            page.uWrap = TextureWrap.Repeat;\n                        else if (direction == \"y\")\n                            page.vWrap = TextureWrap.Repeat;\n                        else if (direction == \"xy\")\n                            page.uWrap = page.vWrap = TextureWrap.Repeat;\n\n                        textureLoader(line, (texture: PIXI.BaseTexture) => {\n                            if (texture === null) {\n                                this.pages.splice(this.pages.indexOf(page), 1);\n                                return callback && callback(null);\n                            }\n                            page.baseTexture = texture;\n                            if (!texture.valid) {\n                                texture.setSize(page.width, page.height);\n                            }\n                            this.pages.push(page);\n                            page.setFilters();\n\n                            if (!page.width || !page.height) {\n                                page.width = texture.realWidth;\n                                page.height = texture.realHeight;\n                                if (!page.width || !page.height) {\n                                    console.log(\"ERROR spine atlas page \" + page.name + \": meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)\");\n                                }\n                            }\n                            iterateParser();\n                        });\n                        this.pages.push(page);\n                        break;\n                    } else {\n                        let region: TextureAtlasRegion = new TextureAtlasRegion();\n                        region.name = line;\n                        region.page = page;\n\n                        let rotateValue = reader.readValue();\n                        let rotate = 0;\n                        if (rotateValue.toLocaleLowerCase() == \"true\") {\n                            rotate = 6;\n                        } else if (rotateValue.toLocaleLowerCase() == \"false\") {\n                            rotate = 0;\n                        } else {\n                            rotate = ((720 - parseFloat(rotateValue))% 360) / 45;\n                        }\n\n                        reader.readTuple(tuple);\n                        let x = parseInt(tuple[0]);\n                        let y = parseInt(tuple[1]);\n\n                        reader.readTuple(tuple);\n                        let width = parseInt(tuple[0]);\n                        let height = parseInt(tuple[1]);\n\n                        let resolution = page.baseTexture.resolution;\n                        x /= resolution;\n                        y /= resolution;\n                        width /= resolution;\n                        height /= resolution;\n\n                        const swapWH = rotate % 4 != 0;\n                        let frame = new PIXI.Rectangle(x, y, swapWH ? height : width, swapWH ? width : height);\n\n                        if (reader.readTuple(tuple) == 4) { // split is optional\n                            // region.splits = new Vector.<int>(parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3]));\n\n                            if (reader.readTuple(tuple) == 4) { // pad is optional, but only present with splits\n                                //region.pads = Vector.<int>(parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3]));\n\n                                reader.readTuple(tuple);\n                            }\n                        }\n\n                        let originalWidth = parseInt(tuple[0]) / resolution;\n                        let originalHeight = parseInt(tuple[1]) / resolution;\n                        reader.readTuple(tuple);\n                        let offsetX = parseInt(tuple[0]) / resolution;\n                        let offsetY = parseInt(tuple[1]) / resolution;\n\n                        let orig = new PIXI.Rectangle(0, 0, originalWidth, originalHeight);\n                        let trim = new PIXI.Rectangle(offsetX, originalHeight - height - offsetY, width, height);\n\n                        //TODO: pixiv3 uses different frame/crop/trim\n\n                        if (PIXI.VERSION[0] != '3') {\n                            // pixi v4 or v5\n                            region.texture = new PIXI.Texture(region.page.baseTexture, frame, orig, trim, rotate);\n                        } else {\n                            // pixi v3.0.11\n                            let frame2 = new PIXI.Rectangle(x, y, width, height);\n                            let crop = frame2.clone();\n                            trim.width = originalWidth;\n                            trim.height = originalHeight;\n                            region.texture = new PIXI.Texture(region.page.baseTexture, frame2, crop, trim, rotate);\n                        }\n\n                        region.index = parseInt(reader.readValue());\n                        region.texture.updateUvs();\n\n                        this.regions.push(region);\n                    }\n                }\n            };\n\n            iterateParser();\n        }\n\n        findRegion(name: string): TextureAtlasRegion {\n            for (let i = 0; i < this.regions.length; i++) {\n                if (this.regions[i].name == name) {\n                    return this.regions[i];\n                }\n            }\n            return null;\n        }\n\n        dispose() {\n            for (let i = 0; i < this.pages.length; i++) {\n                this.pages[i].baseTexture.dispose();\n            }\n        }\n    }\n\n    class TextureAtlasReader {\n        lines: Array<string>;\n        index: number = 0;\n\n        constructor(text: string) {\n            this.lines = text.split(/\\r\\n|\\r|\\n/);\n        }\n\n        readLine(): string {\n            if (this.index >= this.lines.length)\n                return null;\n            return this.lines[this.index++];\n        }\n\n        readValue(): string {\n            let line = this.readLine();\n            let colon = line.indexOf(\":\");\n            if (colon == -1)\n                throw new Error(\"Invalid line: \" + line);\n            return line.substring(colon + 1).trim();\n        }\n\n        readTuple(tuple: Array<string>): number {\n            let line = this.readLine();\n            let colon = line.indexOf(\":\");\n            if (colon == -1)\n                throw new Error(\"Invalid line: \" + line);\n            let i = 0, lastMatch = colon + 1;\n            for (; i < 3; i++) {\n                let comma = line.indexOf(\",\", lastMatch);\n                if (comma == -1) break;\n                tuple[i] = line.substr(lastMatch, comma - lastMatch).trim();\n                lastMatch = comma + 1;\n            }\n            tuple[i] = line.substring(lastMatch).trim();\n            return i + 1;\n        }\n    }\n\n    export class TextureAtlasPage {\n        name: string;\n        minFilter: TextureFilter;\n        magFilter: TextureFilter;\n        uWrap: TextureWrap;\n        vWrap: TextureWrap;\n        baseTexture: PIXI.BaseTexture;\n        width: number;\n        height: number;\n\n        public setFilters() {\n            let tex = this.baseTexture;\n            let filter = this.minFilter;\n            if (filter == TextureFilter.Linear) {\n                tex.scaleMode = PIXI.SCALE_MODES.LINEAR;\n            } else if (this.minFilter == TextureFilter.Nearest) {\n                tex.scaleMode = PIXI.SCALE_MODES.NEAREST;\n            } else {\n                tex.mipmap = PIXI.MIPMAP_MODES.POW2;\n                if (filter == TextureFilter.MipMapNearestNearest) {\n                    tex.scaleMode = PIXI.SCALE_MODES.NEAREST;\n                } else {\n                    tex.scaleMode = PIXI.SCALE_MODES.LINEAR;\n                }\n            }\n        }\n    }\n\n    export class TextureAtlasRegion extends TextureRegion {\n        page: TextureAtlasPage;\n        name: string;\n        index: number;\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class TransformConstraint implements Updatable {\n        data: TransformConstraintData;\n        bones: Array<Bone>;\n        target: Bone;\n        rotateMix = 0;\n        translateMix = 0;\n        scaleMix = 0;\n        shearMix = 0;\n        temp = new Vector2();\n        active = false;\n\n        constructor(data: TransformConstraintData, skeleton: Skeleton) {\n            if (data == null) throw new Error(\"data cannot be null.\");\n            if (skeleton == null) throw new Error(\"skeleton cannot be null.\");\n            this.data = data;\n            this.rotateMix = data.rotateMix;\n            this.translateMix = data.translateMix;\n            this.scaleMix = data.scaleMix;\n            this.shearMix = data.shearMix;\n            this.bones = new Array<Bone>();\n            for (let i = 0; i < data.bones.length; i++)\n                this.bones.push(skeleton.findBone(data.bones[i].name));\n            this.target = skeleton.findBone(data.target.name);\n        }\n\n        isActive () {\n            return this.active;\n        }\n\n        apply() {\n            this.update();\n        }\n\n        update() {\n            if (this.data.local) {\n                if (this.data.relative)\n                    this.applyRelativeLocal();\n                else\n                    this.applyAbsoluteLocal();\n\n            } else {\n                if (this.data.relative)\n                    this.applyRelativeWorld();\n                else\n                    this.applyAbsoluteWorld();\n            }\n        }\n\n        applyAbsoluteWorld() {\n            let rotateMix = this.rotateMix, translateMix = this.translateMix, scaleMix = this.scaleMix,\n                shearMix = this.shearMix;\n            let target = this.target;\n            let targetMat = target.matrix;\n            let ta = targetMat.a, tb = targetMat.c, tc = targetMat.b, td = targetMat.d;\n            let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n            let offsetRotation = this.data.offsetRotation * degRadReflect;\n            let offsetShearY = this.data.offsetShearY * degRadReflect;\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                let modified = false;\n                let mat = bone.matrix;\n\n                if (rotateMix != 0) {\n                    let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\n                    let r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;\n                    if (r > MathUtils.PI)\n                        r -= MathUtils.PI2;\n                    else if (r < -MathUtils.PI)\n                        r += MathUtils.PI2;\n                    r *= rotateMix;\n                    let cos = Math.cos(r), sin = Math.sin(r);\n                    mat.a = cos * a - sin * c;\n                    mat.c = cos * b - sin * d;\n                    mat.b = sin * a + cos * c;\n                    mat.d = sin * b + cos * d;\n                    modified = true;\n                }\n\n                if (translateMix != 0) {\n                    let temp = this.temp;\n                    target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n                    mat.tx += (temp.x - mat.tx) * translateMix;\n                    mat.ty += (temp.y - mat.ty) * translateMix;\n                    modified = true;\n                }\n\n                if (scaleMix > 0) {\n                    let s = Math.sqrt(mat.a * mat.a + mat.b * mat.b);\n                    let ts = Math.sqrt(ta * ta + tc * tc);\n                    if (s > 0.00001) s = (s + (ts - s + this.data.offsetScaleX) * scaleMix) / s;\n                    mat.a *= s;\n                    mat.b *= s;\n                    s = Math.sqrt(mat.c * mat.c + mat.d * mat.d);\n                    ts = Math.sqrt(tb * tb + td * td);\n                    if (s > 0.00001) s = (s + (ts - s + this.data.offsetScaleY) * scaleMix) / s;\n                    mat.c *= s;\n                    mat.d *= s;\n                    modified = true;\n                }\n\n                if (shearMix > 0) {\n                    let b = mat.c, d = mat.d;\n                    let by = Math.atan2(d, b);\n                    let r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(mat.b, mat.a));\n                    if (r > MathUtils.PI)\n                        r -= MathUtils.PI2;\n                    else if (r < -MathUtils.PI)\n                        r += MathUtils.PI2;\n                    r = by + (r + offsetShearY) * shearMix;\n                    let s = Math.sqrt(b * b + d * d);\n                    mat.c = Math.cos(r) * s;\n                    mat.d = Math.sin(r) * s;\n                    modified = true;\n                }\n\n                if (modified) bone.appliedValid = false;\n            }\n        }\n\n        applyRelativeWorld() {\n            let rotateMix = this.rotateMix, translateMix = this.translateMix, scaleMix = this.scaleMix,\n                shearMix = this.shearMix;\n            let target = this.target;\n            let targetMat = target.matrix;\n            let ta = targetMat.a, tb = targetMat.c, tc = targetMat.b, td = targetMat.d;\n            let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n            let offsetRotation = this.data.offsetRotation * degRadReflect,\n                offsetShearY = this.data.offsetShearY * degRadReflect;\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                let modified = false;\n                let mat = bone.matrix;\n\n                if (rotateMix != 0) {\n                    let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\n                    let r = Math.atan2(tc, ta) + offsetRotation;\n                    if (r > MathUtils.PI)\n                        r -= MathUtils.PI2;\n                    else if (r < -MathUtils.PI) r += MathUtils.PI2;\n                    r *= rotateMix;\n                    let cos = Math.cos(r), sin = Math.sin(r);\n                    mat.a = cos * a - sin * c;\n                    mat.c = cos * b - sin * d;\n                    mat.b = sin * a + cos * c;\n                    mat.d = sin * b + cos * d;\n                    modified = true;\n                }\n\n                if (translateMix != 0) {\n                    let temp = this.temp;\n                    target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n                    mat.tx += temp.x * translateMix;\n                    mat.ty += temp.y * translateMix;\n                    modified = true;\n                }\n\n                if (scaleMix > 0) {\n                    let s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * scaleMix + 1;\n                    mat.a *= s;\n                    mat.b *= s;\n                    s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * scaleMix + 1;\n                    mat.c *= s;\n                    mat.d *= s;\n                    modified = true;\n                }\n\n                if (shearMix > 0) {\n                    let r = Math.atan2(td, tb) - Math.atan2(tc, ta);\n                    if (r > MathUtils.PI)\n                        r -= MathUtils.PI2;\n                    else if (r < -MathUtils.PI) r += MathUtils.PI2;\n                    let b = mat.c, d = mat.d;\n                    r = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * shearMix;\n                    let s = Math.sqrt(b * b + d * d);\n                    mat.c = Math.cos(r) * s;\n                    mat.d = Math.sin(r) * s;\n                    modified = true;\n                }\n\n                if (modified) bone.appliedValid = false;\n            }\n        }\n\n        applyAbsoluteLocal() {\n            let rotateMix = this.rotateMix, translateMix = this.translateMix, scaleMix = this.scaleMix,\n                shearMix = this.shearMix;\n            let target = this.target;\n            if (!target.appliedValid) target.updateAppliedTransform();\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                if (!bone.appliedValid) bone.updateAppliedTransform();\n\n                let rotation = bone.arotation;\n                if (rotateMix != 0) {\n                    let r = target.arotation - rotation + this.data.offsetRotation;\n                    r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\n                    rotation += r * rotateMix;\n                }\n\n                let x = bone.ax, y = bone.ay;\n                if (translateMix != 0) {\n                    x += (target.ax - x + this.data.offsetX) * translateMix;\n                    y += (target.ay - y + this.data.offsetY) * translateMix;\n                }\n\n                let scaleX = bone.ascaleX, scaleY = bone.ascaleY;\n                if (scaleMix > 0) {\n                    if (scaleX > 0.00001) scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * scaleMix) / scaleX;\n                    if (scaleY > 0.00001) scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * scaleMix) / scaleY;\n                }\n\n                let shearY = bone.ashearY;\n                if (shearMix > 0) {\n                    let r = target.ashearY - shearY + this.data.offsetShearY;\n                    r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\n                    bone.shearY += r * shearMix;\n                }\n\n                bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n            }\n        }\n\n        applyRelativeLocal() {\n            let rotateMix = this.rotateMix, translateMix = this.translateMix, scaleMix = this.scaleMix,\n                shearMix = this.shearMix;\n            let target = this.target;\n            if (!target.appliedValid) target.updateAppliedTransform();\n            let bones = this.bones;\n            for (let i = 0, n = bones.length; i < n; i++) {\n                let bone = bones[i];\n                if (!bone.appliedValid) bone.updateAppliedTransform();\n\n                let rotation = bone.arotation;\n                if (rotateMix != 0) rotation += (target.arotation + this.data.offsetRotation) * rotateMix;\n\n                let x = bone.ax, y = bone.ay;\n                if (translateMix != 0) {\n                    x += (target.ax + this.data.offsetX) * translateMix;\n                    y += (target.ay + this.data.offsetY) * translateMix;\n                }\n\n                let scaleX = bone.ascaleX, scaleY = bone.ascaleY;\n                if (scaleMix > 0) {\n                    if (scaleX > 0.00001) scaleX *= ((target.ascaleX - 1 + this.data.offsetScaleX) * scaleMix) + 1;\n                    if (scaleY > 0.00001) scaleY *= ((target.ascaleY - 1 + this.data.offsetScaleY) * scaleMix) + 1;\n                }\n\n                let shearY = bone.ashearY;\n                if (shearMix > 0) shearY += (target.ashearY + this.data.offsetShearY) * shearMix;\n\n                bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n            }\n        }\n    }\n\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class TransformConstraintData extends ConstraintData {\n        bones = new Array<BoneData>();\n        target: BoneData;\n        rotateMix = 0; translateMix = 0; scaleMix = 0; shearMix = 0;\n        offsetRotation = 0; offsetX = 0; offsetY = 0; offsetScaleX = 0; offsetScaleY = 0; offsetShearY = 0;\n        relative = false;\n        local = false;\n\n        constructor (name: string) {\n            super(name, 0, false);\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n\texport class Triangulator {\n\t\tprivate convexPolygons = new Array<Array<number>>();\n\t\tprivate convexPolygonsIndices = new Array<Array<number>>();\n\n\t\tprivate indicesArray = new Array<number>();\n\t\tprivate isConcaveArray = new Array<boolean>();\n\t\tprivate triangles = new Array<number>();\n\n\t\tprivate polygonPool = new Pool<Array<number>>(() => {\n\t\t\treturn new Array<number>();\n\t\t});\n\n\t\tprivate polygonIndicesPool = new Pool<Array<number>>(() => {\n\t\t\treturn new Array<number>();\n\t\t});\n\n\t\tpublic triangulate (verticesArray: ArrayLike<number>): Array<number> {\n\t\t\tlet vertices = verticesArray;\n\t\t\tlet vertexCount = verticesArray.length >> 1;\n\n\t\t\tlet indices = this.indicesArray;\n\t\t\tindices.length = 0;\n\t\t\tfor (let i = 0; i < vertexCount; i++)\n\t\t\t\tindices[i] = i;\n\n\t\t\tlet isConcave = this.isConcaveArray;\n\t\t\tisConcave.length = 0;\n\t\t\tfor (let i = 0, n = vertexCount; i < n; ++i)\n\t\t\t\tisConcave[i] = Triangulator.isConcave(i, vertexCount, vertices, indices);\n\n\t\t\tlet triangles = this.triangles;\n\t\t\ttriangles.length = 0;\n\n\t\t\twhile (vertexCount > 3) {\n\t\t\t\t// Find ear tip.\n\t\t\t\tlet previous = vertexCount - 1, i = 0, next = 1;\n\t\t\t\twhile (true) {\n\t\t\t\t\touter:\n\t\t\t\t\tif (!isConcave[i]) {\n\t\t\t\t\t\tlet p1 = indices[previous] << 1, p2 = indices[i] << 1, p3 = indices[next] << 1;\n\t\t\t\t\t\tlet p1x = vertices[p1], p1y = vertices[p1 + 1];\n\t\t\t\t\t\tlet p2x = vertices[p2], p2y = vertices[p2 + 1];\n\t\t\t\t\t\tlet p3x = vertices[p3], p3y = vertices[p3 + 1];\n\t\t\t\t\t\tfor (let ii = (next + 1) % vertexCount; ii != previous; ii = (ii + 1) % vertexCount) {\n\t\t\t\t\t\t\tif (!isConcave[ii]) continue;\n\t\t\t\t\t\t\tlet v = indices[ii] << 1;\n\t\t\t\t\t\t\tlet vx = vertices[v], vy = vertices[v + 1];\n\t\t\t\t\t\t\tif (Triangulator.positiveArea(p3x, p3y, p1x, p1y, vx, vy)) {\n\t\t\t\t\t\t\t\tif (Triangulator.positiveArea(p1x, p1y, p2x, p2y, vx, vy)) {\n\t\t\t\t\t\t\t\t\tif (Triangulator.positiveArea(p2x, p2y, p3x, p3y, vx, vy)) break outer;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (next == 0) {\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif (!isConcave[i]) break;\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t} while (i > 0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tprevious = i;\n\t\t\t\t\ti = next;\n\t\t\t\t\tnext = (next + 1) % vertexCount;\n\t\t\t\t}\n\n\t\t\t\t// Cut ear tip.\n\t\t\t\ttriangles.push(indices[(vertexCount + i - 1) % vertexCount]);\n\t\t\t\ttriangles.push(indices[i]);\n\t\t\t\ttriangles.push(indices[(i + 1) % vertexCount]);\n\t\t\t\tindices.splice(i, 1);\n\t\t\t\tisConcave.splice(i, 1);\n\t\t\t\tvertexCount--;\n\n\t\t\t\tlet previousIndex = (vertexCount + i - 1) % vertexCount;\n\t\t\t\tlet nextIndex = i == vertexCount ? 0 : i;\n\t\t\t\tisConcave[previousIndex] = Triangulator.isConcave(previousIndex, vertexCount, vertices, indices);\n\t\t\t\tisConcave[nextIndex] = Triangulator.isConcave(nextIndex, vertexCount, vertices, indices);\n\t\t\t}\n\n\t\t\tif (vertexCount == 3) {\n\t\t\t\ttriangles.push(indices[2]);\n\t\t\t\ttriangles.push(indices[0]);\n\t\t\t\ttriangles.push(indices[1]);\n\t\t\t}\n\n\t\t\treturn triangles;\n\t\t}\n\n\t\tdecompose (verticesArray: Array<number>, triangles: Array<number>) : Array<Array<number>> {\n\t\t\tlet vertices = verticesArray;\n\t\t\tlet convexPolygons = this.convexPolygons;\n\t\t\tthis.polygonPool.freeAll(convexPolygons);\n\t\t\tconvexPolygons.length = 0;\n\n\t\t\tlet convexPolygonsIndices = this.convexPolygonsIndices;\n\t\t\tthis.polygonIndicesPool.freeAll(convexPolygonsIndices);\n\t\t\tconvexPolygonsIndices.length = 0;\n\n\t\t\tlet polygonIndices = this.polygonIndicesPool.obtain();\n\t\t\tpolygonIndices.length = 0;\n\n\t\t\tlet polygon = this.polygonPool.obtain();\n\t\t\tpolygon.length = 0;\n\n\t\t\t// Merge subsequent triangles if they form a triangle fan.\n\t\t\tlet fanBaseIndex = -1, lastWinding = 0;\n\t\t\tfor (let i = 0, n = triangles.length; i < n; i += 3) {\n\t\t\t\tlet t1 = triangles[i] << 1, t2 = triangles[i + 1] << 1, t3 = triangles[i + 2] << 1;\n\t\t\t\tlet x1 = vertices[t1], y1 = vertices[t1 + 1];\n\t\t\t\tlet x2 = vertices[t2], y2 = vertices[t2 + 1];\n\t\t\t\tlet x3 = vertices[t3], y3 = vertices[t3 + 1];\n\n\t\t\t\t// If the base of the last triangle is the same as this triangle, check if they form a convex polygon (triangle fan).\n\t\t\t\tlet merged = false;\n\t\t\t\tif (fanBaseIndex == t1) {\n\t\t\t\t\tlet o = polygon.length - 4;\n\t\t\t\t\tlet winding1 = Triangulator.winding(polygon[o], polygon[o + 1], polygon[o + 2], polygon[o + 3], x3, y3);\n\t\t\t\t\tlet winding2 = Triangulator.winding(x3, y3, polygon[0], polygon[1], polygon[2], polygon[3]);\n\t\t\t\t\tif (winding1 == lastWinding && winding2 == lastWinding) {\n\t\t\t\t\t\tpolygon.push(x3);\n\t\t\t\t\t\tpolygon.push(y3);\n\t\t\t\t\t\tpolygonIndices.push(t3);\n\t\t\t\t\t\tmerged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Otherwise make this triangle the new base.\n\t\t\t\tif (!merged) {\n\t\t\t\t\tif (polygon.length > 0) {\n\t\t\t\t\t\tconvexPolygons.push(polygon);\n\t\t\t\t\t\tconvexPolygonsIndices.push(polygonIndices);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.polygonPool.free(polygon)\n\t\t\t\t\t\tthis.polygonIndicesPool.free(polygonIndices);\n\t\t\t\t\t}\n\t\t\t\t\tpolygon = this.polygonPool.obtain();\n\t\t\t\t\tpolygon.length = 0;\n\t\t\t\t\tpolygon.push(x1);\n\t\t\t\t\tpolygon.push(y1);\n\t\t\t\t\tpolygon.push(x2);\n\t\t\t\t\tpolygon.push(y2);\n\t\t\t\t\tpolygon.push(x3);\n\t\t\t\t\tpolygon.push(y3);\n\t\t\t\t\tpolygonIndices = this.polygonIndicesPool.obtain();\n\t\t\t\t\tpolygonIndices.length = 0;\n\t\t\t\t\tpolygonIndices.push(t1);\n\t\t\t\t\tpolygonIndices.push(t2);\n\t\t\t\t\tpolygonIndices.push(t3);\n\t\t\t\t\tlastWinding = Triangulator.winding(x1, y1, x2, y2, x3, y3);\n\t\t\t\t\tfanBaseIndex = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (polygon.length > 0) {\n\t\t\t\tconvexPolygons.push(polygon);\n\t\t\t\tconvexPolygonsIndices.push(polygonIndices);\n\t\t\t}\n\n\t\t\t// Go through the list of polygons and try to merge the remaining triangles with the found triangle fans.\n\t\t\tfor (let i = 0, n = convexPolygons.length; i < n; i++) {\n\t\t\t\tpolygonIndices = convexPolygonsIndices[i];\n\t\t\t\tif (polygonIndices.length == 0) continue;\n\t\t\t\tlet firstIndex = polygonIndices[0];\n\t\t\t\tlet lastIndex = polygonIndices[polygonIndices.length - 1];\n\n\t\t\t\tpolygon = convexPolygons[i];\n\t\t\t\tlet o = polygon.length - 4;\n\t\t\t\tlet prevPrevX = polygon[o], prevPrevY = polygon[o + 1];\n\t\t\t\tlet prevX = polygon[o + 2], prevY = polygon[o + 3];\n\t\t\t\tlet firstX = polygon[0], firstY = polygon[1];\n\t\t\t\tlet secondX = polygon[2], secondY = polygon[3];\n\t\t\t\tlet winding = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, firstX, firstY);\n\n\t\t\t\tfor (let ii = 0; ii < n; ii++) {\n\t\t\t\t\tif (ii == i) continue;\n\t\t\t\t\tlet otherIndices = convexPolygonsIndices[ii];\n\t\t\t\t\tif (otherIndices.length != 3) continue;\n\t\t\t\t\tlet otherFirstIndex = otherIndices[0];\n\t\t\t\t\tlet otherSecondIndex = otherIndices[1];\n\t\t\t\t\tlet otherLastIndex = otherIndices[2];\n\n\t\t\t\t\tlet otherPoly = convexPolygons[ii];\n\t\t\t\t\tlet x3 = otherPoly[otherPoly.length - 2], y3 = otherPoly[otherPoly.length - 1];\n\n\t\t\t\t\tif (otherFirstIndex != firstIndex || otherSecondIndex != lastIndex) continue;\n\t\t\t\t\tlet winding1 = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, x3, y3);\n\t\t\t\t\tlet winding2 = Triangulator.winding(x3, y3, firstX, firstY, secondX, secondY);\n\t\t\t\t\tif (winding1 == winding && winding2 == winding) {\n\t\t\t\t\t\totherPoly.length = 0;\n\t\t\t\t\t\totherIndices.length = 0;\n\t\t\t\t\t\tpolygon.push(x3);\n\t\t\t\t\t\tpolygon.push(y3);\n\t\t\t\t\t\tpolygonIndices.push(otherLastIndex);\n\t\t\t\t\t\tprevPrevX = prevX;\n\t\t\t\t\t\tprevPrevY = prevY;\n\t\t\t\t\t\tprevX = x3;\n\t\t\t\t\t\tprevY = y3;\n\t\t\t\t\t\tii = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove empty polygons that resulted from the merge step above.\n\t\t\tfor (let i = convexPolygons.length - 1; i >= 0; i--) {\n\t\t\t\tpolygon = convexPolygons[i];\n\t\t\t\tif (polygon.length == 0) {\n\t\t\t\t\tconvexPolygons.splice(i, 1);\n\t\t\t\t\tthis.polygonPool.free(polygon);\n\t\t\t\t\tpolygonIndices = convexPolygonsIndices[i]\n\t\t\t\t\tconvexPolygonsIndices.splice(i, 1)\n\t\t\t\t\tthis.polygonIndicesPool.free(polygonIndices);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn convexPolygons;\n\t\t}\n\n\t\tprivate static isConcave (index: number, vertexCount: number, vertices: ArrayLike<number>, indices: ArrayLike<number>): boolean {\n\t\t\tlet previous = indices[(vertexCount + index - 1) % vertexCount] << 1;\n\t\t\tlet current = indices[index] << 1;\n\t\t\tlet next = indices[(index + 1) % vertexCount] << 1;\n\t\t\treturn !this.positiveArea(vertices[previous], vertices[previous + 1], vertices[current], vertices[current + 1], vertices[next],\n\t\t\t\tvertices[next + 1]);\n\t\t}\n\n\t\tprivate static positiveArea (p1x: number, p1y: number, p2x: number, p2y: number, p3x: number, p3y: number): boolean {\n\t\t\treturn p1x * (p3y - p2y) + p2x * (p1y - p3y) + p3x * (p2y - p1y) >= 0;\n\t\t}\n\n\t\tprivate static winding (p1x: number, p1y: number, p2x: number, p2y: number, p3x: number, p3y: number): number {\n\t\t\tlet px = p2x - p1x, py = p2y - p1y;\n\t\t\treturn p3x * py - p3y * px + px * p1y - p1x * py >= 0 ? 1 : -1;\n\t\t}\n\t}\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export interface Updatable {\n        update(): void;\n\n        isActive(): boolean;\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export interface Map<T> {\n        [key: string]: T;\n    }\n\n    export class IntSet {\n        array = new Array<number>();\n\n        add (value: number): boolean {\n            let contains = this.contains(value);\n            this.array[value | 0] = value | 0;\n            return !contains;\n        }\n\n        contains (value: number) {\n            return this.array[value | 0] != undefined;\n        }\n\n        remove (value: number) {\n            this.array[value | 0] = undefined;\n        }\n\n        clear () {\n            this.array.length = 0;\n        }\n    }\n\n    export interface Disposable {\n        dispose (): void;\n    }\n\n    export interface Restorable {\n        restore (): void;\n    }\n\n    export class Color {\n        public static WHITE = new Color(1, 1, 1, 1);\n        public static RED = new Color(1, 0, 0, 1);\n        public static GREEN = new Color(0, 1, 0, 1);\n        public static BLUE = new Color(0, 0, 1, 1);\n        public static MAGENTA = new Color(1, 0, 1, 1);\n\n        constructor (public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 0) {\n        }\n\n        set (r: number, g: number, b: number, a: number) {\n            this.r = r;\n            this.g = g;\n            this.b = b;\n            this.a = a;\n            this.clamp();\n            return this;\n        }\n\n        setFromColor (c: Color) {\n            this.r = c.r;\n            this.g = c.g;\n            this.b = c.b;\n            this.a = c.a;\n            return this;\n        }\n\n        setFromString (hex: string) {\n            hex = hex.charAt(0) == '#' ? hex.substr(1) : hex;\n            this.r = parseInt(hex.substr(0, 2), 16) / 255.0;\n            this.g = parseInt(hex.substr(2, 2), 16) / 255.0;\n            this.b = parseInt(hex.substr(4, 2), 16) / 255.0;\n            this.a = (hex.length != 8 ? 255 : parseInt(hex.substr(6, 2), 16)) / 255.0;\n            return this;\n        }\n\n        add (r: number, g: number, b: number, a: number) {\n            this.r += r;\n            this.g += g;\n            this.b += b;\n            this.a += a;\n            this.clamp();\n            return this;\n        }\n\n        clamp () {\n            if (this.r < 0) this.r = 0;\n            else if (this.r > 1) this.r = 1;\n\n            if (this.g < 0) this.g = 0;\n            else if (this.g > 1) this.g = 1;\n\n            if (this.b < 0) this.b = 0;\n            else if (this.b > 1) this.b = 1;\n\n            if (this.a < 0) this.a = 0;\n            else if (this.a > 1) this.a = 1;\n            return this;\n        }\n\n        static rgba8888ToColor(color: Color, value: number) {\n            color.r = ((value & 0xff000000) >>> 24) / 255;\n            color.g = ((value & 0x00ff0000) >>> 16) / 255;\n            color.b = ((value & 0x0000ff00) >>> 8) / 255;\n            color.a = ((value & 0x000000ff)) / 255;\n        }\n\n        static rgb888ToColor (color: Color, value: number) {\n            color.r = ((value & 0x00ff0000) >>> 16) / 255;\n            color.g = ((value & 0x0000ff00) >>> 8) / 255;\n            color.b = ((value & 0x000000ff)) / 255;\n        }\n    }\n\n    export class MathUtils {\n        static PI = 3.1415927;\n        static PI2 = MathUtils.PI * 2;\n        static radiansToDegrees = 180 / MathUtils.PI;\n        static radDeg = MathUtils.radiansToDegrees;\n        static degreesToRadians = MathUtils.PI / 180;\n        static degRad = MathUtils.degreesToRadians;\n\n        static clamp (value: number, min: number, max: number) {\n            if (value < min) return min;\n            if (value > max) return max;\n            return value;\n        }\n\n        static cosDeg (degrees: number) {\n            return Math.cos(degrees * MathUtils.degRad);\n        }\n\n        static sinDeg (degrees: number) {\n            return Math.sin(degrees * MathUtils.degRad);\n        }\n\n        static signum (value: number): number {\n            return value > 0 ? 1 : value < 0 ? -1 : 0;\n        }\n\n        static toInt (x: number) {\n            return x > 0 ? Math.floor(x) : Math.ceil(x);\n        }\n\n        static cbrt (x: number) {\n            let y = Math.pow(Math.abs(x), 1/3);\n            return x < 0 ? -y : y;\n        }\n\n        static randomTriangular (min: number, max: number): number {\n            return MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);\n        }\n\n        static randomTriangularWith (min: number, max: number, mode: number): number {\n            let u = Math.random();\n            let d = max - min;\n            if (u <= (mode - min) / d) return min + Math.sqrt(u * d * (mode - min));\n            return max - Math.sqrt((1 - u) * d * (max - mode));\n        }\n    }\n\n    export abstract class Interpolation {\n        protected abstract applyInternal (a: number): number;\n        apply(start: number, end: number, a: number): number {\n            return start + (end - start) * this.applyInternal(a);\n        }\n    }\n\n    export class Pow extends Interpolation {\n        protected power = 2;\n\n        constructor (power: number) {\n            super();\n            this.power = power;\n        }\n\n        applyInternal (a: number): number {\n            if (a <= 0.5) return Math.pow(a * 2, this.power) / 2;\n            return Math.pow((a - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;\n        }\n    }\n\n    export class PowOut extends Pow {\n        constructor (power: number) {\n            super(power);\n        }\n\n        applyInternal (a: number) : number {\n            return Math.pow(a - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;\n        }\n    }\n\n    export class Utils {\n        static SUPPORTS_TYPED_ARRAYS = typeof(Float32Array) !== \"undefined\";\n\n        static arrayCopy<T> (source: ArrayLike<T>, sourceStart: number, dest: ArrayLike<T>, destStart: number, numElements: number) {\n            for (let i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {\n                dest[j] = source[i];\n            }\n        }\n\n        static setArraySize<T> (array: Array<T>, size: number, value: any = 0): Array<T> {\n            let oldSize = array.length;\n            if (oldSize == size) return array;\n            array.length = size;\n            if (oldSize < size) {\n                for (let i = oldSize; i < size; i++) array[i] = value;\n            }\n            return array;\n        }\n\n        static ensureArrayCapacity<T> (array: Array<T>, size: number, value: any = 0): Array<T> {\n            if (array.length >= size) return array;\n            return Utils.setArraySize(array, size, value);\n        }\n\n        static newArray<T> (size: number, defaultValue: T): Array<T> {\n            let array = new Array<T>(size);\n            for (let i = 0; i < size; i++) array[i] = defaultValue;\n            return array;\n        }\n\n        static newFloatArray (size: number): ArrayLike<number> {\n            if (Utils.SUPPORTS_TYPED_ARRAYS) {\n                return new Float32Array(size)\n            } else {\n                let array = new Array<number>(size);\n                for (let i = 0; i < array.length; i++) array[i] = 0;\n                return array;\n            }\n        }\n\n        static newShortArray (size: number): ArrayLike<number> {\n            if (Utils.SUPPORTS_TYPED_ARRAYS) {\n                return new Int16Array(size)\n            } else {\n                let array = new Array<number>(size);\n                for (let i = 0; i < array.length; i++) array[i] = 0;\n                return array;\n            }\n        }\n\n        static toFloatArray (array: Array<number>) {\n            return Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;\n        }\n\n        static toSinglePrecision (value: number) {\n            return Utils.SUPPORTS_TYPED_ARRAYS ? Math.fround(value) : value;\n        }\n\n        // This function is used to fix WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n        static webkit602BugfixHelper (alpha: number, blend: MixBlend) {\n\n        }\n\n        static contains<T> (array: Array<T>, element: T, identity = true) {\n            for (let i = 0; i < array.length; i++) {\n                if (array[i] == element) return true;\n            }\n            return false;\n        }\n    }\n\n    export class DebugUtils {\n        static logBones(skeleton: Skeleton) {\n            for (let i = 0; i < skeleton.bones.length; i++) {\n                let bone = skeleton.bones[i];\n                let mat = bone.matrix;\n                console.log(bone.data.name + \", \" + mat.a + \", \" + mat.b + \", \" + mat.c + \", \" + mat.d + \", \" + mat.tx + \", \" + mat.ty);\n            }\n        }\n    }\n\n    export class Pool<T> {\n        private items = new Array<T>();\n        private instantiator: () => T;\n\n        constructor (instantiator: () => T) {\n            this.instantiator = instantiator;\n        }\n\n        obtain () {\n            return this.items.length > 0 ? this.items.pop() : this.instantiator();\n        }\n\n        free (item: T) {\n            if ((item as any).reset) (item as any).reset();\n            this.items.push(item);\n        }\n\n        freeAll (items: ArrayLike<T>) {\n            for (let i = 0; i < items.length; i++) {\n                if ((items[i] as any).reset) (items[i] as any).reset();\n                this.items[i] = items[i];\n            }\n        }\n\n        clear () {\n            this.items.length = 0;\n        }\n    }\n\n    export class Vector2 {\n        constructor (public x = 0, public y = 0) {\n        }\n\n        set (x: number, y: number): Vector2 {\n            this.x = x;\n            this.y = y;\n            return this;\n        }\n\n        length () {\n            let x = this.x;\n            let y = this.y;\n            return Math.sqrt(x * x + y * y);\n        }\n\n        normalize () {\n            let len = this.length();\n            if (len != 0) {\n                this.x /= len;\n                this.y /= len;\n            }\n            return this;\n        }\n    }\n\n    export class TimeKeeper {\n        maxDelta = 0.064;\n        framesPerSecond = 0;\n        delta = 0;\n        totalTime = 0;\n\n        private lastTime = Date.now() / 1000;\n        private frameCount = 0;\n        private frameTime = 0;\n\n        update () {\n            let now = Date.now() / 1000;\n            this.delta = now - this.lastTime;\n            this.frameTime += this.delta;\n            this.totalTime += this.delta;\n            if (this.delta > this.maxDelta) this.delta = this.maxDelta;\n            this.lastTime = now;\n\n            this.frameCount++;\n            if (this.frameTime > 1) {\n                this.framesPerSecond = this.frameCount / this.frameTime;\n                this.frameTime = 0;\n                this.frameCount = 0;\n            }\n        }\n    }\n\n    export interface ArrayLike<T> {\n        length: number;\n        [n: number]: T;\n    }\n\n    export class WindowedMean {\n        values: Array<number>;\n        addedValues = 0;\n        lastValue = 0;\n        mean = 0;\n        dirty = true;\n\n        constructor (windowSize: number = 32) {\n            this.values = new Array<number>(windowSize);\n        }\n\n        hasEnoughData () {\n            return this.addedValues >= this.values.length;\n        }\n\n        addValue (value: number) {\n            if (this.addedValues < this.values.length)\n                this.addedValues++;\n            this.values[this.lastValue++] = value;\n            if (this.lastValue > this.values.length - 1) this.lastValue = 0;\n            this.dirty = true;\n        }\n\n        getMean () {\n            if (this.hasEnoughData()) {\n                if (this.dirty) {\n                    let mean = 0;\n                    for (let i = 0; i < this.values.length; i++) {\n                        mean += this.values[i];\n                    }\n                    this.mean = mean / this.values.length;\n                    this.dirty = false;\n                }\n                return this.mean;\n            } else {\n                return 0;\n            }\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n\texport interface VertexEffect {\n\t\tbegin(skeleton: Skeleton): void;\n\t\ttransform(position: Vector2, uv: Vector2, light: Color, dark: Color): void;\n\t\tend(): void;\n\t}\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export abstract class Attachment {\n        name: string;\n\n        constructor(name: string) {\n            if (name == null) throw new Error(\"name cannot be null.\");\n            this.name = name;\n        }\n\n        abstract copy (): Attachment;\n    }\n\n    export abstract class VertexAttachment extends Attachment {\n        private static nextID = 0;\n\n        id = (VertexAttachment.nextID++ & 65535) << 11;\n        bones: Array<number>;\n        vertices: ArrayLike<number>;\n        worldVerticesLength = 0;\n        deformAttachment: VertexAttachment = this;\n\n        constructor(name: string) {\n            super(name);\n        }\n\n        computeWorldVerticesOld(slot: Slot, worldVertices: ArrayLike<number>) {\n            this.computeWorldVertices(slot, 0, this.worldVerticesLength, worldVertices, 0, 2);\n        }\n\n        /** Transforms local vertices to world coordinates.\n         * @param start The index of the first local vertex value to transform. Each vertex has 2 values, x and y.\n         * @param count The number of world vertex values to output. Must be <= {@link #getWorldVerticesLength()} - start.\n         * @param worldVertices The output world vertices. Must have a length >= offset + count.\n         * @param offset The worldVertices index to begin writing values. */\n        computeWorldVertices (slot: Slot, start: number, count: number, worldVertices: ArrayLike<number>, offset: number, stride: number) {\n            count = offset + (count >> 1) * stride;\n            let skeleton = slot.bone.skeleton;\n            let deformArray = slot.deform;\n            let vertices = this.vertices;\n            let bones = this.bones;\n            if (bones == null) {\n                if (deformArray.length > 0) vertices = deformArray;\n                let mat = slot.bone.matrix;\n                let x = mat.tx;\n                let y = mat.ty;\n                let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\n                for (let v = start, w = offset; w < count; v += 2, w += stride) {\n                    let vx = vertices[v], vy = vertices[v + 1];\n                    worldVertices[w] = vx * a + vy * b + x;\n                    worldVertices[w + 1] = vx * c + vy * d + y;\n                }\n                return;\n            }\n            let v = 0, skip = 0;\n            for (let i = 0; i < start; i += 2) {\n                let n = bones[v];\n                v += n + 1;\n                skip += n;\n            }\n            let skeletonBones = skeleton.bones;\n            if (deformArray.length == 0) {\n                for (let w = offset, b = skip * 3; w < count; w += stride) {\n                    let wx = 0, wy = 0;\n                    let n = bones[v++];\n                    n += v;\n                    for (; v < n; v++, b += 3) {\n                        let mat = skeletonBones[bones[v]].matrix;\n                        let vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];\n                        wx += (vx * mat.a + vy * mat.c + mat.tx) * weight;\n                        wy += (vx * mat.b + vy * mat.d + mat.ty) * weight;\n                    }\n                    worldVertices[w] = wx;\n                    worldVertices[w + 1] = wy;\n                }\n            } else {\n                let deform = deformArray;\n                for (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {\n                    let wx = 0, wy = 0;\n                    let n = bones[v++];\n                    n += v;\n                    for (; v < n; v++, b += 3, f += 2) {\n                        let mat = skeletonBones[bones[v]].matrix;\n                        let vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];\n                        wx += (vx * mat.a + vy * mat.c + mat.tx) * weight;\n                        wy += (vx * mat.b + vy * mat.d + mat.ty) * weight;\n                    }\n                    worldVertices[w] = wx;\n                    worldVertices[w + 1] = wy;\n                }\n            }\n        }\n\n        copyTo (attachment: VertexAttachment) {\n            if (this.bones != null) {\n                attachment.bones = new Array<number>(this.bones.length);\n                Utils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);\n            } else\n                attachment.bones = null;\n\n            if (this.vertices != null) {\n                attachment.vertices = Utils.newFloatArray(this.vertices.length);\n                Utils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);\n            } else\n                attachment.vertices = null;\n\n            attachment.worldVerticesLength = this.worldVerticesLength;\n            attachment.deformAttachment = this.deformAttachment;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export interface AttachmentLoader {\n        /** @return May be null to not load an attachment. */\n        newRegionAttachment (skin: Skin, name: string, path: string): RegionAttachment;\n\n        /** @return May be null to not load an attachment. */\n        newMeshAttachment (skin: Skin, name: string, path: string): MeshAttachment;\n\n        /** @return May be null to not load an attachment. */\n        newBoundingBoxAttachment (skin: Skin, name: string): BoundingBoxAttachment;\n\n        /** @return May be null to not load an attachment */\n        newPathAttachment(skin: Skin, name: string): PathAttachment;\n\n        /** @return May be null to not load an attachment */\n        newPointAttachment(skin: Skin, name: string): PointAttachment;\n\n        /** @return May be null to not load an attachment */\n        newClippingAttachment(skin: Skin, name: string): ClippingAttachment;\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export enum AttachmentType {\n        Region, BoundingBox, Mesh, LinkedMesh, Path, Point, Clipping\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class BoundingBoxAttachment extends VertexAttachment {\n        color = new Color(1, 1, 1, 1);\n\n        constructor (name: string) {\n            super(name);\n        }\n\n        copy (): Attachment {\n            let copy = new BoundingBoxAttachment(name);\n            this.copyTo(copy);\n            copy.color.setFromColor(this.color);\n            return copy;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class ClippingAttachment extends VertexAttachment {\n        endSlot: SlotData;\n\n        // Nonessential.\n        color = new Color(0.2275, 0.2275, 0.8078, 1); // ce3a3aff\n\n        constructor (name: string) {\n            super(name);\n        }\n\n        copy (): Attachment {\n            let copy = new ClippingAttachment(name);\n            this.copyTo(copy);\n            copy.endSlot = this.endSlot;\n            copy.color.setFromColor(this.color);\n            return copy;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class MeshAttachment extends VertexAttachment {\n        region: TextureRegion;\n        path: string;\n        regionUVs: Float32Array; uvs: ArrayLike<number>;\n        triangles: Array<number>;\n        color = new Color(1, 1, 1, 1);\n        width: number;\n        height: number;\n        hullLength: number;\n        edges: Array<number>;\n        private parentMesh: MeshAttachment;\n        tempColor = new Color(0, 0, 0, 0);\n\n        constructor (name: string) {\n            super(name);\n        }\n\n        getParentMesh () {\n            return this.parentMesh;\n        }\n\n        /** @param parentMesh May be null. */\n        setParentMesh (parentMesh: MeshAttachment) {\n            this.parentMesh = parentMesh;\n            if (parentMesh != null) {\n                this.bones = parentMesh.bones;\n                this.vertices = parentMesh.vertices;\n                this.worldVerticesLength = parentMesh.worldVerticesLength;\n                this.regionUVs = parentMesh.regionUVs;\n                this.triangles = parentMesh.triangles;\n                this.hullLength = parentMesh.hullLength;\n                this.worldVerticesLength = parentMesh.worldVerticesLength\n            }\n        }\n\n        copy (): Attachment {\n            if (this.parentMesh != null) return this.newLinkedMesh();\n\n            let copy = new MeshAttachment(this.name);\n            copy.region = this.region;\n            copy.path = this.path;\n            copy.color.setFromColor(this.color);\n\n            this.copyTo(copy);\n            copy.regionUVs = new Float32Array(this.regionUVs.length);\n            Utils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);\n            copy.uvs = new Array<number>(this.uvs.length);\n            Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, this.uvs.length);\n            copy.triangles = new Array<number>(this.triangles.length);\n            Utils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);\n            copy.hullLength = this.hullLength;\n\n            // Nonessential.\n            if (this.edges != null) {\n                copy.edges = new Array<number>(this.edges.length);\n                Utils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);\n            }\n            copy.width = this.width;\n            copy.height = this.height;\n\n            return copy;\n        }\n\n        newLinkedMesh (): MeshAttachment {\n            let copy = new MeshAttachment(this.name);\n            copy.region = this.region;\n            copy.path = this.path;\n            copy.color.setFromColor(this.color);\n            copy.deformAttachment = this.deformAttachment;\n            copy.setParentMesh(this.parentMesh != null ? this.parentMesh : this);\n            // copy.updateUVs();\n            return copy;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class PathAttachment extends VertexAttachment {\n        lengths: Array<number>;\n        closed = false; constantSpeed = false;\n        color = new Color(1, 1, 1, 1);\n\n        constructor (name: string) {\n            super(name);\n        }\n\n        copy (): Attachment {\n            let copy = new PathAttachment(name);\n            this.copyTo(copy);\n            copy.lengths = new Array<number>(this.lengths.length);\n            Utils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);\n            copy.closed = closed;\n            copy.constantSpeed = this.constantSpeed;\n            copy.color.setFromColor(this.color);\n            return copy;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class PointAttachment extends VertexAttachment {\n        x: number; y: number; rotation: number;\n        color = new Color(0.38, 0.94, 0, 1);\n\n        constructor (name: string) {\n            super(name);\n        }\n\n        computeWorldPosition(bone: Bone, point: Vector2) {\n            const mat = bone.matrix;\n            point.x = this.x * mat.a + this.y * mat.c + bone.worldX;\n            point.y = this.x * mat.b + this.y * mat.d + bone.worldY;\n            return point;\n        }\n\n        computeWorldRotation(bone: Bone) {\n            const mat = bone.matrix;\n            let cos = MathUtils.cosDeg(this.rotation), sin = MathUtils.sinDeg(this.rotation);\n            let x = cos * mat.a + sin * mat.c;\n            let y = cos * mat.b + sin * mat.d;\n            return Math.atan2(y, x) * MathUtils.radDeg;\n        }\n\n        copy (): Attachment {\n            let copy = new PointAttachment(name);\n            copy.x = this.x;\n            copy.y = this.y;\n            copy.rotation = this.rotation;\n            copy.color.setFromColor(this.color);\n            return copy;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n    export class RegionAttachment extends Attachment {\n        static OX1 = 0;\n        static OY1 = 1;\n        static OX2 = 2;\n        static OY2 = 3;\n        static OX3 = 4;\n        static OY3 = 5;\n        static OX4 = 6;\n        static OY4 = 7;\n\n        static X1 = 0;\n        static Y1 = 1;\n        static C1R = 2;\n        static C1G = 3;\n        static C1B = 4;\n        static C1A = 5;\n        static U1 = 6;\n        static V1 = 7;\n\n        static X2 = 8;\n        static Y2 = 9;\n        static C2R = 10;\n        static C2G = 11;\n        static C2B = 12;\n        static C2A = 13;\n        static U2 = 14;\n        static V2 = 15;\n\n        static X3 = 16;\n        static Y3 = 17;\n        static C3R = 18;\n        static C3G = 19;\n        static C3B = 20;\n        static C3A = 21;\n        static U3 = 22;\n        static V3 = 23;\n\n        static X4 = 24;\n        static Y4 = 25;\n        static C4R = 26;\n        static C4G = 27;\n        static C4B = 28;\n        static C4A = 29;\n        static U4 = 30;\n        static V4 = 31;\n\n        x = 0;\n        y = 0;\n        scaleX = 1;\n        scaleY = 1;\n        rotation = 0;\n        width = 0;\n        height = 0;\n        color = new Color(1, 1, 1, 1);\n\n        path: string;\n        rendererObject: any;\n        region: TextureRegion;\n\n        offset = Utils.newFloatArray(8);\n        uvs = Utils.newFloatArray(8);\n\n        tempColor = new Color(1, 1, 1, 1);\n\n        constructor(name: string) {\n            super(name);\n        }\n\n        updateOffset(): void {\n            let regionScaleX = this.width / this.region.originalWidth * this.scaleX;\n            let regionScaleY = this.height / this.region.originalHeight * this.scaleY;\n            let localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;\n            let localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;\n            let localX2 = localX + this.region.width * regionScaleX;\n            let localY2 = localY + this.region.height * regionScaleY;\n            let radians = this.rotation * Math.PI / 180;\n            let cos = Math.cos(radians);\n            let sin = Math.sin(radians);\n            let localXCos = localX * cos + this.x;\n            let localXSin = localX * sin;\n            let localYCos = localY * cos + this.y;\n            let localYSin = localY * sin;\n            let localX2Cos = localX2 * cos + this.x;\n            let localX2Sin = localX2 * sin;\n            let localY2Cos = localY2 * cos + this.y;\n            let localY2Sin = localY2 * sin;\n            let offset = this.offset;\n            offset[RegionAttachment.OX1] = localXCos - localYSin;\n            offset[RegionAttachment.OY1] = localYCos + localXSin;\n            offset[RegionAttachment.OX2] = localXCos - localY2Sin;\n            offset[RegionAttachment.OY2] = localY2Cos + localXSin;\n            offset[RegionAttachment.OX3] = localX2Cos - localY2Sin;\n            offset[RegionAttachment.OY3] = localY2Cos + localX2Sin;\n            offset[RegionAttachment.OX4] = localX2Cos - localYSin;\n            offset[RegionAttachment.OY4] = localYCos + localX2Sin;\n        }\n\n        setRegion(region: TextureRegion): void {\n            this.region = region;\n            let uvs = this.uvs;\n            if (region.rotate) {\n                uvs[2] = region.u;\n                uvs[3] = region.v2;\n                uvs[4] = region.u;\n                uvs[5] = region.v;\n                uvs[6] = region.u2;\n                uvs[7] = region.v;\n                uvs[0] = region.u2;\n                uvs[1] = region.v2;\n            } else {\n                uvs[0] = region.u;\n                uvs[1] = region.v2;\n                uvs[2] = region.u;\n                uvs[3] = region.v;\n                uvs[4] = region.u2;\n                uvs[5] = region.v;\n                uvs[6] = region.u2;\n                uvs[7] = region.v2;\n            }\n        }\n\n        computeWorldVertices(bone: Bone, worldVertices: ArrayLike<number>, offset: number, stride: number) {\n            let vertexOffset = this.offset;\n            let mat = bone.matrix;\n            let x = mat.tx, y = mat.ty;\n            let a = mat.a, b = mat.c, c = mat.b, d = mat.d;\n            let offsetX = 0, offsetY = 0;\n\n            offsetX = vertexOffset[RegionAttachment.OX1];\n            offsetY = vertexOffset[RegionAttachment.OY1];\n            worldVertices[offset] = offsetX * a + offsetY * b + x; // br\n            worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n            offset += stride;\n\n            offsetX = vertexOffset[RegionAttachment.OX2];\n            offsetY = vertexOffset[RegionAttachment.OY2];\n            worldVertices[offset] = offsetX * a + offsetY * b + x; // bl\n            worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n            offset += stride;\n\n            offsetX = vertexOffset[RegionAttachment.OX3];\n            offsetY = vertexOffset[RegionAttachment.OY3];\n            worldVertices[offset] = offsetX * a + offsetY * b + x; // ul\n            worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n            offset += stride;\n\n            offsetX = vertexOffset[RegionAttachment.OX4];\n            offsetY = vertexOffset[RegionAttachment.OY4];\n            worldVertices[offset] = offsetX * a + offsetY * b + x; // ur\n            worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        }\n\n        copy (): Attachment {\n            let copy = new RegionAttachment(name);\n            copy.region = this.region;\n            copy.rendererObject = this.rendererObject;\n            copy.path = this.path;\n            copy.x = this.x;\n            copy.y = this.y;\n            copy.scaleX = this.scaleX;\n            copy.scaleY = this.scaleY;\n            copy.rotation = this.rotation;\n            copy.width = this.width;\n            copy.height = this.height;\n            Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\n            Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\n            copy.color.setFromColor(this.color);\n            return copy;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n\texport class JitterEffect implements VertexEffect {\n\t\tjitterX = 0;\n\t\tjitterY = 0;\n\n\t\tconstructor (jitterX: number, jitterY: number) {\n\t\t\tthis.jitterX = jitterX;\n\t\t\tthis.jitterY = jitterY;\n\t\t}\n\n\t\tbegin(skeleton: Skeleton): void {\n\t\t}\n\n\t\ttransform(position: Vector2, uv: Vector2, light: Color, dark: Color): void {\n\t\t\tposition.x += MathUtils.randomTriangular(-this.jitterX, this.jitterY);\n\t\t\tposition.y += MathUtils.randomTriangular(-this.jitterX, this.jitterY);\n\t\t}\n\n\t\tend(): void {\n\t\t}\n\t}\n}\n","/******************************************************************************\n * Spine Runtimes Software License v2.5\n *\n * Copyright (c) 2013-2016, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable, and\n * non-transferable license to use, install, execute, and perform the Spine\n * Runtimes software and derivative works solely for personal or internal\n * use. Without the written permission of Esoteric Software (see Section 2 of\n * the Spine Software License Agreement), you may not (a) modify, translate,\n * adapt, or develop new applications using the Spine Runtimes or otherwise\n * create derivative works or improvements of the Spine Runtimes or (b) remove,\n * delete, alter, or obscure any trademarks or any copyright, trademark, patent,\n * or other intellectual property or proprietary rights notices on or in the\n * Software, including any copy thereof. Redistributions in binary or source\n * form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, BUSINESS INTERRUPTION, OR LOSS OF\n * USE, DATA, OR PROFITS) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nnamespace pixi_spine.core {\n\texport class SwirlEffect implements VertexEffect {\n\t\tstatic interpolation = new PowOut(2);\n\t\tcenterX = 0;\n\t\tcenterY = 0;\n\t\tradius = 0;\n\t\tangle = 0;\n\t\tprivate worldX = 0;\n\t\tprivate worldY = 0;\n\n\t\tconstructor (radius: number) {\n\t\t\tthis.radius = radius;\n\t\t}\n\n\t\tbegin(skeleton: Skeleton): void {\n\t\t\tthis.worldX = skeleton.x + this.centerX;\n\t\t\tthis.worldY = skeleton.y + this.centerY;\n\t\t}\n\n\t\ttransform(position: Vector2, uv: Vector2, light: Color, dark: Color): void {\n\t\t\tlet radAngle = this.angle * MathUtils.degreesToRadians;\n\t\t\tlet x = position.x - this.worldX;\n\t\t\tlet y = position.y - this.worldY;\n\t\t\tlet dist = Math.sqrt(x * x + y * y);\n\t\t\tif (dist < this.radius) {\n\t\t\t\tlet theta = SwirlEffect.interpolation.apply(0, radAngle, (this.radius - dist) / this.radius);\n\t\t\t\tlet cos = Math.cos(theta);\n\t\t\t\tlet sin = Math.sin(theta);\n\t\t\t\tposition.x = cos * x - sin * y + this.worldX;\n\t\t\t\tposition.y = sin * x + cos * y + this.worldY;\n\t\t\t}\n\t\t}\n\n\t\tend(): void {\n\t\t}\n\t}\n}\n","interface Math {\n    fround(n: number): number;\n}\n\n(() => {\n    if (!Math.fround) {\n        Math.fround = Math.fround = (function(array) {\n            return function(x: number) {\n                return array[0] = x, array[0];\n            };\n        })(new Float32Array(1));\n    }\n})();\n","/// <reference types=\"pixi.js\" />\n/// <reference path=\"polyfills.ts\" />\n/// <reference path=\"core/Bone.ts\" />\nnamespace pixi_spine {\n    /* Esoteric Software SPINE wrapper for pixi.js */\n    core.Bone.yDown = true;\n\n    let tempRgb = [0, 0, 0];\n\n    export interface ISpineDisplayObject extends PIXI.DisplayObject {\n        region?: core.TextureRegion;\n        attachment?: core.Attachment;\n    }\n\n    export class SpineSprite extends PIXI.Sprite implements ISpineDisplayObject {\n        region?: core.TextureRegion = null;\n        attachment?: core.Attachment = null;\n    }\n\n    const gp = PIXI.GraphicsGeometry.prototype as any;\n    if (!gp.invalidate) {\n        let tmp = [];\n        gp.invalidate = function() {\n            const t = this.graphicsData;\n            tmp.push(0);\n            this.graphicsData = tmp;\n            this.clear();\n            this.graphicsData = t;\n        }\n    }\n\n    export class SpineMesh extends PIXI.SimpleMesh implements ISpineDisplayObject {\n        region?: core.TextureRegion = null;\n        attachment?: core.Attachment = null;\n\n        constructor(texture: PIXI.Texture, vertices?: Float32Array, uvs?: Float32Array, indices?: Uint16Array, drawMode?: number) {\n            super(texture, vertices, uvs, indices, drawMode);\n        }\n    }\n\n    /**\n     * A class that enables the you to import and run your spine animations in pixi.\n     * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\n     * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\n     *\n     * ```js\n     * let spineAnimation = new spine(spineData);\n     * ```\n     *\n     * @class\n     * @extends Container\n     * @memberof spine\n     * @param spineData {object} The spine data loaded from a spine atlas.\n     */\n    export class Spine extends PIXI.Container {\n        static globalAutoUpdate: boolean = true;\n        static globalDelayLimit: number  = 0;\n\n        tintRgb: ArrayLike<number>;\n        spineData: core.SkeletonData;\n        skeleton: core.Skeleton;\n        stateData: core.AnimationStateData;\n        state: core.AnimationState;\n        slotContainers: Array<PIXI.Container>;\n        tempClipContainers: Array<PIXI.Container>;\n        localDelayLimit: number;\n        private _autoUpdate: boolean;\n        private _visible: boolean;\n\n        constructor(spineData: core.SkeletonData) {\n            super();\n\n            if (!spineData) {\n                throw new Error('The spineData param is required.');\n            }\n\n            if ((typeof spineData) === \"string\") {\n                throw new Error('spineData param cant be string. Please use spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\n            }\n\n            /**\n             * The spineData object\n             *\n             * @member {object}\n             */\n            this.spineData = spineData;\n\n            /**\n             * A spine Skeleton object\n             *\n             * @member {object}\n             */\n            this.skeleton = new core.Skeleton(spineData);\n            this.skeleton.updateWorldTransform();\n\n            /**\n             * A spine AnimationStateData object created from the spine data passed in the constructor\n             *\n             * @member {object}\n             */\n            this.stateData = new core.AnimationStateData(spineData);\n\n            /**\n             * A spine AnimationState object created from the spine AnimationStateData object\n             *\n             * @member {object}\n             */\n            this.state = new core.AnimationState(this.stateData);\n\n            /**\n             * An array of containers\n             *\n             * @member {Container[]}\n             */\n            this.slotContainers = [];\n\n            this.tempClipContainers = [];\n\n            for (let i = 0, n = this.skeleton.slots.length; i < n; i++) {\n                let slot = this.skeleton.slots[i];\n                let attachment: any = slot.getAttachment();\n                let slotContainer = this.newContainer();\n                this.slotContainers.push(slotContainer);\n                this.addChild(slotContainer);\n                this.tempClipContainers.push(null);\n\n                if (attachment instanceof core.RegionAttachment) {\n                    let spriteName = (attachment.region as core.TextureAtlasRegion).name;\n                    let sprite = this.createSprite(slot, attachment, spriteName);\n                    slot.currentSprite = sprite;\n                    slot.currentSpriteName = spriteName;\n                    slotContainer.addChild(sprite);\n                }\n                else if (attachment instanceof core.MeshAttachment) {\n                    let mesh = this.createMesh(slot, attachment);\n                    slot.currentMesh = mesh;\n                    slot.currentMeshName = attachment.name;\n                    slotContainer.addChild(mesh);\n                }\n                else if (attachment instanceof core.ClippingAttachment) {\n                    this.createGraphics(slot, attachment);\n                    slotContainer.addChild(slot.clippingContainer);\n                    slotContainer.addChild(slot.currentGraphics);\n                }\n                else {\n                    continue;\n                }\n\n            }\n\n            /**\n             * The tint applied to all spine slots. This is a [r,g,b] value. A value of [1,1,1] will remove any tint effect.\n             *\n             * @member {number}\n             * @memberof spine.Spine#\n             */\n            this.tintRgb = new Float32Array([1, 1, 1]);\n\n            this.autoUpdate = true;\n            this.visible = true;\n        }\n\n        /**\n         * If this flag is set to true, the spine animation will be automatically updated every\n         * time the object id drawn. The down side of this approach is that the delta time is\n         * automatically calculated and you could miss out on cool effects like slow motion,\n         * pause, skip ahead and the sorts. Most of these effects can be achieved even with\n         * autoUpdate enabled but are harder to achieve.\n         *\n         * @member {boolean}\n         * @memberof spine.Spine#\n         * @default true\n         */\n        get autoUpdate(): boolean {\n            return this._autoUpdate;\n        }\n\n        set autoUpdate(value: boolean) {\n            if (value !== this._autoUpdate) {\n                this._autoUpdate = value;\n                this.updateTransform = value ? Spine.prototype.autoUpdateTransform : PIXI.Container.prototype.updateTransform;\n            }\n        }\n\n        /**\n         * The visibility of the spine object. If false the object will not be drawn,\n         * the updateTransform function will not be called, and the spine will not be automatically updated.\n         *\n         * @member {boolean}\n         * @memberof spine.Spine#\n         * @default true\n         */\n        get visible(): boolean {\n            return this._visible;\n        }\n\n        set visible(value: boolean) {\n            if (value !== this._visible) {\n                this._visible = value;\n                if (value) {\n                    this.lastTime = 0;\n                }\n            }\n        }\n\n        /**\n         * The tint applied to the spine object. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @member {number}\n         * @memberof spine.Spine#\n         * @default 0xFFFFFF\n         */\n        get tint(): number {\n            return PIXI.utils.rgb2hex(this.tintRgb as any);\n        }\n\n        set tint(value: number) {\n            this.tintRgb = PIXI.utils.hex2rgb(value, this.tintRgb as any);\n        }\n\n        /**\n         * Limit value for the update dt with Spine.globalDelayLimit\n         * that can be overridden with localDelayLimit\n         * @return {number} - Maximum processed dt value for the update\n         */\n        get delayLimit() : number {\n            let limit = typeof this.localDelayLimit !== \"undefined\"?\n                this.localDelayLimit: Spine.globalDelayLimit;\n\n            // If limit is 0, this means there is no limit for the delay\n            return limit || Number.MAX_VALUE\n        }\n\n        /**\n         * Update the spine skeleton and its animations by delta time (dt)\n         *\n         * @param dt {number} Delta time. Time by which the animation should be updated\n         */\n        update(dt: number) {\n            // Limit delta value to avoid animation jumps\n            let delayLimit = this.delayLimit;\n            if (dt > delayLimit) dt = delayLimit;\n\n            this.state.update(dt);\n            this.state.apply(this.skeleton);\n\n            //check we haven't been destroyed via a spine event callback in state update\n            if(!this.skeleton)\n                return;\n\n            this.skeleton.updateWorldTransform();\n\n            let slots = this.skeleton.slots;\n\n            // in case pixi has double tint\n            let globalClr = (this as any).color;\n            let light: ArrayLike<number> = null, dark: ArrayLike<number> = null;\n\n            if (globalClr) {\n                light = globalClr.light;\n                dark = globalClr.dark;\n            } else {\n                light = this.tintRgb;\n            }\n\n            let thack = false;\n\n            for (let i = 0, n = slots.length; i < n; i++) {\n                let slot = slots[i];\n                let attachment = slot.getAttachment();\n                let slotContainer = this.slotContainers[i];\n\n                if (!attachment) {\n                    slotContainer.visible = false;\n                    continue;\n                }\n\n                let spriteColor: any = null;\n\n                let attColor = (attachment as any).color;\n                if (attachment instanceof core.RegionAttachment) {\n                    let region = (attachment as core.RegionAttachment).region;\n                    if (region) {\n                        if (slot.currentMesh) {\n                            slot.currentMesh.visible = false;\n                            slot.currentMesh = null;\n                            slot.currentMeshName = undefined;\n                        }\n                        let ar = region as core.TextureAtlasRegion;\n                        if (!slot.currentSpriteName || slot.currentSpriteName !== ar.name) {\n                            let spriteName = ar.name;\n                            if (slot.currentSprite) {\n                                slot.currentSprite.visible = false;\n                            }\n                            slot.sprites = slot.sprites || {};\n                            if (slot.sprites[spriteName] !== undefined) {\n                                slot.sprites[spriteName].visible = true;\n                            }\n                            else {\n                                let sprite = this.createSprite(slot, attachment, spriteName);\n                                slotContainer.addChild(sprite);\n                            }\n                            slot.currentSprite = slot.sprites[spriteName];\n                            slot.currentSpriteName = spriteName;\n\n                        // force sprite update when attachment name is same.\n                        // issues https://github.com/pixijs/pixi-spine/issues/318\n                        } else if (slot.currentSpriteName === ar.name && !slot.hackRegion) {\n                            this.setSpriteRegion(attachment, slot.currentSprite, region);\n                        }\n                    }\n\n                    let transform = slotContainer.transform;\n                    transform.setFromMatrix(slot.bone.matrix);\n\n                    if (slot.currentSprite.color) {\n                        //YAY! double - tint!\n                        spriteColor = slot.currentSprite.color;\n                    } else {\n                        tempRgb[0] = light[0] * slot.color.r * attColor.r;\n                        tempRgb[1] = light[1] * slot.color.g * attColor.g;\n                        tempRgb[2] = light[2] * slot.color.b * attColor.b;\n                        slot.currentSprite.tint = PIXI.utils.rgb2hex(tempRgb);\n                    }\n                    slot.currentSprite.blendMode = slot.blendMode;\n                }\n                else if (attachment instanceof core.MeshAttachment) {\n                    if (slot.currentSprite) {\n                        //TODO: refactor this thing, switch it on and off for container\n                        slot.currentSprite.visible = false;\n                        slot.currentSprite = null;\n                        slot.currentSpriteName = undefined;\n\n                        //TODO: refactor this shit\n                        const transform = new PIXI.Transform();\n                        (transform as any)._parentID = -1;\n                        (transform as any)._worldID = (slotContainer.transform as any)._worldID;\n                        slotContainer.transform = transform;\n                    }\n                    if (!slot.currentMeshName || slot.currentMeshName !== attachment.name) {\n                        let meshName = attachment.name;\n                        if (slot.currentMesh) {\n                            slot.currentMesh.visible = false;\n                        }\n\n                        slot.meshes = slot.meshes || {};\n\n                        if (slot.meshes[meshName] !== undefined) {\n                            slot.meshes[meshName].visible = true;\n                        }\n                        else {\n                            let mesh = this.createMesh(slot, attachment);\n                            slotContainer.addChild(mesh);\n                        }\n\n                        slot.currentMesh = slot.meshes[meshName];\n                        slot.currentMeshName = meshName;\n                    }\n                    (attachment as core.VertexAttachment).computeWorldVerticesOld(slot, slot.currentMesh.vertices);\n                    if (slot.currentMesh.color) {\n                        // pixi-heaven\n                        spriteColor = slot.currentMesh.color;\n                    } else {\n                        tempRgb[0] = light[0] * slot.color.r * attColor.r;\n                        tempRgb[1] = light[1] * slot.color.g * attColor.g;\n                        tempRgb[2] = light[2] * slot.color.b * attColor.b;\n                        slot.currentMesh.tint = PIXI.utils.rgb2hex(tempRgb);\n                    }\n                    slot.currentMesh.blendMode = slot.blendMode;\n                }\n                else if (attachment instanceof core.ClippingAttachment) {\n                    if (!slot.currentGraphics) {\n                        this.createGraphics(slot, attachment);\n                        slotContainer.addChild(slot.clippingContainer);\n                        slotContainer.addChild(slot.currentGraphics);\n                    }\n                    this.updateGraphics(slot, attachment);\n                }\n                else {\n                    slotContainer.visible = false;\n                    continue;\n                }\n                slotContainer.visible = true;\n\n                // pixi has double tint\n                if (spriteColor) {\n                    let r0 = slot.color.r * attColor.r;\n                    let g0 = slot.color.g * attColor.g;\n                    let b0 = slot.color.b * attColor.b;\n\n                    //YAY! double-tint!\n                    spriteColor.setLight(\n                        light[0] * r0 + dark[0] * (1.0 - r0),\n                        light[1] * g0 + dark[1] * (1.0 - g0),\n                        light[2] * b0 + dark[2] * (1.0 - b0),\n                    );\n                    if (slot.darkColor) {\n                        r0 = slot.darkColor.r;\n                        g0 = slot.darkColor.g;\n                        b0 = slot.darkColor.b;\n                    } else {\n                        r0 = 0.0;\n                        g0 = 0.0;\n                        b0 = 0.0;\n                    }\n                    spriteColor.setDark(\n                        light[0] * r0 + dark[0] * (1 - r0),\n                        light[1] * g0 + dark[1] * (1 - g0),\n                        light[2] * b0 + dark[2] * (1 - b0),\n                    );\n                }\n\n                slotContainer.alpha = slot.color.a;\n            }\n\n            //== this is clipping implementation ===\n            //TODO: remove parent hacks when pixi masks allow it\n            let drawOrder = this.skeleton.drawOrder;\n            let clippingAttachment: core.ClippingAttachment = null;\n            let clippingContainer: PIXI.Container = null;\n\n            for (let i = 0, n = drawOrder.length; i < n; i++) {\n                let slot = slots[drawOrder[i].data.index];\n                let slotContainer = this.slotContainers[drawOrder[i].data.index];\n\n                if (!clippingContainer) {\n\t\t\t\t\t//Adding null check as it is possible for slotContainer.parent to be null in the event of a spine being disposed off in its loop callback\n                    if (slotContainer.parent !== null && slotContainer.parent !== this) {\n                        slotContainer.parent.removeChild(slotContainer);\n                        //silend add hack\n                        (slotContainer as any).parent = this;\n                    }\n                }\n                if (slot.currentGraphics && slot.getAttachment()) {\n                    clippingContainer = slot.clippingContainer;\n                    clippingAttachment = slot.getAttachment() as core.ClippingAttachment;\n                    clippingContainer.children.length = 0;\n                    this.children[i] = slotContainer;\n\n                    if (clippingAttachment.endSlot == slot.data) {\n                        clippingAttachment.endSlot = null;\n                    }\n\n                } else {\n                    if (clippingContainer) {\n                        let c = this.tempClipContainers[i];\n                        if (!c) {\n                            c = this.tempClipContainers[i] = this.newContainer();\n                            c.visible = false;\n                        }\n                        this.children[i] = c;\n\n                        //silent remove hack\n                        (slotContainer as any).parent = null;\n                        clippingContainer.addChild(slotContainer);\n                        if (clippingAttachment.endSlot == slot.data) {\n                            clippingContainer.renderable = true;\n                            clippingContainer = null;\n                            clippingAttachment = null;\n                        }\n                    } else {\n                        this.children[i] = slotContainer;\n                    }\n                }\n            }\n        };\n\n        private setSpriteRegion(attachment: core.RegionAttachment, sprite: SpineSprite, region: core.TextureRegion) {\n            // prevent setters calling when attachment and region is same\n            if(sprite.attachment === attachment && sprite.region === region) {\n                return;\n            }\n\n            sprite.region = region;\n            sprite.attachment = attachment;\n\n            sprite.texture = region.texture;\n            sprite.rotation = attachment.rotation * core.MathUtils.degRad;\n            sprite.position.x = attachment.x;\n            sprite.position.y = attachment.y;\n            sprite.alpha = attachment.color.a;\n\n            if (!region.size) {\n                sprite.scale.x = attachment.scaleX * attachment.width / region.originalWidth;\n                sprite.scale.y = -attachment.scaleY * attachment.height / region.originalHeight;\n            } else {\n                //hacked!\n                sprite.scale.x = region.size.width / region.originalWidth;\n                sprite.scale.y = -region.size.height / region.originalHeight;\n            }\n        }\n\n        private setMeshRegion(attachment: core.MeshAttachment, mesh: SpineMesh, region: core.TextureRegion) {\n\n            if(mesh.attachment === attachment && mesh.region === region) {\n                return;\n            }\n\n            mesh.region = region;\n            mesh.attachment = attachment;\n            mesh.texture = region.texture;\n            region.texture.updateUvs();\n            mesh.uvBuffer.update(attachment.regionUVs);\n        }\n\n        protected lastTime: number;\n\n        /**\n         * When autoupdate is set to yes this function is used as pixi's updateTransform function\n         *\n         * @private\n         */\n        autoUpdateTransform() {\n            if (Spine.globalAutoUpdate) {\n                this.lastTime = this.lastTime || Date.now();\n                let timeDelta = (Date.now() - this.lastTime) * 0.001;\n                this.lastTime = Date.now();\n                this.update(timeDelta);\n            } else {\n                this.lastTime = 0;\n            }\n\n            PIXI.Container.prototype.updateTransform.call(this);\n        };\n\n        /**\n         * Create a new sprite to be used with core.RegionAttachment\n         *\n         * @param slot {spine.Slot} The slot to which the attachment is parented\n         * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n         * @private\n         */\n        createSprite(slot: core.Slot, attachment: core.RegionAttachment, defName: string) {\n            let region = attachment.region;\n            if (slot.hackAttachment === attachment) {\n                region = slot.hackRegion;\n            }\n            let texture = region.texture;\n            let sprite = this.newSprite(texture);\n\n            sprite.anchor.set(0.5);\n            this.setSpriteRegion(attachment, sprite, attachment.region);\n\n            slot.sprites = slot.sprites || {};\n            slot.sprites[defName] = sprite;\n            return sprite;\n        };\n\n        /**\n         * Creates a Strip from the spine data\n         * @param slot {spine.Slot} The slot to which the attachment is parented\n         * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n         * @private\n         */\n        createMesh(slot: core.Slot, attachment: core.MeshAttachment) {\n            let region = attachment.region;\n            if (slot.hackAttachment === attachment) {\n                region = slot.hackRegion;\n                slot.hackAttachment = null;\n                slot.hackRegion = null;\n            }\n            let strip = this.newMesh(\n                region.texture,\n                new Float32Array(attachment.regionUVs.length),\n                attachment.regionUVs,\n                new Uint16Array(attachment.triangles),\n                PIXI.DRAW_MODES.TRIANGLES);\n\n            if ((strip as any).canvasPadding) {\n                (strip as any).canvasPadding = 1.5;\n            }\n\n            strip.alpha = attachment.color.a;\n\n            strip.region = attachment.region;\n            this.setMeshRegion(attachment, strip, region);\n\n            slot.meshes = slot.meshes || {};\n            slot.meshes[attachment.name] = strip;\n            return strip;\n        };\n\n        static clippingPolygon: Array<number> = [];\n\n        createGraphics(slot: core.Slot, clip: core.ClippingAttachment) {\n            let graphics = this.newGraphics();\n            let poly = new PIXI.Polygon([]);\n            graphics.clear();\n            graphics.beginFill(0xffffff, 1);\n            graphics.drawPolygon(poly as any);\n            graphics.renderable = false;\n            slot.currentGraphics = graphics;\n            slot.clippingContainer = this.newContainer();\n            slot.clippingContainer.mask = slot.currentGraphics;\n\n            return graphics;\n        }\n\n        updateGraphics(slot: core.Slot, clip: core.ClippingAttachment) {\n            let geom = slot.currentGraphics.geometry;\n            let vertices = (geom.graphicsData[0].shape as PIXI.Polygon).points;\n            let n = clip.worldVerticesLength;\n            vertices.length = n;\n            clip.computeWorldVertices(slot, 0, n, vertices, 0, 2);\n            geom.invalidate();\n        }\n\n        /**\n         * Changes texture in attachment in specific slot.\n         *\n         * PIXI runtime feature, it was made to satisfy our users.\n         *\n         * @param slotIndex {number}\n         * @param [texture = null] {PIXI.Texture} If null, take default (original) texture\n         * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there\n         * @returns {boolean} Success flag\n         */\n        hackTextureBySlotIndex(slotIndex: number, texture: PIXI.Texture = null, size: PIXI.Rectangle = null) {\n            let slot = this.skeleton.slots[slotIndex];\n            if (!slot) {\n                return false;\n            }\n            let attachment: any = slot.getAttachment();\n            let region: core.TextureRegion = attachment.region;\n            if (texture) {\n                region = new core.TextureRegion();\n                region.texture = texture;\n                region.size = size;\n                slot.hackRegion = region;\n                slot.hackAttachment = attachment;\n            } else {\n                slot.hackRegion = null;\n                slot.hackAttachment = null;\n            }\n            if (slot.currentSprite && slot.currentSprite.region != region) {\n                this.setSpriteRegion(attachment, slot.currentSprite, region);\n                slot.currentSprite.region = region;\n            } else if (slot.currentMesh && slot.currentMesh.region != region) {\n                this.setMeshRegion(attachment, slot.currentMesh, region);\n            }\n            return true;\n        }\n\n        /**\n         * Changes texture in attachment in specific slot.\n         *\n         * PIXI runtime feature, it was made to satisfy our users.\n         *\n         * @param slotName {string}\n         * @param [texture = null] {PIXI.Texture} If null, take default (original) texture\n         * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there\n         * @returns {boolean} Success flag\n         */\n        hackTextureBySlotName(slotName: string, texture: PIXI.Texture = null, size: PIXI.Rectangle = null) {\n            let index = this.skeleton.findSlotIndex(slotName);\n            if (index == -1) {\n                return false;\n            }\n            return this.hackTextureBySlotIndex(index, texture, size);\n        }\n\n        //those methods can be overriden to spawn different classes\n        newContainer() {\n            return new PIXI.Container();\n        }\n\n        newSprite(tex: PIXI.Texture) {\n            return new SpineSprite(tex);\n        }\n\n        newGraphics() {\n            return new PIXI.Graphics();\n        }\n\n        newMesh(texture: PIXI.Texture, vertices?: Float32Array, uvs?: Float32Array, indices?: Uint16Array, drawMode?: number) {\n            return new SpineMesh(texture, vertices, uvs, indices, drawMode);\n        }\n\n        transformHack() {\n            return 1;\n        }\n\n        /**\n         * Hack for pixi-display and pixi-lights. Every attachment name ending with a suffix will be added to different layer\n         * @param nameSuffix\n         * @param group\n         * @param outGroup\n         */\n        hackAttachmentGroups(nameSuffix: string, group: any, outGroup: any) {\n            if (!nameSuffix) {\n                return;\n            }\n            const list_d = [], list_n = [];\n            for (let i = 0, len = this.skeleton.slots.length; i < len; i++) {\n                const slot = this.skeleton.slots[i];\n                const name = slot.currentSpriteName || slot.currentMeshName || \"\";\n                const target = slot.currentSprite || slot.currentMesh;\n                if(name.endsWith(nameSuffix)){\n                    target.parentGroup = group;\n                    list_n.push(target);\n                }else if(outGroup && target){\n                    target.parentGroup = outGroup;\n                    list_d.push(target);\n                }\n            }\n            return [list_d,list_n];\n        };\n\n        destroy(options?: any): void {\n            for (let i = 0, n = this.skeleton.slots.length; i < n; i++) {\n                let slot = this.skeleton.slots[i];\n                for (let name in slot.meshes) {\n                    slot.meshes[name].destroy(options);\n                }\n                slot.meshes = null;\n\n                for (let name in slot.sprites) {\n                    slot.sprites[name].destroy(options);\n                }\n                slot.sprites = null;\n            }\n\n            for (let i = 0, n = this.slotContainers.length; i < n; i++) {\n                this.slotContainers[i].destroy(options);\n            }\n            this.spineData = null;\n            this.skeleton = null;\n            this.slotContainers = null;\n            this.stateData = null;\n            this.state = null;\n            this.tempClipContainers = null;\n\n            super.destroy(options);\n        }\n    }\n\n    function SlotContainerUpdateTransformV3() {\n        let pt = this.parent.worldTransform;\n        let wt = this.worldTransform;\n        let lt = this.localTransform;\n        wt.a = lt.a * pt.a + lt.b * pt.c;\n        wt.b = lt.a * pt.b + lt.b * pt.d;\n        wt.c = lt.c * pt.a + lt.d * pt.c;\n        wt.d = lt.c * pt.b + lt.d * pt.d;\n        wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n        wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n        this._currentBounds = null;\n    }\n}\n","namespace pixi_spine {\n    (PIXI as any).spine = pixi_spine;\n\n    // texture patch for v5\n\n    const TextureProto = PIXI.Texture.prototype as any;\n\n    if (!TextureProto._updateUvs) {\n        TextureProto._updateUvs = TextureProto.updateUvs;\n    }\n}\n","declare namespace PIXI.loaders {\n    export interface IMetadata {\n        spineSkeletonScale?: number;\n        spineAtlas?: any;\n        spineAtlasSuffix?: string;\n        spineAtlasFile?: string;\n        spineMetadata?: any;\n        imageNamePrefix?: string;\n        atlasRawData?: string;\n        imageLoader?: any;\n        images?: any;\n        imageMetadata?: any;\n        image?: any;\n    }\n}\n\nnamespace pixi_spine {\n\n    function isJson(resource: PIXI.LoaderResource) {\n        return resource.type === PIXI.LoaderResource.TYPE.JSON;\n    }\n\n    function isBuffer(resource: PIXI.LoaderResource) {\n        return resource.xhrType === PIXI.LoaderResource.XHR_RESPONSE_TYPE.BUFFER;\n    }\n\n    PIXI.LoaderResource.setExtensionXhrType('skel', PIXI.LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n\n    export class AtlasParser {\n        static use(this: PIXI.Loader, resource: PIXI.LoaderResource, next: () => any) {\n            // skip if no data, its not json, or it isn't atlas data\n            if (!resource.data) {\n                return next();\n            }\n\n            const isJsonSpineModel = isJson(resource) && resource.data.bones;\n            const isBinarySpineModel = isBuffer(resource) && (resource.extension === 'skel' || resource.metadata.spineMetadata);\n\n            if (!isJsonSpineModel && !isBinarySpineModel) {\n                return next();\n            }\n\n            let parser: core.SkeletonJson | core.SkeletonBinary = null;\n            let dataToParse = resource.data;\n\n            if (isJsonSpineModel) {\n                parser = new core.SkeletonJson(null);\n            } else {\n                parser = new core.SkeletonBinary(null);\n                if (resource.data instanceof ArrayBuffer) {\n                    dataToParse = new Uint8Array(resource.data);\n                }\n            }\n\n            const metadata = resource.metadata || {};\n            const metadataSkeletonScale = metadata ? resource.metadata.spineSkeletonScale : null;\n\n            if (metadataSkeletonScale) {\n                parser.scale = metadataSkeletonScale;\n            }\n\n            const metadataAtlas = metadata ? resource.metadata.spineAtlas : null;\n            if (metadataAtlas === false) {\n                return next();\n            }\n            if (metadataAtlas && metadataAtlas.pages) {\n                //its an atlas!\n                parser.attachmentLoader = new core.AtlasAttachmentLoader(metadataAtlas);\n                resource.spineData = parser.readSkeletonData(dataToParse);\n                resource.spineAtlas = metadataAtlas;\n\n                return next();\n            }\n\n            const metadataAtlasSuffix = metadata.spineAtlasSuffix || '.atlas';\n\n            /**\n             * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n             * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n             * have the same name\n             */\n            let atlasPath = resource.url;\n            let queryStringPos = atlasPath.indexOf('?');\n            if (queryStringPos > 0) {\n                //remove querystring\n                atlasPath = atlasPath.substr(0, queryStringPos)\n            }\n            atlasPath = atlasPath.substr(0, atlasPath.lastIndexOf('.')) + metadataAtlasSuffix;\n            // use atlas path as a params. (no need to use same atlas file name with json file name)\n            if (resource.metadata && resource.metadata.spineAtlasFile) {\n                atlasPath = resource.metadata.spineAtlasFile;\n            }\n\n            //remove the baseUrl\n            atlasPath = atlasPath.replace(this.baseUrl, '');\n\n            const atlasOptions = {\n                crossOrigin: resource.crossOrigin,\n                xhrType: PIXI.LoaderResource.XHR_RESPONSE_TYPE.TEXT,\n                metadata: metadata.spineMetadata || null,\n                parentResource: resource\n            };\n            const imageOptions = {\n                crossOrigin: resource.crossOrigin,\n                metadata: metadata.imageMetadata || null,\n                parentResource: resource\n            };\n            let baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n            //remove the baseUrl\n            baseUrl = baseUrl.replace(this.baseUrl, '');\n\n            const namePrefix = metadata.imageNamePrefix || (resource.name + '_atlas_page_');\n\n            const adapter = metadata.images ? staticImageLoader(metadata.images)\n                : metadata.image ? staticImageLoader({ 'default': metadata.image })\n                    : metadata.imageLoader ? metadata.imageLoader(this, namePrefix, baseUrl, imageOptions)\n                        : imageLoaderAdapter(this, namePrefix, baseUrl, imageOptions);\n\n            const createSkeletonWithRawAtlas = function (rawData: string) {\n                new core.TextureAtlas(rawData, adapter, function (spineAtlas) {\n                    if (spineAtlas) {\n                        parser.attachmentLoader = new core.AtlasAttachmentLoader(spineAtlas);\n                        resource.spineData = parser.readSkeletonData(dataToParse);\n                        resource.spineAtlas = spineAtlas;\n                    }\n                    next();\n                });\n            };\n\n            if (resource.metadata && resource.metadata.atlasRawData) {\n                createSkeletonWithRawAtlas(resource.metadata.atlasRawData)\n            } else {\n                this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (atlasResource: any) {\n                    if (!atlasResource.error) {\n                        createSkeletonWithRawAtlas(atlasResource.data);\n                    } else {\n                        next();\n                    }\n                });\n            }\n        }\n    }\n\n    export function imageLoaderAdapter(loader: any, namePrefix: any, baseUrl: any, imageOptions: any) {\n        if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length - 1)) {\n            baseUrl += '/';\n        }\n        return function (line: string, callback: (baseTexture: PIXI.BaseTexture) => any) {\n            const name = namePrefix + line;\n            const url = baseUrl + line;\n\n            const cachedResource = loader.resources[name];\n            if (cachedResource) {\n                const done = () => {\n                    callback(cachedResource.texture.baseTexture)\n                }\n                if (cachedResource.texture) {\n                    done();\n                }\n                else {\n                    cachedResource.onAfterMiddleware.add(done);\n                }\n            } else {\n                loader.add(name, url, imageOptions, (resource: PIXI.LoaderResource) => {\n                  if (!resource.error) {\n                    callback(resource.texture.baseTexture);\n                  } else {\n                    callback(null);\n                  }\n                });\n            }\n        }\n    }\n\n    export function syncImageLoaderAdapter(baseUrl: any, crossOrigin: any) {\n        if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length - 1)) {\n            baseUrl += '/';\n        }\n        return function (line: any, callback: any) {\n            callback(PIXI.BaseTexture.from(line, crossOrigin));\n        }\n    }\n\n    export function staticImageLoader(pages: { [key: string]: (PIXI.BaseTexture | PIXI.Texture) }) {\n        return function (line: any, callback: any) {\n            let page = pages[line] || pages['default'] as any;\n            if (page && page.baseTexture)\n                callback(page.baseTexture);\n            else\n                callback(page);\n        }\n    }\n\n    if (PIXI.Loader) {\n        PIXI.Loader.registerPlugin(AtlasParser);\n    }\n}\n"]}